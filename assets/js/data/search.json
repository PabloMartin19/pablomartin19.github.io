[
  
  {
    "title": "Systemd-Boot",
    "url": "/posts/systemd-boot/",
    "categories": "Sistemas, Systemd",
    "tags": "Systemd",
    "date": "2025-01-14 14:30:00 +0100",
    





    
    "snippet": "Los desarrolladores de Debian han propuesto el uso de systemd-boot para instalaciones UEFI de Debian Trixie, que se lanzará en 2025. Opción disponible, de momento, en instalaciones debian 13 en mod...",
    "content": "Los desarrolladores de Debian han propuesto el uso de systemd-boot para instalaciones UEFI de Debian Trixie, que se lanzará en 2025. Opción disponible, de momento, en instalaciones debian 13 en modo experto. El objetivo es agregar soporte de arranque seguro firmado a Debian para intentar resolver el problema relacionado con UEFI y Secure Boot con sistemas Debian. Proponen utilizar un gestor de arranque llamado “systemd-boot” para mejorar el proceso de arranque de Debian en sistemas UEFI.1. Instala en máquina virtual, debian 13 con systemd-boot, y familiarízate con este nuevo gestor de arranque.En esta parte del artículo, aprenderemos a instalar Debian 13 (Trixie) con el gestor de arranque systemd-boot en un sistema UEFI.Comenzamos descargando la ISO de Debian 13 Trixie desde la página oficial del proyecto Debian. En esta sección elegiremos la opción que más nos convenga, en mi caso la netinst.En esta instalación utilizaremos QEMU/KVM como plataforma de virtualización para crear la máquina virtual. Es fundamental configurar correctamente UEFI antes de comenzar la instalación, ya que Debian 13 utiliza este modo de arranque junto con systemd-boot.Para asegurarnos de que systemd-boot se instale correctamente en Debian 13, es imprescindible seleccionar la instalación en modo experto. Esto nos permitirá elegir manualmente el gestor de arranque y realizar configuraciones avanzadas.En lugar de seleccionar la opción estándar Install, elegimos “Advanced options” y luego “Expert install”.Una vez elegida esta opción, seguimos con las instalación en donde primero de todo debemos elegir el idioma:Durante la instalación en modo experto de Debian 13, el instalador puede ofrecer una opción llamada “Detectar y montar el medio de instalación”. Esta opción es especialmente útil si estamos utilizando una instalación por red o un medio de instalación que no es el disco duro local (por ejemplo, un USB o una ISO montada). Por lo tanto, seleccionamos la que nos muestra automáticamente.Seguidamente nos mostrará una serie de componentes opcionales para descargarlos en caso de ser necesarios. Yo personalmente no he seleccionado ninguno, pues para el objetivo de esta práctica no nos hará falta:Luego, nos pedirá como queremos configurar la red, elegimos automáticamente:Una vez seleccionado esto, seguiremos con la instalación tal y como estamos acostumbrados. Pero llegados al punto del particionado de discos debemos pararnos.El particionado del disco es una de las etapas clave en la instalación de Debian, especialmente cuando estamos configurando un sistema UEFI. Al seleccionar el particionado del disco, es importante configurar adecuadamente las particiones para que Debian se instale correctamente y utilice systemd-boot como gestor de arranque.Por lo tanto, debemos seleccionar que queremos un particionado manual, pues nos permite tener un control total sobre cómo se organiza el disco.Luego, seleccionamos el disco donde realizaremos el particionado, en este caso solo disponemos de uno:Nos preguntará que si queremos particionar el disco y le diremos que “Sí”, luego nos dará a elegir que tipo de tabla de partición vamos a utilizar. En este caso seleccionamos gpt:Ahora, debemos realizar el particionado, el cual yo haré de la siguiente forma:  Partición EFI:  Tipo: EFI System Partition  Tamaño recomendado: Al menos 100 MB, aunque se recomienda entre 300 MB y 500 MB para asegurar un arranque adecuado.  Punto de montaje: /boot/efi  Esta partición es crucial para UEFI, ya que contiene los archivos del cargador de arranque, como systemd-boot.  Partición raíz (/):  Tipo: ext4  Tamaño recomendado: Al menos 20 GB o más  Punto de montaje: /  Esta partición contendrá el sistema operativo y todos los archivos de configuración.  Área de intercambio (swap):  Tipo: Linux swap  Tamaño recomendado: el tamaño será el restante, en este caso 142MB.  Esta partición es utilizada como espacio de intercambio cuando la RAM se llena.De forma que el particionado quedaría de la siguiente forma:Una vez que hayamos creado y configurado las particiones, el instalador nos pedirá que confirmemos el esquema de particionado. Si todo es correcto, seleccionaremos “Sí” para aplicar los cambios. Esto formateará el disco y creará las particiones seleccionadas.Bien, pues una vez realizado el particionado debemos instalar el sistema base, el cual nos dará a elegir que núcleo queremos. Yo personalmente he seleccionado la segunda opción:Después, nos pedirá que opción elegir en cuanto a los controladores se refiere. Yo elegiré “dirigido”, pues para esta práctica no me interesa cargar tantos drivers.Cuando lleguemos a la parte del proceso de instalación donde el instalador te pregunta si deseas analizar medios de instalación adicionales, es importante seleccionar “No”.Esta opción permite al instalador buscar e instalar paquetes adicionales desde otros medios (por ejemplo, discos o dispositivos USB adicionales que contengan paquetes de instalación). Sin embargo, en la mayoría de los casos, no es necesario agregar más medios de instalación si ya estamos utilizando una imagen ISO completa o una instalación por red.Cuando lleguemos a la opción de “¿Desea utilizar una réplica en red?” durante la instalación, es importante seleccionar “Sí”.En este paso, el instalador te da la opción de utilizar una réplica en red (mirror) para obtener paquetes adicionales y actualizaciones durante el proceso de instalación. Dado que estás utilizando una imagen de instalación mínima (netinst), el sistema base que se instalará inicialmente será bastante reducido. Al seleccionar “Sí”, podrás acceder a una réplica en red que proporcionará los paquetes necesarios para completar la instalación y actualizar el sistema.Al hacerlo, se descargará software adicional y se instalarán los paquetes que permiten completar un sistema Debian completamente funcional.Seguidamente seleccionamos HTTP como el protocolo para acceder a la réplica en red.En esta etapa del proceso de instalación, nos preguntará si queremos usar firmware no libre para que ciertos componentes de hardware (como tarjetas Wi-Fi, chipsets de audio, etc.) funcionen correctamente.El firmware no libre es necesario para que algunos dispositivos de hardware funcionen, pero no es software libre. Sin embargo, Debian ofrece estos firmwares para garantizar la compatibilidad con una amplia variedad de hardware, aunque sus licencias restringen la libertad de usar, modificar o compartir el software.Seleccionar “Sí” en esta opción permitirá que el instalador cargue y use los firmwares no libres que puedan ser necesarios para que tu hardware funcione correctamente, especialmente si estás utilizando hardware específico que requiere controladores no libres.En esta etapa, se te preguntará si deseas habilitar ciertos servicios de actualización para tu sistema Debian. Debian ofrece dos servicios principales relacionados con las actualizaciones: actualizaciones de seguridad y actualizaciones de la distribución.      Actualizaciones de seguridad: Estas actualizaciones son fundamentales para mantener el sistema protegido contra vulnerabilidades de seguridad. Debian recomienda encarecidamente habilitar este servicio para recibir actualizaciones que solucionen posibles fallos de seguridad en el sistema.        Actualizaciones de la distribución: Este servicio ofrece versiones más recientes de los paquetes del sistema que contienen cambios importantes. Mantener este servicio habilitado asegura que el sistema se mantenga actualizado con las últimas versiones estables de los paquetes.        Programas migrados a nuevas versiones (opcional): Esta opción permite acceder a programas más recientes que se encuentran en desarrollo o que han sido migrados a una nueva versión. Estos paquetes pueden no ser tan estables, ya que no han sido probados completamente, pero pueden ofrecer nuevas características.  Por lo tanto, dejamos marcadas las dos primeras opciones que vienen por defecto:En esta parte nos dirá si queremos que se realicen actualizaciones automáticas, aunque es una opción interesante, para esta práctica seleccionaremos que no:En la selección de programas elegiremos a nuestro gusto:Después de varios minutos en los que el instalador descarga e instala los paquetes del sistema, llegamos a uno de los puntos más importantes de la instalación: la selección del cargador de arranque.El cargador de arranque es un software esencial que permite iniciar el sistema operativo tras encender el equipo. Tradicionalmente, Debian utiliza GRUB como su gestor de arranque por defecto, pero en esta instalación estamos configurando systemd-boot, un gestor más ligero y moderno diseñado específicamente para sistemas UEFI.Después de completar la instalación del sistema y llegar al momento del reinicio, es necesario desactivar el “Secure Boot” en el firmware UEFI para que el cargador de arranque systemd-boot funcione correctamente.¿Por qué desactivar Secure Boot?El Secure Boot es una característica de UEFI diseñada para evitar que se cargue software no firmado o malicioso al iniciar el sistema. Sin embargo, en algunos casos, como al instalar Debian con systemd-boot, el firmware puede bloquear el arranque si el sistema operativo no está firmado digitalmente o no es compatible con el Secure Boot.systemd-boot es un gestor de arranque que no siempre es compatible con Secure Boot de forma predeterminada, por lo que es necesario desactivarlo para permitir que el sistema se inicie correctamente.Para desactivarlo seguimos los pasos de las siguientes capturas:Guardamos los cambios con F10 y le damos a “Continue”, de esta forma ya se iniciará correctamente el sistema:Después de haber reiniciado el sistema con Secure Boot desactivado, es importante verificar que el cargador de arranque systemd-boot se ha instalado y configurado correctamente.Para hacerlo, utilizamos el siguiente comando en la terminal:root@debian:~# bootctl statusbootctl es una herramienta integrada en systemd que permite gestionar systemd-boot. El subcomando status muestra información sobre el estado actual del gestor de arranque.Como podemos observar en la imagen, systemd-boot está instalado y configurado correctamente.Por último, podemos ver la versión de Debian instalando Neofetch:Y como vemos nos sale la versión correcta:2. Cambiar el tradicional gestor de arranque grub por systemd boot en una máquina virtual con debian 12.1. Ventajas y Desventajassystemd-bootVentajas      Diseño Ligero y Sencillo:systemd-boot destaca por su enfoque minimalista, lo que lo hace más liviano en comparación con GRUB. Su simplicidad puede traducirse en tiempos de arranque más ágiles y un menor consumo de recursos.        Integración con Systemd:Al estar diseñado para trabajar de manera estrecha con systemd, este gestor de arranque facilita la administración del sistema, especialmente en entornos donde systemd ya está implementado como parte esencial.        Inicio Rápido:Debido a su diseño optimizado, systemd-boot suele arrancar el sistema más rápido que GRUB, lo que puede ser una ventaja para quienes buscan reducir los tiempos de inicio.  Desventajas      Menos Opciones de Configuración:Su enfoque simplificado significa que carece de algunas características avanzadas que GRUB sí proporciona. Esto puede ser una limitación para quienes requieren configuraciones detalladas y personalizadas. Además, solo es compatible con sistemas que utilizan EFI.        Compatibilidad con Múltiples Sistemas Operativos:A diferencia de GRUB, que maneja de forma eficiente sistemas operativos múltiples en un solo menú de arranque, systemd-boot puede necesitar configuraciones manuales adicionales para lograr lo mismo.  GRUBVentajas      Soporte para Arranque Dual y Multisistema:GRUB es ideal para aquellos que necesitan administrar varios sistemas operativos en una sola máquina, ya que facilita la selección del sistema a iniciar desde un menú de arranque.        Opciones de Configuración Avanzadas:Proporciona una amplia gama de opciones para personalizar el proceso de arranque, lo que lo convierte en una herramienta poderosa para usuarios que requieren un control detallado sobre la configuración del sistema.  Desventajas      Mayor Complejidad para Principiantes:Debido a sus múltiples opciones de configuración, puede resultar difícil de manejar para usuarios con poca experiencia. Editar archivos de configuración manualmente puede ser una tarea desafiante para quienes no están familiarizados con su funcionamiento.        Tiempo de Arranque Más Lento:Comparado con gestores de arranque más livianos como systemd-boot, GRUB puede tardar más en cargar el sistema operativo, lo que podría ser un inconveniente para quienes buscan un arranque rápido.  2. Versiones de GNU/Linux que están usando systemd boot como gestor de arranque por defectoEn mayo de 2011, Fedora se convirtió en la primera distribución principal de Linux en habilitar systemd por defecto.Distribuciones en las que systemd está habilitado de forma predeterminada:  Arch Linux, Clear Linux, Pop!_Os, Fedora y Antergos.3. Migración de Grub a SystemdBootPara hacer la migración del gestor de arranque grub a systemd-boot usaré una máquina virtual con Debian 12.Tenemos el siguiente esquema de particiones:Como podemos comprobar,el sistema ha arrancado mediante grub, ya que tiene su partición correspondiente /boot/efi. Para hacer la instalación de SystemdBoot es importante que la partición de arranque se encuentre en formato vfat, ya que SystemdBoot no reconoce otro sistema de de ficheros.Empezaremos instalando el paquete que contiene todos los binarios que usaremos para el cambio:sudo apt install systemd-bootPor defecto, en un sistema con UEFI (Unified Extensible Firmware Interface), la partición de arranque EFI (/boot/efi) ya debería estar formateada en FAT32. Esto se debe a que el sistema UEFI utiliza este formato para almacenar los cargadores de arranque (como systemd-boot o GRUB) y otros archivos necesarios para el arranque del sistema.Pero por error durante la instalación, he tenido que modificar el formato de la partición de la siguiente forma:pablo@debian:~$ sudo gdisk /dev/vdaCommand (? for help): t Partition number (1-3): 1Current type is 700 (Microsoft basic data)Hex code or GUID (L to show codes, Enter = 700): EF00Changed type of partition to 'EFI system partition'Command (? for help): wFinal checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTINGPARTITIONS!!Do you want to proceed? (Y/N): YOK; writing new GUID partition table (GPT) to /dev/vda.Warning: The kernel is still using the old partition table.The new table will be used at the next reboot or after yourun partprobe(8) or kpartx(8)The operation has completed successfully.Esto formateó la partición correctamente en FAT32. Después de formatear la partición, he ejecutado el comando bootctl para instalar el cargador de arranque, y esta vez se completó correctamente sin errores:pablo@debian:~$ sudo bootctl --path=/boot/efi installCreated \"/boot/efi/EFI/systemd\".Created \"/boot/efi/EFI/BOOT\".Created \"/boot/efi/loader\".Created \"/boot/efi/loader/entries\".Created \"/boot/efi/EFI/Linux\".Copied \"/usr/lib/systemd/boot/efi/systemd-bootx64.efi\" to \"/boot/efi/EFI/systemd/systemd-bootx64.efi\".Copied \"/usr/lib/systemd/boot/efi/systemd-bootx64.efi\" to \"/boot/efi/EFI/BOOT/BOOTX64.EFI\".Random seed file /boot/efi/loader/random-seed successfully written (32 bytes).Not installing system token, since we are running in a virtualized environment.Created EFI boot entry \"Linux Boot Manager\".Ahora, la instalación se completó con éxito, creando los archivos y directorios esperados en /boot/efi:A continuación ejecutaremos el siguiente comando:pablo@debian:~$ sudo bootctl install Copied \"/usr/lib/systemd/boot/efi/systemd-bootx64.efi\" to \"/boot/efi/EFI/systemd/systemd-bootx64.efi\".Copied \"/usr/lib/systemd/boot/efi/systemd-bootx64.efi\" to \"/boot/efi/EFI/BOOT/BOOTX64.EFI\".Random seed file /boot/efi/loader/random-seed successfully written (32 bytes).Not installing system token, since we are running in a virtualized environment.Created EFI boot entry \"Linux Boot Manager\".Este comando instalará el cargador de inicialización de SystemdBoot.Vamos a editar el fichero loader.conf el cual se encuentra en el directorio que hemos comentado antes. En este fichero definimos las opciones de arranque del cargador. Habrá que insertar el siguiente contenido:pablo@debian:~$ sudo cat /boot/efi/loader/loader.conf timeout 3console-mode keepeditor yesdefault debian.confPodemos comprobar que hemos especificado el fichero debian.conf, este fichero habrá que crearlo manualmente a continuación y será nuestra entrada por defecto. Todas las entradas del cargador de arranque serán definidas en el directorio /boot/efi/loader/entries como ficheros .conf.El fichero debian.conf que crearé contiene lo siguiente:pablo@debian:/boot/efi/loader/entries$ cat debian.conf title Debian pavlolinux /boot/vmlinuz-6.1.0-30-amd64initrd /boot/initrd.img-6.1.0-30-amd64options root=UUID=1b5bfe97-7afe-4adb-8230-a03707f63e2d rw  Title: Título de la entrada que veremos en el arranque.  Linux: Ruta de la imagen del kernel que vamos a iniciar, partiendo del directorio /boot/efi.  Initrd: Ruta de la imagen initrd que vamos a iniciar, partiendo del directorio /boot/efi.  Options: Partición raíz que se montará. En esta debemos especificar el UUID de la partición (Podemos obtenerlo con el comando blkid). Aquí también podemos definir las opciones de montaje, en mi caso rw, para lectura y escritura.También crearé otra entrada para la Shell EFI:pablo@debian:/boot/efi/loader/entries$ cat shellefi.conftitle EFI Shellefi /EFI/shellx64.efiEl firmware shellx64.efi podemos descargarlo desde el siguiente enlace:https://github.com/holoto/efi_shell_flash_bios/blob/master/Shellx64.efiEl cual moveremos a la ruta que hemos especificado:pablo@debian:~$ sudo mv Shellx64.efi /boot/efi/EFI/pablo@debian:~$ ls -l /boot/efi/EFI/total 948drwxr-xr-x 2 root root   4096 ene 16 14:20 BOOTdrwxr-xr-x 2 root root   4096 ene 16 13:46 debiandrwxr-xr-x 2 root root   4096 ene 16 14:11 Linux-rwxr-xr-x 1 root root 951744 ene 16 14:28 Shellx64.efidrwxr-xr-x 2 root root   4096 ene 16 14:20 systemdUna vez hecho esTo debemos desactivar el Secure Boot, podemos hacerlo desde la BIOS o bien ejecutando el comando:pablo@debian:~$ sudo mokutil --disable-validationpassword length: 8~16input password: input password again: Después, actualizaremos el gestor de arranque SystemdBoot:pablo@debian:~$ sudo bootctl updateSkipping \"/boot/efi/EFI/systemd/systemd-bootx64.efi\", since same boot loader version in place already.Skipping \"/boot/efi/EFI/BOOT/BOOTX64.EFI\", since same boot loader version in place already.Como último paso, podemos comprobar el orden de arranque con efibootmgr:pablo@debian:~$ efibootmgrBootCurrent: 0004Timeout: 0 secondsBootOrder: 0001,0004,0002,0000,0003Boot0000* UiAppBoot0001* Linux Boot ManagerBoot0002* UEFI Misc DeviceBoot0003* EFI Internal ShellBoot0004* debianEl primero debe ser Linux Boot Manager, podemos cambiar el orden con efibootmgr -o XXXXPodemos opcionalmente desintalar grub, aunque yo no lo haré en esta ocasión. Finalmente reiniciamos el equipo y comprobamos si arranca con SystemdBoot.A mi me dió fallo, y tras varias pruebas e investigando conseguí solucionarlo de la siguiente forma:Eliminé la entrada de debian.conf, la cual estaba rota ya que no reconocía bien los archivos:pablo@debian:~$ sudo rm /boot/efi/loader/entries/debian.confLuego, regeneré las entradas de systemd-boot para que apunten a los archivos correctos:pablo@debian:~$ sudo bootctl updateSkipping \"/boot/efi/EFI/systemd/systemd-bootx64.efi\", since same boot loader version in place already.Skipping \"/boot/efi/EFI/BOOT/BOOTX64.EFI\", since same boot loader version in place already.Y finalmente reinicié el sistema y me apareció correctamente:Pudiendo acceder sin problemas tanto al sistema:Como a la shell EFI:"
  },
  
  {
    "title": "systemd/sshfs",
    "url": "/posts/systemd/",
    "categories": "Sistemas, Systemd",
    "tags": "Systemd",
    "date": "2024-12-19 18:30:00 +0100",
    





    
    "snippet": "EnunciadoCrea dos instancias en OpenStack, basadas en la distribución de tu elección, anexa un volumen de 2GB.Una de las instancias hará de servidor, donde anexarás el volumen anterior. Deberás con...",
    "content": "EnunciadoCrea dos instancias en OpenStack, basadas en la distribución de tu elección, anexa un volumen de 2GB.Una de las instancias hará de servidor, donde anexarás el volumen anterior. Deberás configurar sshfs en el escenario, de tal forma que el cliente pueda montar el sistema de archivos remoto usando sshfs y systemd. La validación del usuario se realizará mediante clave pública/privada.      Monta manualmente el sistema de archivos remoto.        Monta el sistema de archivos remoto de forma automática, mediante fichero /etc/fstab.        Monta el sistema de archivos remoto de forma automática, mediante fichero unidad .mount        Mediante fichero unidad .mount creado en el punto 3 y crea un fichero unidad de automontaje. unidad.automount, para que se monte automáticamente cuando detecte peticiones al sistema de archivos remoto y se desmonte automáticamente transcurrido un tiempo.  Ejercicio 1Comenzamos creando el escenario necesario para la práctica, en donde utilizaremos dos instancias de OpenStack. Una de ellas actuará como servidor y otra como cliente.Luego, anexamos un volumen de 2GB a la instancia del servidor:Seguidamente accedemos a las máquinas y generamos un par de claves en ellas:debian@systemd-server:~$ ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/home/debian/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/debian/.ssh/id_rsaYour public key has been saved in /home/debian/.ssh/id_rsa.pubThe key fingerprint is:SHA256:nUOO1c1ppJFcV7DSmpBD3PUqjQkfIQttT7cf4k+F0Qw debian@systemd-serverThe key's randomart image is:+---[RSA 3072]----+|        .oooo+E=+||         o+==Oo=o||         .Oo=.B+.||         * *.@oo.||        S = O +.o||           . o ..||              o  ||               . ||                 |+----[SHA256]-----+debian@systemd-client:~$ ssh-keygen Generating public/private rsa key pair.Enter file in which to save the key (/home/debian/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/debian/.ssh/id_rsaYour public key has been saved in /home/debian/.ssh/id_rsa.pubThe key fingerprint is:SHA256:Mzy940zFH1GQxcXWT73pMETToeu9eVZ8yOP24PReETA debian@systemd-clientThe key's randomart image is:+---[RSA 3072]----+|            .EoBO||             .*oB||            ...++||       . . . o.+o||        S . oo=+ ||         + o..=o=||          +  o+o+||         + . ooo*||          o  ..*=|+----[SHA256]-----+Comprobamos que el volumen que hemos anexado anteriormente aparezca en la instancia:debian@systemd-server:~$ lsblkNAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTSvda     254:0    0   10G  0 disk ├─vda1  254:1    0  9.9G  0 part /├─vda14 254:14   0    3M  0 part └─vda15 254:15   0  124M  0 part /boot/efivdb     254:16   0    2G  0 disk Como vemos el volumen ha sido añadido, por lo que ahora vamos a usar fdisk para crear una nueva partición en el volumen vdb:debian@systemd-server:~$ sudo fdisk /dev/vdbWelcome to fdisk (util-linux 2.38.1).Changes will remain in memory only, until you decide to write them.Be careful before using the write command.The device contains 'ext4' signature and it will be removed by a write command. See fdisk(8) man page and --wipe option for more details.Device does not contain a recognized partition table.Created a new DOS (MBR) disklabel with disk identifier 0x954ead4c.Command (m for help): nPartition type   p   primary (0 primary, 0 extended, 4 free)   e   extended (container for logical partitions)Select (default p): pPartition number (1-4, default 1): 1First sector (2048-4194303, default 2048): Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-4194303, default 4194303): Created a new partition 1 of type 'Linux' and of size 2 GiB.Command (m for help): wThe partition table has been altered.Calling ioctl() to re-read partition table.Syncing disks.Volvemos a comprobar las particiones:debian@systemd-server:~$ lsblkNAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTSvda     254:0    0   10G  0 disk ├─vda1  254:1    0  9.9G  0 part /├─vda14 254:14   0    3M  0 part └─vda15 254:15   0  124M  0 part /boot/efivdb     254:16   0    2G  0 disk └─vdb1  254:17   0    2G  0 partFormateamos la partición que acabamos de crear con un sistema ext4:debian@systemd-server:~$ sudo mkfs.ext4 /dev/vdb1mke2fs 1.47.0 (5-Feb-2023)Discarding device blocks: done                            Creating filesystem with 524032 4k blocks and 131072 inodesFilesystem UUID: b891fbd6-085d-4d5b-88c6-dc6093301465Superblock backups stored on blocks: \t32768, 98304, 163840, 229376, 294912Allocating group tables: done                            Writing inode tables: done                            Creating journal (8192 blocks): doneWriting superblocks and filesystem accounting information: doneLuego creamos el punto de montaje de la particción y lo montamos en el directorio que hemos seleccionado:debian@systemd-server:~$ sudo mkdir -p /mountdebian@systemd-server:~$ sudo mount /dev/vdb1 /mountVolvemos a comprobar que la partición se ha montado correctamente en el directorio indicado:debian@systemd-server:~$ lsblkNAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTSvda     254:0    0   10G  0 disk ├─vda1  254:1    0  9.9G  0 part /├─vda14 254:14   0    3M  0 part └─vda15 254:15   0  124M  0 part /boot/efivdb     254:16   0    2G  0 disk └─vdb1  254:17   0    2G  0 part /mountCreamos un fichero de prueba que usaremos para comprobar más tarde que el montaje ha funcionado correctamente:debian@systemd-server:/mount$ cat kk.txt Buenas tardes por la mañanadebian@systemd-server:/mount$ ls -ltotal 20-rw-r--r-- 1 root root    29 Jan  9 07:51 kk.txtdrwx------ 2 root root 16384 Jan  9 07:48 lost+foundInstalamos sshfs en ambas instancias:debian@systemd-server:~$ sudo apt install sshfsdebian@systemd-client:~$ sudo apt install sshfsImportante, necesitaremos tener la clave pública de la máquina cliente en el fichero authorized_keys de la máquina servidor para que el montaje funcione correctamente.Por último, montamos el sistema de ficheros creado en la máquina servidor en la máquina cliente, utilizando sshfs con las siguientes instrucciones:debian@systemd-client:~$ mkdir montajedebian@systemd-client:~$ sshfs debian@10.0.0.22:/mount /home/debian/montaje/ -o IdentityFile=/home/debian/.ssh/id_rsaThe authenticity of host '10.0.0.22 (10.0.0.22)' can't be established.ED25519 key fingerprint is SHA256:jA8NMNDhdcLCYkll2HrP9UHnwsoIXcb/ZdbBlaNMvfo.This key is not known by any other names.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesdebian@systemd-client:~$ ls -l montaje/total 20-rw-r--r-- 1 root root    29 Jan  9 07:51 kk.txtdrwx------ 1 root root 16384 Jan  9 07:48 lost+founddebian@systemd-client:~$ cat montaje/kk.txt Buenas tardes por la mañanaComo vemos, el montaje ha funcionado a la perfección:debian@systemd-client:~$ df -hFilesystem               Size  Used Avail Use% Mounted onudev                     462M     0  462M   0% /devtmpfs                     97M  512K   96M   1% /run/dev/vda1                9.7G  1.2G  8.1G  13% /tmpfs                    481M     0  481M   0% /dev/shmtmpfs                    5.0M     0  5.0M   0% /run/lock/dev/vda15               124M   12M  113M  10% /boot/efitmpfs                     97M     0   97M   0% /run/user/1000debian@10.0.0.22:/mount  2.0G   28K  1.9G   1% /home/debian/montajeEjercicio 2Para la realización del montaje automático usaremos fstab, donde tendremos que añadir la siguiente línea al fichero /etc/fstab de la máquina cliente:sshfs#debian@10.0.0.22:/mount /mnt/sshfs fuse defaults,_netdev,identityfile=/home/debian/.ssh/id_rsa,allow_other 0 0Esta configuración permite montar un sistema de archivos remoto a través de SSH en el directorio local /mnt/sshfs. Para ello, se utiliza un usuario específico, una dirección IP, y se accede a la carpeta remota empleando el sistema de archivos FUSE. Además, el proceso de autenticación se realiza mediante una clave privada ubicada en /home/debian/.ssh/id_rsa.En la máquina cliente, se crea previamente el punto de montaje especificado:debian@systemd-client:~$ sudo mkdir -p /mnt/sshfsdebian@systemd-client:~$ sudo chown debian:debian /mnt/sshfsTras realizar un reinicio, comprobamos que el montaje se ha realizado correctamente:debian@systemd-client:~$ df -hFilesystem               Size  Used Avail Use% Mounted onudev                     462M     0  462M   0% /devtmpfs                     97M  500K   96M   1% /run/dev/vda1                9.7G  1.2G  8.1G  13% /tmpfs                    481M     0  481M   0% /dev/shmtmpfs                    5.0M     0  5.0M   0% /run/lock/dev/vda15               124M   12M  113M  10% /boot/efidebian@10.0.0.22:/mount  2.0G   28K  1.9G   1% /mnt/sshfstmpfs                     97M     0   97M   0% /run/user/1000Comprobamos que podemos ver el contenido del fichero anteriormente montado:debian@systemd-client:~$ ls -l /mnt/sshfs/total 20-rw-r--r-- 1 root root    29 Jan  9 07:51 kk.txtdrwx------ 1 root root 16384 Jan  9 07:48 lost+founddebian@systemd-client:~$ cat /mnt/sshfs/kk.txt Buenas tardes por la mañanaEjercicio 3En lugar de utilizar el archivo /etc/fstab para el montaje automático del sistema de archivos remoto, podemos emplear una unidad de systemd en la máquina cliente. Esto nos permitirá gestionar el montaje con systemd de forma eficiente, especificando los parámetros necesarios.debian@systemd-client:~$ cat /etc/systemd/system/home-debian-sshfs.mount[Unit]Description=Montaje sistema de archivos remoto[Mount]What=debian@10.0.0.22:/mountWhere=/home/debian/sshfsType=fuse.sshfsOptions=_netdev,IdentityFile=/home/debian/.ssh/id_rsa,allow_other,default_permissions,reconnectHacemos un reinicio para que los cambios se ejecuten:debian@systemd-client:~$ sudo systemctl daemon-reloaddebian@systemd-client:~$ sudo systemctl enable home-debian-sshfs.mountThe unit files have no installation config (WantedBy=, RequiredBy=, Also=,Alias= settings in the [Install] section, and DefaultInstance= for templateunits). This means they are not meant to be enabled using systemctl. Possible reasons for having this kind of units are:• A unit may be statically enabled by being symlinked from another unit's  .wants/ or .requires/ directory.• A unit's purpose may be to act as a helper for some other unit which has  a requirement dependency on it.• A unit may be started when needed via activation (socket, path, timer,  D-Bus, udev, scripted systemctl call, ...).• In case of template units, the unit is meant to be enabled with some  instance name specified.debian@systemd-client:~$ sudo systemctl start home-debian-sshfs.mountComprobamos que el montaje haya salido correctamente:debian@systemd-client:~$ df -hFilesystem               Size  Used Avail Use% Mounted onudev                     462M     0  462M   0% /devtmpfs                     97M  500K   96M   1% /run/dev/vda1                9.7G  1.2G  8.1G  13% /tmpfs                    481M     0  481M   0% /dev/shmtmpfs                    5.0M     0  5.0M   0% /run/lock/dev/vda15               124M   12M  113M  10% /boot/efitmpfs                     97M     0   97M   0% /run/user/1000debian@10.0.0.22:/mount  2.0G   28K  1.9G   1% /home/debian/sshfsAdemás, podemos ver el contenido:debian@systemd-client:~$ ls -l sshfs/total 20-rw-r--r-- 1 root root    29 Jan  9 07:51 kk.txtdrwx------ 1 root root 16384 Jan  9 07:48 lost+founddebian@systemd-client:~$ cat sshfs/kk.txt Buenas tardes por la mañanaEjercicio 4Vamos a configurar una unidad de automontaje adicional que trabajará en conjunto con la unidad .mount creada anteriormente. En esta nueva unidad de automontaje, definiremos la unidad de montaje previamente configurada, el punto de montaje que utilizaremos y un tiempo de inactividad (en segundos) tras el cual se desmontará automáticamente si no hay actividad. Esto permitirá que el sistema gestione el montaje de forma dinámica.debian@systemd-client:~$ cat /etc/systemd/system/home-debian-sshfs.automount[Unit]Description=Montaje sistema de archivos remotoRequires=home-debian-sshfs.mount[Automount]Where=/home/debian/sshfsTimeoutIdleSec=1000Reiniciamos los cambios e iniciamos la unidad que acabamos de crear.debian@systemd-client:~$ sudo systemctl daemon-reloaddebian@systemd-client:~$ sudo systemctl enable home-debian-sshfs.automountThe unit files have no installation config (WantedBy=, RequiredBy=, Also=,Alias= settings in the [Install] section, and DefaultInstance= for templateunits). This means they are not meant to be enabled using systemctl. Possible reasons for having this kind of units are:• A unit may be statically enabled by being symlinked from another unit's  .wants/ or .requires/ directory.• A unit's purpose may be to act as a helper for some other unit which has  a requirement dependency on it.• A unit may be started when needed via activation (socket, path, timer,  D-Bus, udev, scripted systemctl call, ...).• In case of template units, the unit is meant to be enabled with some  instance name specified.debian@systemd-client:~$ sudo systemctl start home-debian-sshfs.automountComprobamos de nuevo el montaje:debian@systemd-client:~$ df -hFilesystem               Size  Used Avail Use% Mounted onudev                     462M     0  462M   0% /devtmpfs                     97M  500K   96M   1% /run/dev/vda1                9.7G  1.2G  8.1G  13% /tmpfs                    481M     0  481M   0% /dev/shmtmpfs                    5.0M     0  5.0M   0% /run/lock/dev/vda15               124M   12M  113M  10% /boot/efidebian@10.0.0.22:/mount  2.0G   28K  1.9G   1% /mnt/sshfstmpfs                     97M     0   97M   0% /run/user/1000debian@10.0.0.22:/mount  2.0G   28K  1.9G   1% /home/debian/sshfsY verificamos de nuevo que estén los ficheros:debian@systemd-client:~$ ls -l sshfs/total 20-rw-r--r-- 1 root root    29 Jan  9 07:51 kk.txtdrwx------ 1 root root 16384 Jan  9 07:48 lost+found"
  },
  
  {
    "title": "Certificados digitales. HTTPS",
    "url": "/posts/certificado/",
    "categories": "Seguridad, Criptografía",
    "tags": "Criptografía",
    "date": "2024-12-19 18:30:00 +0100",
    





    
    "snippet": "Certificado digital de persona físicaTarea 1: Instalación del certificado1. Una vez que hayas obtenido tu certificado, explica brevemente como se instala en tu navegador favorito.Para la instalació...",
    "content": "Certificado digital de persona físicaTarea 1: Instalación del certificado1. Una vez que hayas obtenido tu certificado, explica brevemente como se instala en tu navegador favorito.Para la instalación del certificado digital en mi navegador (Firefox), debemos dirigirnos al correo que nos manda la Fábrica Nacional de Moneda y Timbre al realizar la solicitud:Pinchamos en el enlace de descarga he introducimos los datos para continuar con la descarga:Una vez que hayamos descargado el certificado digital desde la FNMT, normalmente estará en formato .p12. Este archivo contiene tanto la clave pública como la clave privada del certificado.Por lo que para la instalación:      Abrimos Firefox y nos dirigimos al menú principal (ícono de tres líneas horizontales).        Hacemos clic en Ajustes y luego seleccionamos la sección Privacidad &amp; Seguridad.        Nos desplazamos hasta la opción Certificados y pulsamos el botón Ver Certificados.        En la pestaña Sus Certificados, seleccionamos Importar… y buscamos el archivo .p12.        Durante la importación, nos pedirá la contraseña que asignamos al descargar el certificado.  Una vez completado, el certificado aparecerá en la lista de certificados personales.2. Muestra una captura de pantalla donde se vea las preferencias del navegador donde se ve instalado tu certificado.3. ¿Cómo puedes hacer una copia de tu certificado?, ¿Como vas a realizar la copia de seguridad de tu certificado?. Razona la respuesta.  En el menú de opciones: Preferencias &gt; Privacidad y seguridad &gt; Seguridad &gt; Certificados.  Selecciona Ver certificados.  En Sus Certificados selecciona Hacer copia.De esta forma se realiza una copia del certificado digital. Y se introduce en un dispositivo externo para tener la copia.El certificado digital es único y personal. Si perdemos el archivo o la clave privada, no podremos firmar documentos ni realizar trámites online que requieran autenticación. Además, una pérdida implicaría solicitar de nuevo el certificado desde cero a la FNMT.4. Investiga como exportar la clave pública de tu certificado.En Preferencias &gt; Privacidad y seguridad &gt; Seguridad &gt; Certificados &gt; Ver certificados hacemos doble click sobre el certificado para que aparezca el visor de certificados. En la pestaña Detalles da la opción de Exportar….Una vez descargado el .pem debemos extraer la clave pública, pues en un principio estará cifrado y no podremos ver el contenido. Para ello:pavlo@debian:~/certificado()$ ls -ltotal 12-rw-r--r-- 1 pavlo pavlo 7010 dic 20 20:39 MARTIN_HIDALGO_PABLO.p12-rw-r--r-- 1 pavlo pavlo 3012 dic 27 17:29 martin-hidalgo-pablo.pempavlo@debian:~/certificado()$ sudo openssl pkcs12 -in MARTIN_HIDALGO_PABLO.p12 -clcerts -nokeys -out martin-hidalgo-pablo.pemEnter Import Password:Donde:  -in MARTIN_HIDALGO_PABLO.p12: Especifica el archivo de entrada en formato .p12.  -clcerts: Indica que se extraiga únicamente el certificado del archivo, excluyendo certificados de la cadena o intermedios.  -nokeys: Evita que se exporte la clave privada.  -out martin-hidalgo-pablo.pem: Especifica el nombre del archivo de salida que contendrá la clave pública en formato PEM.Una vez hecho esto ya podremos ver la clave pública.Tarea 2: Validación del certificado1. Instala en tu ordenador el software autofirma y desde la página de VALIDe valida tu certificado. Muestra capturas de pantalla donde se comprueba la validación.Descargamos el software desde la página https://firmaelectronica.gob.es/Home/Descargas.html. El archivo es un .zip.Antes de descomprimirlo, es necesario un paquete de java, donde tenemos que instalar los siquientes paquetes:pavlo@debian:~()$ sudo apt-get install default-jrpavlo@debian:~()$ sudo apt-get install default-jdkUna vez instalados los paquetes y descargada la herramienta necesaria:pavlo@debian:~/Descargas()$ unzip AutoFirma_Linux_Debian.zippavlo@debian:~/Descargas()$ sudo apt install libnss3-toolspavlo@debian:~/Descargas()$ sudo dpkg -i AutoFirma_1_8_3.debDespués de instalar el software de AutoFirma nos dirigimos a la página web VALIDe para verificar el certificado.En donde debemos seleccionar el certificado:E introducir el código de seguridad del CAPTCHA. Y ya tendríamos el certificado validado correctamente:Tarea 3: Firma electrónica1. Utilizando la página VALIDe y el programa autofirma, firma un documento con tu certificado y envíalo por correo a un compañero.Para esta apartado voy a crear dos ficheros para posteriormente firmarlos con nuestro certificado digital. Uno de ellos se llamará ficherovalide.txt y otro ficheroautofirma.txtpavlo@debian:~/certificado()$ echo 'Este fichero está firmado por VALIDe' &gt; ficherovalide.txtpavlo@debian:~/certificado()$ echo 'Este fichero está firmado por AutoFirma' &gt; ficheroautofirma.txtUna vez generados los ficheros vamos a proceder a firmar el primero de ellos a través de la página VALIDe. En este caso, pulsaremos en el apartado Realizar Firma.En el menú correspondiente, seleccionaremos la opción de Firmar. A continuación, el sistema nos solicitará que indiquemos el archivo que deseamos firmar. En este caso, será necesario elegir ficherovalide.txt y, además, especificar el certificado que utilizaremos para llevar a cabo la firma.Si todo ha salido correctamente nos saldrá el siguiente mensaje:Una vez completado el proceso, se confirma que la firma se ha realizado con éxito. En este punto, procederemos a Guardar Firma para almacenar en nuestro equipo el archivo generado. En mi caso, he optado por nombrarlo ficherovalide.txt_firmado.csig con el fin de distinguirlo fácilmente.Con esto, ya hemos firmado el primer archivo. Ahora, repetiremos el procedimiento con el segundo. Abriremos nuevamente la aplicación de escritorio AutoFirma y seleccionaremos, en esta ocasión, el archivo ficheroautofirma.txt. Al pulsar en Firmar, se nos solicitará el certificado a utilizar y, posteriormente, la ubicación donde deseamos guardar el documento firmado. Para diferenciarlo, he decidido asignarle el nombre ficheroautofirma.txt_firmado.csig.Si todo ha funcionado correctamente obtendremos el siguiente mensaje informativo:2. Tu debes recibir otro documento firmado por un compañero y utilizando las herramientas anteriores debes visualizar la firma (Visualizar Firma) y (Verificar Firma). ¿Puedes verificar la firma aunque no tengas la clave pública de tu compañero?, ¿Es necesario estar conectado a internet para hacer la validación de la firma?. Razona tus respuestas.Para verificar estas firmas, accederemos a la plataforma VALIDe y seleccionaremos la opción “Validar Firma”.En esta sección, elegiremos el archivo firmado que deseamos comprobar. En este caso, seleccionaremos el archivo hola.txt_signed.csig, completaremos el Captcha solicitado y haremos clic en “Validar”.Si el proceso se realiza correctamente, obtendremos un mensaje informativo que confirma que la validación ha sido exitosa:Este mensaje indica que la firma ha sido validada correctamente, lo que certifica que el archivo ha sido firmado por mi compañero, quien no puede negar haber realizado esta acción. Luego, repetiremos el mismo procedimiento con el archivo hola2.txt_firmado.csig y obtendremos el siguiente resultado:3. Entre dos compañeros, firmar los dos un documento, verificar la firma para comprobar que está firmado por los dos.Tarea 4: AutentificaciónAccedemos a la web de la DGT para verificar el funcionamiento de nuestro certificado digital accediendo a nuestro historial de puntos.Podremos elegir entre los distintos tipos de acceso y elegimos Cl@ve. Seguidamente, pulsaremos en DNIe / Certificado electrónico y se abrirá una ventana emergente. En dicha ventana emergente tendremos que seleccionar aquel certificado que queremos utilizar para la autenticación, así que en mi caso, seleccionaré el único disponible, de manera que si no ha habido ningún problema, nos habremos autenticado en la página de la Dirección General de Tráfico sin tener que introducir ningún tipo de credenciales:HTTPS / SSLAntes de hacer esta práctica vamos a crear una página web (puedes usar una página estática o instalar una aplicación web) en un servidor web apache2 que se acceda con el nombre tunombre.iesgn.org.Preparación del sitio webPara realizar este punto, instalaremos un servidor apache, y lo configuraremos para que nos sirva una página web con https. Para ello, deberemos seguir los siguientes pasos:  Instalamos el servidor:debian@https:~$ sudo apt install apache2  Deshabilitamos el VirtualHost que viene por defecto para que no nos dé problemas:debian@https:~$ sudo a2dissite 000-default.confSite 000-default disabled.To activate the new configuration, you need to run:  systemctl reload apache2debian@https:~$ sudo systemctl reload apache2  Creamos un nuevo fichero de configuración donde irá el contenido:debian@https:~$ sudo mkdir /var/www/html/pablo.iesgn.orgdebian@https:~$ sudo nano /var/www/html/pablo.iesgn.org/index.htmldebian@https:~$ cat /var/www/html/pablo.iesgn.org/index.html&lt;!DOCTYPE html&gt;            &lt;html&gt;                &lt;head&gt;                &lt;title&gt;pablo.iesgn.org&lt;/title&gt;                &lt;/head&gt;            &lt;body&gt;                &lt;h1&gt;pablo.iesgn.org&lt;/h1&gt;                &lt;p&gt;Pagina web sencilla para criptografia - HTTPS/SSL&lt;/p&gt;            &lt;/body&gt;        &lt;/html&gt;  Ahora creamos un archivo de configuración para el dominio pablo.iesgn.orgdebian@https:~$ cat /etc/apache2/sites-available/pablo.iesgn.org.conf&lt;VirtualHost *:80&gt;    ServerName pablo.iesgn.org    DocumentRoot /var/www/html/pablo.iesgn.org    &lt;Directory /var/www/html/pablo.iesgn.org&gt;        Options Indexes FollowSymLinks        AllowOverride All        Require all granted    &lt;/Directory&gt;    ErrorLog ${APACHE_LOG_DIR}/pablo.iesgn.org_error.log    CustomLog ${APACHE_LOG_DIR}/pablo.iesgn.org_access.log combined&lt;/VirtualHost&gt;  Habilitamos el nuevo VirtualHost y reiniciamos el servicio de Apache.debian@https:~$ sudo a2ensite pablo.iesgn.org.confEnabling site pablo.iesgn.org.To activate the new configuration, you need to run:  systemctl reload apache2debian@https:~$ sudo systemctl reload apache2  Por último tenemos que realizar la resolución estática, pues la página web está en una instancia de OpenStack:debian@https:~$ cat /etc/hosts127.0.0.1\tlocalhost::1\t\tlocalhost ip6-localhost ip6-loopbackff02::1\t\tip6-allnodesff02::2\t\tip6-allrouters172.22.200.222\tpablo.iesgn.orgpavlo@debian:~()$ cat /etc/hosts127.0.0.1\tlocalhost127.0.1.1\tdebian172.22.203.178  django-pablo.com#172.22.7.9\twordpress.pablo.beer#172.22.9.234\tbiblioteca.pablo.org172.22.123.1\tproxmox.gonzalonazareno.org172.22.200.222\tpablo.iesgn.org# The following lines are desirable for IPv6 capable hosts::1     localhost ip6-localhost ip6-loopbackff02::1 ip6-allnodesff02::2 ip6-allroutersY como vemos la página ya se puede ver correctamente:Tarea 1: Certificado autofirmadoEsta práctica la vamos a realizar con un compañero. En un primer momento un alumno creará una Autoridad Certficadora y firmará un certificado para la página del otro alumno. Posteriormente se volverá a realizar la práctica con los roles cambiados.Para hacer esta práctica puedes buscar información en internet, algunos enlaces interesantes:Phil’s X509/SSL GuideHow to setup your own CA with OpenSSLEn esta ocasión voy a ser yo el que haga de autoridad certificadora, de manera que podremos firmar el certificado para que nuestro compañero pueda implementar HTTPS en su servidor.Crear una autoridad certificadoraEl primer paso consiste en establecer un directorio base para la Autoridad Certificadora (CA), con subdirectorios dedicados a diferentes funciones. Esto ayudará a mantener la organización durante todo el proceso. En este ejemplo, el directorio principal será CA/ y contendrá:      certsdb: Almacén de certificados firmados.        certreqs: Almacén de solicitudes de firma de certificados (CSR).        crl: Almacén de la lista de certificados revocados (CRL).        private: Almacén para la clave privada de la autoridad certificadora.  Para crear esta estructura de directorios, ejecutaremos:debian@https:~$ mkdir -p CA/{certsdb,certreqs,crl,private}Una vez creados los directorios, accedemos al directorio principal y visualizamos la estructura:debian@https:~/CA$ tree.├── certreqs├── certsdb├── crl└── privateComo el directorio private contendrá información sensible (la clave privada de la CA), es importante restringir su acceso únicamente al propietario. Cambiamos sus permisos a 700:debian@https:~/CA$ chmod 700 ./privateLa CA necesitará un archivo que actúe como base de datos para registrar los certificados emitidos. Este archivo se creará con:debian@https:~/CA$ touch index.txtEn este paso, copiaremos el archivo de configuración predeterminado de OpenSSL a nuestro directorio de trabajo y lo personalizaremos para adaptarlo a nuestra CA.  Buscamos el archivo de configuración de OpenSSL en nuestro sistema. Las ubicaciones comunes son:      /usr/lib/ssl/openssl.cnf        /etc/openssl.cnf        /usr/share/ssl/openssl.cnf    Copiamos el archivo al directorio CA:debian@https:~/CA$ cp /usr/lib/ssl/openssl.cnf ./  Realizamos las siguientes modificaciones para que OpenSSL utilice los directorios creados anteriormente:dir             = /home/debian/CAcerts           = $dir/certsdbnew_certs_dir   = $certscountryName_default             = ESstateOrProvinceName_default     = SevillalocalityName                    = Dos Hermanas0.organizationName              = PabloMartin SLorganizationalUnitName          = Informatica#challengePassword              = A challenge password#challengePassword_min          = 4#challengePassword_max          = 20#unstructuredName               = An optional company nameImportante recalcar que estas solo son las modificaciones que yo he realizado, no es el fichero de configuración al completo.Una vez completados estos pasos, estaremos preparados para generar nuestro par de claves junto con un archivo de solicitud de firma de certificado. Posteriormente, procederemos a su autofirma. Para ello, ejecutaremos el siguiente comando:debian@https:~/CA$ sudo openssl req -new -newkey rsa:2048 -keyout private/cakey.pem -out careq.pem -config ./openssl.cnf..+...+.+.....+.+.....+....+..+...+.......+.....+...+..........+.........+..+...+.+.................+...................+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*.......+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*...+...........................+.+...+.........+..+..........+...+......+..+...+.......+..+.+.....+.........+....................................+.........+.+......+.....+..........+...+..................+.........+.....+...+.+..+...+....+...+.........+.........+.........+.....+.......+...+..................+...+..+....+......+...+...........+...+.......+...+.....+...+....+......+............+.................+................+..............+....+...........+........................+.+.....+......+..........+.....+....+...............+......+...+..+....+...+...+.........+........+.+.........+..+.+.........+...+..+....+..+...+....+........+.......+..+....+.....+............+...+......+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++....+.+........+....+..+....+.........+...............+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*...+............+..+.......+.....+....+..+...+....+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*..+............+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Enter PEM pass phrase:Verifying - Enter PEM pass phrase:-----You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter '.', the field will be left blank.-----Country Name (2 letter code) [ES]:State or Province Name (full name) [Sevilla]:Dos Hermanas []:PabloMartin SL [Internet Widgits Pty Ltd]:Informatica []:Common Name (e.g. server FQDN or YOUR name) []:pablo.debianEmail Address []:pmartinhidalgo19@gmail.comEl comando para crear un nuevo par de claves y una solicitud de firma de certificado (CSR) incluye estas opciones:  -new: Genera un par de claves nuevo.  -newkey: Define el tipo y tamaño del par de claves, en este caso RSA de 2048 bits.  -keyout: Especifica la ubicación donde se guardará la clave privada (por ejemplo, en private/cakey.pem).  -out: Define dónde guardar el CSR (por ejemplo, careq.pem).  -config: Indica a OpenSSL usar un archivo de configuración personalizado (openssl.cnf).Al ejecutar el comando, se solicita una frase de paso para proteger la clave privada. También se piden algunos datos básicos que deben coincidir con la información previamente configurada en el archivo openssl.cnf.Después de crear el CSR, se puede autofirmar el certificado para usarlo como Autoridad Certificadora (CA). Esto se realiza con el comando:debian@https:~/CA$ sudo openssl ca -create_serial -out cacert.pem -days 365 -keyfile private/cakey.pem -selfsign -extensions v3_ca -config ./openssl.cnf -infiles careq.pemUsing configuration from ./openssl.cnfEnter pass phrase for private/cakey.pem:Check that the request matches the signatureSignature okCertificate Details:        Serial Number:            36:15:6a:51:89:82:f6:66:e0:d2:4a:5d:43:61:6f:7b:3b:87:c3:5b        Validity            Not Before: Jan 11 11:56:18 2025 GMT            Not After : Jan 11 11:56:18 2026 GMT        Subject:            countryName               = ES            stateOrProvinceName       = Sevilla            organizationName          = Internet Widgits Pty Ltd            commonName                = pablo.debian            emailAddress              = pmartinhidalgo19@gmail.com        X509v3 extensions:            X509v3 Subject Key Identifier:                 70:63:CD:8F:AD:5E:82:EF:B8:DB:43:10:03:24:CA:AE:EB:6D:2F:5F            X509v3 Authority Key Identifier:                 70:63:CD:8F:AD:5E:82:EF:B8:DB:43:10:03:24:CA:AE:EB:6D:2F:5F            X509v3 Basic Constraints: critical                CA:TRUECertificate is to be certified until Jan 11 11:56:18 2026 GMT (365 days)Sign the certificate? [y/n]:y1 out of 1 certificate requests certified, commit? [y/n]yWrite out database with 1 new entriesDatabase updatedParámetros clave:  -create_serial: Genera un número de serie único de 128 bits para evitar conflictos si se reinicia el proceso.  -out: Especifica el archivo de salida del certificado firmado (por ejemplo, cacert.pem).  -days: Define la validez del certificado en días (en este caso, 365 días).  -keyfile: Utiliza la clave privada creada anteriormente (private/cakey.pem) para la firma.  -selfsign: Indica que el certificado será autofirmado.  -extensions: Selecciona las extensiones configuradas en el archivo openssl.cnf (por ejemplo, v3_ca).  -config: Indica el archivo de configuración de OpenSSL modificado.  -infiles: Especifica el CSR a firmar (en este caso, careq.pem).Durante la ejecución, OpenSSL solicita:  La frase de paso configurada para la clave privada.  Confirmación de la información del certificado antes de firmarlo.  Aprobación final para guardar el certificado.Para asegurarnos de que el certificado de la autoridad certificadora está presente en el directorio actual, procederemos a listar su contenido utilizando el siguiente comando:debian@https:~/CA$ ls -ltotal 52-rw-r--r-- 1 root root  4614 Jan 11 11:56 cacert.pem-rw-r--r-- 1 root root  1045 Jan 11 11:51 careq.pemdrwxr-xr-x 2 root root  4096 Jan 11 11:30 certreqsdrwxr-xr-x 2 root root  4096 Jan 11 11:56 certsdbdrwxr-xr-x 2 root root  4096 Jan 11 11:30 crl-rw-r--r-- 1 root root   166 Jan 11 11:56 index.txt-rw-r--r-- 1 root root    21 Jan 11 11:56 index.txt.attr-rw-r--r-- 1 root root     0 Jan 11 11:37 index.txt.old-rw-r--r-- 1 root root 12279 Jan 11 11:46 openssl.cnfdrwx------ 2 root root  4096 Jan 11 11:50 private-rw-r--r-- 1 root root    41 Jan 11 11:56 serialComo vemos existe un fichero cacert.pem que es resultado de firmar el fichero de solicitud de firma de certificado careq.pem.Todo está preparado para firmar el certificado del servidor de mi compañero. Por ello, he colocado su archivo de solicitud de firma dentro del directorio certreqs/, que es la ubicación designada para estos casos.debian@https:~/CA$ ls -l certreqs/total 4-rw-r--r-- 1 root root 1074 Jan 11 12:10 joseantoniocgonzalez.csrYa podemos proceder a firmar usando el siguiente comando:debian@https:~/CA$ sudo openssl ca -config openssl.cnf -out certsdb/joseantoniocgonzalez.crt -infiles certreqs/joseantoniocgonzalez.csrUsing configuration from openssl.cnfEnter pass phrase for /home/debian/CA/private/cakey.pem:Check that the request matches the signatureSignature okCertificate Details:        Serial Number:            36:15:6a:51:89:82:f6:66:e0:d2:4a:5d:43:61:6f:7b:3b:87:c3:5d        Validity            Not Before: Jan 11 12:37:59 2025 GMT            Not After : Jan 11 12:37:59 2026 GMT        Subject:            countryName               = ES            stateOrProvinceName       = SEVILLA            localityName              = SEVILLA            organizationName          = ASIR            commonName                = joseantoniocgonzalez.iesgn.org            emailAddress              = joseantoniocgonzalez83@gmail.com        X509v3 extensions:            X509v3 Basic Constraints:                 CA:FALSE            X509v3 Subject Key Identifier:                 0C:95:B9:A0:01:E3:46:16:7D:FE:4D:E1:6B:54:A4:E0:AA:DC:05:80            X509v3 Authority Key Identifier:                 70:63:CD:8F:AD:5E:82:EF:B8:DB:43:10:03:24:CA:AE:EB:6D:2F:5FCertificate is to be certified until Jan 11 12:37:59 2026 GMT (365 days)Sign the certificate? [y/n]:y1 out of 1 certificate requests certified, commit? [y/n]yWrite out database with 1 new entriesDatabase updatedDonde:  -config: Indica a OpenSSL que utilice un archivo de configuración personalizado, en este caso llamado openssl.cnf, en lugar del predeterminado.  -out: Especifica dónde se guardará el certificado firmado. Aquí, se almacenará en el directorio certsdb/ con el nombre joseantoniocgonzalez.crt.  -infiles: Señala el archivo CSR que se desea firmar. En este caso, es el archivo joseantoniocgonzalez.csr, ubicado en el directorio certreqs/.Al ejecutar el comando, OpenSSL solicita la frase de paso configurada previamente para proteger la clave privada de la autoridad certificadora. Esto garantiza que, incluso si la clave privada cae en manos equivocadas, no puedan realizar firmas indebidas. Antes de proceder, OpenSSL también muestra la información contenida en el certificado para confirmar que es correcta.Una vez firmado, el certificado se almacena en el directorio certsdb/. Para confirmar su creación, listamos el contenido de dicho directorio con el comando:debian@https:~/CA$ ls -l certsdb/total 24-rw-r--r-- 1 root root 4614 Jan 11 11:56 36156A518982F666E0D24A5D43616F7B3B87C35B.pem-rw-r--r-- 1 root root 4643 Jan 11 12:38 36156A518982F666E0D24A5D43616F7B3B87C35D.pem-rw-r--r-- 1 root root 4643 Jan 11 12:38 joseantoniocgonzalez.crtEl resultado muestra tres archivos:  El certificado de la autoridad certificadora.  Dos archivos relacionados con el certificado del compañero: uno identificado con un número de serie y otro con un nombre descriptivo, facilitando su identificación.El archivo que debe entregarse al compañero es certsdb/joseantoniocgonzalez.crt, que contiene su certificado firmado. Además, debe recibir el archivo cacert.pem, que es el certificado de la autoridad certificadora, necesario para verificar la validez del certificado.El archivo index.txt funciona como una base de datos en texto plano que registra información sobre los certificados emitidos por la CA. Se puede visualizar con:debian@https:~/CA$ cat index.txtV\t260111115618Z\t\t36156A518982F666E0D24A5D43616F7B3B87C35B\tunknown\t/C=ES/ST=Sevilla/O=Internet Widgits Pty Ltd/CN=pablo.debian/emailAddress=pmartinhidalgo19@gmail.comV\t260111123759Z\t\t36156A518982F666E0D24A5D43616F7B3B87C35D\tunknown\t/C=ES/ST=SEVILLA/L=SEVILLA/O=ASIR/CN=joseantoniocgonzalez.iesgn.org/emailAddress=joseantoniocgonzalez83@gmail.comEn el contenido se puede observar:  Estado de los certificados: En este caso, ambos están marcados como válidos (V).  Fecha de expiración: Indica hasta cuándo es válido cada certificado.  Número de serie: Identificador único de cada certificado.  Información del sujeto: Detalla los campos incluidos en el CSR, como el país, la organización y el correo electrónico.Configurar HTTPSAhora me toca hacerlo al revés, lo primero será generar una solicitud de firma de certificado (CSR, por sus siglas en inglés). En este caso utilizaremos OpenSSL, aunque también se podrían emplear otras herramientas de software para lograrlo.Para crear la solicitud, primero necesitamos contar con una clave privada que estará vinculada al certificado. Por lo tanto, procederemos a generar una clave privada RSA de 4096 bits, la cual será almacenada en el directorio /etc/ssl/private/. Esto se realiza mediante el siguiente comando:debian@https:~$ sudo openssl genrsa 4096 &gt; pablomh.keydebian@https:~$ sudo mv pablomh.key /etc/ssl/private/Después de generar la clave privada, ajustaremos sus permisos a 400, lo que restringirá el acceso para que únicamente el propietario pueda leer su contenido. Dado que se trata de información sensible, este paso, aunque no obligatorio, es altamente recomendable por razones de seguridad.debian@https:~$ sudo chmod 400 /etc/ssl/private/pablomh.keyA continuación, procederemos a generar un archivo .csr, que será la solicitud de firma de certificado destinada a ser validada por la autoridad certificadora (CA) configurada por nuestro compañero. Este archivo no incluye información sensible, por lo que su ubicación y los permisos asignados no son críticos. Por lo tanto:debian@https:~$ sudo openssl req -new -key /etc/ssl/private/pablomh.key -out pablomh.csrYou are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter '.', the field will be left blank.-----Country Name (2 letter code) [AU]:ESState or Province Name (full name) [Some-State]:SevillaLocality Name (eg, city) []:Dos HermanasOrganization Name (eg, company) [Internet Widgits Pty Ltd]:ASIROrganizational Unit Name (eg, section) []:InformaticaCommon Name (e.g. server FQDN or YOUR name) []:pablo.debian   Email Address []:pmartinhidalgo19@gmail.comPlease enter the following 'extra' attributesto be sent with your certificate requestA challenge password []:An optional company name []:Durante la ejecución, nos pedirá una serie de valores para identificar al certificado, que tendremos que rellenar en base a la información que nos proporcionará la autoridad certificadora; excepto los dos últimos valores, los cuales pedirán una serie de valores cuya introducción es opcional.Para verificar que el fichero de solicitud de firma ha sido correctamente generado listaremos el contenido del directorio actual:debian@https:~$ ls -ltotal 16drwxr-xr-x 6 root   root   4096 Jan 11 12:38 CA-rw-r--r-- 1 root   root   1773 Jan 14 17:00 pablomh.csrEn el directorio podemos observar un archivo llamado pablomh.csr, el cual debemos enviar a nuestro compañero para que sea firmado por la autoridad certificadora que ha creado. Junto con el certificado firmado, nuestro compañero también deberá enviarnos la clave pública de la entidad certificadora, es decir, su certificado, ya que será necesario para verificar la firma aplicada a nuestro certificado.Bien, pues Jose ya me ha enviado ambos ficheros, los cuales voy a almacenar en /etc/ssl/certs/.debian@https:~$ ls -l /etc/ssl/certs/ | grep 'pablomh'-rw-r--r-- 1 root root   2090 Jan 14 17:31 pablomh.crtdebian@https:~$ ls -l /etc/ssl/certs/ | grep 'cacert'-rw-r--r-- 1 root root   2244 Jan 14 17:31 cacert.pemDebe existir un fichero de nombre tunombre.crt que es el resultado de la firma de la solicitud de firma de certificado que previamente le hemos enviado, y otro de nombre cacert.pem, que es el certificado de la entidad certificadora, con el que posteriormente se comprobará la firma de la autoridad certificadora sobre dicho certificado del servidor.Al igual que Apache2 incluye un VirtualHost predeterminado para gestionar las solicitudes en el puerto 80 (HTTP), también dispone de otro por defecto para las conexiones entrantes en el puerto 443 (HTTPS). Este VirtualHost, llamado default-ssl, viene deshabilitado por defecto, por lo que será necesario activarlo y modificar su configuración.Para ello, ajustaremos las siguientes directivas esenciales:  ServerName: Especifica el dominio a través del cual accederemos al servidor, manteniéndolo coherente con la configuración del VirtualHost de HTTP.  SSLEngine: Habilita el motor SSL, requisito indispensable para el uso de HTTPS. Su valor debe establecerse en on.  SSLCertificateFile: Define la ruta del certificado del servidor firmado por la autoridad certificadora (CA). En este caso, el archivo se encuentra en /etc/ssl/certs/pablomh.crt.  SSLCertificateKeyFile: Indica la ubicación de la clave privada correspondiente al certificado del servidor. Se encuentra en /etc/ssl/private/pablomh.key.  SSLCACertificateFile: Especifica la ruta del certificado de la autoridad certificadora, necesario para verificar la firma del certificado del servidor. En este caso, se ubica en /etc/ssl/certs/cacert.pem.Con estas configuraciones correctamente aplicadas, el VirtualHost estará listo para gestionar conexiones seguras mediante HTTPS.Quedando el archivo final de la siguiente forma:debian@https:~$ cat /etc/apache2/sites-available/default-ssl.conf&lt;VirtualHost *:80&gt;   ServerName pablo.iesgn.org  Redirect permanent / https://pablo.iesgn.org/&lt;/VirtualHost&gt;&lt;VirtualHost *:443&gt;\tServerAdmin webmaster@localhost\tServerName pablo.iesgn.org\tDocumentRoot /var/www/html\tErrorLog ${APACHE_LOG_DIR}/error.log\tCustomLog ${APACHE_LOG_DIR}/access.log combined\tSSLEngine on\t\tSSLCertificateFile      /etc/ssl/certs/pablomh.crt\tSSLCertificateKeyFile /etc/ssl/private/pablomh.key\tSSLCACertificateFile /etc/ssl/certs/cacert.pem&lt;/VirtualHost&gt;Como este VirtualHost no está habilitado de manera predeterminada, será necesario activarlo manualmente. Para ello, utilizaremos las herramientas proporcionadas por Apache2 para gestionar la activación de sitios y configuraciones:debian@https:~# sudo a2ensite default-sslEnabling site default-ssl.To activate the new configuration, you need to run:  systemctl reload apache2Para garantizar que el acceso a la página siempre se realice de forma segura a través de HTTPS (https://), deberemos establecer una redirección permanente desde el VirtualHost que escucha en el puerto 80 (HTTP) hacia el VirtualHost en el puerto 443 (HTTPS). Esto impedirá que los usuarios accedan al servidor utilizando HTTP y los forzará a usar HTTPS.En el archivo de configuración del VirtualHost en el puerto 80, añadiremos una redirección permanente utilizando la directiva Redirect. Deberá quedar algo similar a lo siguiente:debian@https:~$ cat /etc/apache2/sites-available/000-default.conf&lt;VirtualHost *:80&gt;        ServerName pablo.iesgn.org        ServerAdmin webmaster@localhost        DocumentRoot /var/www/html        ErrorLog ${APACHE_LOG_DIR}/error.log        CustomLog ${APACHE_LOG_DIR}/access.log combined        Redirect 301 / https://pablo.iesgn.com/&lt;/VirtualHost&gt;Esta directiva Redirect permanent redirigirá todas las peticiones que lleguen al servidor a través del puerto 80 hacia el mismo dominio pero utilizando el puerto 443, lo cual asegura que todas las conexiones se realicen de manera segura mediante HTTPS. Con esta configuración, cualquier intento de acceso por HTTP será automáticamente redirigido a HTTPS.Reiniciamos:debian@https:~$ sudo systemctl restart apache2Podemos observar que se ha generado una advertencia de seguridad, lo que confirma que la redirección de http:// a https:// se ha realizado con éxito.Esta advertencia se debe a que el navegador no ha podido verificar la firma del certificado recibido desde el servidor, ya que no dispone de la clave pública o del certificado de la Autoridad Certificadora (CA). Para solucionar esto, es necesario importar manualmente dicho certificado en el navegador.En el caso de Firefox, para llevar a cabo esta importación, primero debemos hacer clic en el icono de las tres barras ubicado en la parte superior del navegador. Luego, accedemos a Preferencias (o Ajustes) y buscamos la sección Privacidad &amp; Seguridad. Desplazándonos hasta la parte inferior, encontraremos el apartado Certificados, donde haremos clic en Ver certificados. A continuación, en la pestaña Autoridades, seleccionamos la opción Importar, lo que nos permitirá añadir el certificado de la CA.Una vez elegido el certificado a importar, aparecerá un mensaje informándonos de que se nos solicita confiar en una nueva Autoridad Certificadora (CA). En este punto, simplemente confirmamos la acción haciendo clic en Aceptar.Después de completar estos pasos, podremos comprobar que el certificado ha sido importado correctamente.Una vez importado el certificado recargamos la página para mostrar el contenido:Como podemos notar, la advertencia de seguridad ha vuelto a aparecer. Si observamos junto a la barra de direcciones, veremos un icono de candado. Al hacer clic en él, se desplegará la información correspondiente.Además, si le damos a Ver Certificado nos mostrará información del mismo:¿Por qué el sitio no es seguro a pesar de usar HTTPS?El navegador sigue indicando que el sitio no es seguro porque el certificado utilizado ha sido emitido por una Autoridad Certificadora (CA) que no es reconocida como confiable por los navegadores. Esto ocurre porque el certificado ha sido generado por la CA de mi compañero, y aunque la conexión esté cifrada mediante HTTPS, navegadores como Chrome o Firefox no confiarán en una entidad que no esté validada a nivel internacional.Hemos verificado que con Apache2 hemos logrado que HTTPS funcione, aunque sin una certificación oficial no será reconocido como seguro. Ahora realizaremos la misma prueba con la otra alternativa: Nginx.El primer paso será desinstalar apache2 para evitar posibles conflictos, y tras ello, instalar nginx.Después de esto, podemos proceder con la configuración del nuevo servidor web. Este servicio también incluye un VirtualHost por defecto, pero a diferencia de Apache2, permite unificar en un solo archivo la configuración tanto del VirtualHost que opera en el puerto 80 como el del puerto 443. Este archivo se encuentra en la ruta /etc/nginx/sites-available/default.De forma que el fichero quedaría de la siguiente forma:debian@https:~$ sudo cat /etc/nginx/sites-enabled/default server {        listen 80 default_server;        listen [::]:80 default_server;        server_name pablo.iesgn.org;        return 301 https://$host$request_uri;}server {        listen 443 ssl default_server;        listen [::]:443 ssl default_server;        ssl    on;        ssl_certificate    /etc/ssl/certs/pablomh.crt;        ssl_certificate_key    /etc/ssl/private/pablomh.key;        root /var/www/html/pablo.iesgn.org;        index index.html index.htm index.nginx-debian.html;        server_name pablo.iesgn.org;        location / {                try_files $uri $uri/ =404;        }}Reiniciamos para que se efectúen los cambios:debian@https:~$ sudo systemctl reload nginxTras ello, ya estará todo listo para acceder a pablo.iesgn.org desde el navegador.Y como podemos observar, el certificado de mi compañero está funcionando correctamente."
  },
  
  {
    "title": "Integridad, firmas y autenticación",
    "url": "/posts/integridad/",
    "categories": "Seguridad, Criptografía",
    "tags": "Criptografía",
    "date": "2024-12-19 18:30:00 +0100",
    





    
    "snippet": "Tarea 1: Firmas electrónicasEn este primer apartado vamos a trabajar con las firmas eléctronicas, por lo que vamos a apoyarnos en los siguientes enlaces:  Intercambio de claves  Validación de otras...",
    "content": "Tarea 1: Firmas electrónicasEn este primer apartado vamos a trabajar con las firmas eléctronicas, por lo que vamos a apoyarnos en los siguientes enlaces:  Intercambio de claves  Validación de otras claves en nuestro anillo de claves públicas  Firmado de claves (Debian)Manda un documento y la firma electrónica del mismo a un compañero. Verifica la firma que tú has recibido.Antes de comenzar la práctica, voy a listar las claves existentes en mi keyring:pavlo@debian:~()$ gpg --list-keys/home/pavlo/.gnupg/pubring.kbx------------------------------pub   rsa3072 2024-12-13 [SC] [caduca: 2026-12-13]      C2E235639EB3A2A420828C9DED45D8BE85D4DB1Auid        [  absoluta ] Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sub   rsa3072 2024-12-13 [E] [caduca: 2026-12-13]Como podemos observar, en mi anillo de claves se encuentra mi clave personal. Por tanto, el siguiente paso será subir esta clave a un servidor de claves, como puede ser keys.gnupg.net, utilizando el fingerprint para identificarla de forma precisa.pavlo@debian:~()$ gpg --keyserver keys.gnupg.net --send-key C2E235639EB3A2A420828C9DED45D8BE85D4DB1Agpg: enviando clave ED45D8BE85D4DB1A a hkp://pgp.surf.nlLa clave ha sido enviada al servidor de claves, lo que permitirá que cualquier persona que reciba mi archivo firmado pueda descargarla e importarla para verificar la firma.Es posible elegir entre dos métodos al firmar un archivo: incluir la firma directamente dentro del archivo utilizando la opción --sign, o bien generar la firma en un archivo separado, dejando el original intacto. En este caso, optaremos por la segunda alternativa, usando la opción --detach-sign.Por lo tanto, procederemos a firmar un documento llamado UE-Empresa.pdf, separando la firma en un archivo distinto. Para lograrlo, ejecutaremos el comando correspondiente:pavlo@debian:~()$ gpg --detach-sign UE-Empresa.pdfDurante el proceso de firmado, el sistema solicitará la frase de paso asociada a nuestra clave privada. Una vez ingresada correctamente, el firmado se completará. A continuación, procederemos a listar el documento firmado:pavlo@debian:~()$ ls -l | grep 'UE'-rw-r--r--  1 pavlo pavlo 33734 nov 22 12:09 UE-Empresa.pdf-rw-r--r--  1 pavlo pavlo   438 dic 18 17:28 UE-Empresa.pdf.sigPara verificar que está firmado por nosotros ejecutamos el siguiente comando:pavlo@debian:~()$ gpg --verify UE-Empresa.pdf.sig UE-Empresa.pdfgpg: Firmado el mié 18 dic 2024 17:28:53 CETgpg:                usando RSA clave C2E235639EB3A2A420828C9DED45D8BE85D4DB1Agpg: Firma correcta de \"Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;\" [absoluta]Podemos observar que tanto el archivo original (UE-Empresa.pdf) como su firma (UE-Empresa.pdf.sig) están en ficheros independientes. Esto nos permite enviarlos a otra persona, quien podrá verificar la integridad del archivo utilizando nuestra clave pública.En este caso, mi compañero también ha seguido un procedimiento similar al nuestro. Por lo tanto, antes de proceder a verificar la firma de su archivo, es necesario importar su clave pública. Para realizar este paso, utilizaré el siguiente comando:pavlo@debian:~()$ gpg --keyserver pgp.rediris.es --recv-keys DB72B640gpg: clave F78DAA71DB72B640: clave pública \"jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;\" importadagpg: Cantidad total procesada: 1gpg:               importadas: 1Como podemos observar a continuación, la clave pública de mi compañero Jose se ha importado correctamente:pavlo@debian:~()$ gpg --list-keys/home/pavlo/.gnupg/pubring.kbx------------------------------pub   rsa3072 2024-12-13 [SC] [caduca: 2026-12-13]      C2E235639EB3A2A420828C9DED45D8BE85D4DB1Auid        [  absoluta ] Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sub   rsa3072 2024-12-13 [E] [caduca: 2026-12-13]pub   rsa4096 2024-12-18 [SC] [caduca: 2025-12-18]      7E7ECEAC3D3DF6FDAF903497F78DAA71DB72B640uid        [desconocida] jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;sub   rsa4096 2024-12-18 [E] [caduca: 2025-12-18]Jose me ha enviado dos ficheros, un fichero documento.txt que es el fichero original, y un fichero documento.txt.sig, que contiene la firma del mismo. Para verificar la firma, vamos a hacer uso de la opción --verify, pasando como parámetros ambos ficheros:pavlo@debian:~()$ gpg --verify documento.txt.sig documento.txtgpg: Firmado el mié 18 dic 2024 18:42:03 CETgpg:                usando RSA clave 7E7ECEAC3D3DF6FDAF903497F78DAA71DB72B640gpg: Firma correcta de \"jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;\" [desconocido]gpg: ATENCIÓN: ¡Esta clave no está certificada por una firma de confianza!gpg:          No hay indicios de que la firma pertenezca al propietario.Huellas dactilares de la clave primaria: 7E7E CEAC 3D3D F6FD AF90  3497 F78D AA71 DB72 B640Como muestra la salida del comando, la firma es válida. Sin embargo, también aparece un mensaje indicando que la clave no está certificada por una firma confiable. Esto significa que no existen pruebas de que la firma pertenezca realmente al propietario declarado. Esto ocurre porque la clave pública que acabamos de importar carece de validez, ya que no la hemos firmado ni contamos con intermediarios confiables que puedan respaldarla de manera indirecta. Más adelante, explicaremos este concepto con mayor profundidad.Antes de continuar con el siguiente paso, he optado por eliminar la clave pública de mi anillo de claves. Esto me permitirá empezar desde cero, asegurándome de que no quede ninguna clave almacenada. Para realizar esta acción, utilizaré la opción --delete-keys:pavlo@debian:~()$ gpg --delete-keys 7E7ECEAC3D3DF6FDAF903497F78DAA71DB72B640gpg (GnuPG) 2.2.40; Copyright (C) 2022 g10 Code GmbHThis is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.pub  rsa4096/F78DAA71DB72B640 2024-12-18 jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;¿Eliminar esta clave del anillo? (s/N) sYa he eliminado la clave pública de Jose de mi keyring.Crea un anillo de confianza entre los miembros de la clasePara garantizar la seguridad en el uso de claves GPG, es fundamental asegurarnos de que las claves públicas con las que interactuamos realmente pertenecen a sus supuestos dueños. Sin esta verificación, podríamos estar cifrando información para un atacante en lugar del destinatario legítimo o aceptando firmas falsas sin darnos cuenta. La confianza en las claves es, por tanto, un aspecto esencial en la criptografía.Una forma de establecer esta confianza es a través del anillo de confianza, un sistema basado en la validación mutua entre personas que confían entre sí. Este mecanismo permite que los usuarios firmen la huella digital (fingerprint) de una clave pública utilizando su propia clave privada. Una vez firmada, la clave se devuelve a su propietario, quien puede compartirla con otros, demostrando así que ha sido validada por alguien de confianza.Este proceso no solo fortalece la credibilidad de una clave, sino que también facilita la verificación indirecta. Si confiamos en una persona y esta, a su vez, ha certificado la clave de otra, podemos asumir que dicha clave es confiable sin necesidad de validarla directamente. La efectividad de este modelo depende de cómo se configuren las relaciones de confianza y de la fiabilidad de quienes participan en la red.Aunque puede parecer complicado al principio, este sistema es muy útil para garantizar la autenticidad de las claves en un entorno seguro. Un ejemplo práctico ayudará a comprender mejor su funcionamiento.Pasos para crear un anillo de confianzaEl primer paso es subir nuestra clave pública a un servidor de claves, en este caso lo subiré a pgp.rediris.es:pavlo@debian:~()$ gpg --keyserver hkp://pgp.rediris.es --send-keys C2E235639EB3A2A420828C9DED45D8BE85D4DB1Agpg: enviando clave ED45D8BE85D4DB1A a hkp://pgp.rediris.esLuego, procedemos a descargarnos las claves públicas de mis compañeros, usando sus nombres o correos en la búsqueda de pgp.rediris.es, con el siguiente comando:pavlo@debian:~()$ gpg --keyserver pgp.rediris.es --recv-keys DB72B640gpg: clave F78DAA71DB72B640: clave pública \"jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;\" importadagpg: Cantidad total procesada: 1gpg:               importadas: 1Básicamente cogemos los últimos dígitos para importar la clave y repetimos el proceso con todos los compañeros.Seguidamente, tendremos que firmar las claves públicas descargadas para poder validarlas en nuestro anillo de confianza. Lo haremos de la siguiente forma:pavlo@debian:~()$ gpg --sign-key 7E7ECEAC3D3DF6FDAF903497F78DAA71DB72B640pub  rsa4096/F78DAA71DB72B640     creado: 2024-12-18  caduca: 2025-12-18  uso: SC       confianza: desconocido   validez: desconocidosub  rsa4096/C32521E4109A45D6     creado: 2024-12-18  caduca: 2025-12-18  uso: E   [desconocida] (1). jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;pub  rsa4096/F78DAA71DB72B640     creado: 2024-12-18  caduca: 2025-12-18  uso: SC       confianza: desconocido   validez: desconocido Huella clave primaria: 7E7E CEAC 3D3D F6FD AF90  3497 F78D AA71 DB72 B640     jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;Esta clave expirará el 2025-12-18.¿Está realmente seguro de querer firmar esta clavecon su clave: \"Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;\" (ED45D8BE85D4DB1A)?¿Firmar de verdad? (s/N) sRepetimos el proceso con Alejandro Liáñez y con Andrés Morales.A continuación, será necesario exportar las claves de nuestros compañeros con la firma que hemos generado recientemente. Este paso nos permitirá distribuirlas manualmente a sus propietarios, quienes podrán importarlas en su sistema. Para este propósito, en mi caso, exporté las claves de tres compañeros utilizando los siguientes comandos:pavlo@debian:~()$ gpg --armor --export -a \"Andrés Morales González\" &gt; andres123.ascpavlo@debian:~()$ gpg --armor --export -a \"jose antonio canalo gonzalez\" &gt; clave-canalo.ascpavlo@debian:~()$ gpg --armor --export -a \"Alejandro Liáñez Frutos\" &gt; ale.ascY como vemos las claves han sido correctamente exportadas a los correspondientes ficheros:pavlo@debian:~()$ ls -l | grep '.asc'-rw-r--r--  1 pavlo pavlo  4260 dic 18 19:41 ale.asc-rw-r--r--  1 pavlo pavlo  3069 dic 18 17:48 andres123.asc-rw-r--r--  1 pavlo pavlo  3780 dic 18 19:34 clave-canalo.ascMis compañeros han seguido los mismos pasos, así que ellos también me enviaron mi clave con las correspondientes firmas, que debemos importar:pavlo@debian:~/firma()$ ls -ltotal 12-rw-r--r-- 1 pavlo pavlo 3244 dic 18 19:37 pablo_firmada.asc-rw-r--r-- 1 pavlo pavlo 3663 dic 18 18:42 pmh19.asc-rw-r--r-- 1 pavlo pavlo 3069 dic 18 17:44 pmh.ascComo vemos hay 3 ficheros, pertenecientes a cada uno de los compañeros que han colaborado conmigo en este anillo de confianza, por lo que ahora tendremos que importarlas:pavlo@debian:~/firma()$ gpg --import pablo_firmada.asc gpg: clave ED45D8BE85D4DB1A: \"Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;\" 1 firma nuevagpg: Cantidad total procesada: 1gpg:         nuevas firmas: 1gpg: marginals needed: 3  completes needed: 1  trust model: pgpgpg: nivel: 0  validez:   1  firmada:   3  confianza: 0-, 0q, 0n, 0m, 0f, 1ugpg: nivel: 1  validez:   3  firmada:   0  confianza: 3-, 0q, 0n, 0m, 0f, 0ugpg: siguiente comprobación de base de datos de confianza el: 2025-12-18Ahora, verificamos que mis compañeros hayan firmado mi clave:pavlo@debian:~/firma()$ gpg --list-sig \"Pablo Martín Hidalgo\"pub   rsa3072 2024-12-13 [SC] [caduca: 2026-12-13]      C2E235639EB3A2A420828C9DED45D8BE85D4DB1Auid        [  absoluta ] Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sig 3        ED45D8BE85D4DB1A 2024-12-13  Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sig          1B80812C7BB9EA86 2024-12-18  Andrés Morales González &lt;asirandyglez@gmail.com&gt;sig          9E7BEEE532BE0469 2024-12-18  Alejandro Liáñez Frutos &lt;alejandroliafru@gmail.com&gt;sig          F78DAA71DB72B640 2024-12-18  jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;sub   rsa3072 2024-12-13 [E] [caduca: 2026-12-13]sig          ED45D8BE85D4DB1A 2024-12-13  Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;Y como vemos a continuación:pavlo@debian:~()$ gpg --list-keysgpg: comprobando base de datos de confianzagpg: marginals needed: 3  completes needed: 1  trust model: pgpgpg: nivel: 0  validez:   1  firmada:   3  confianza: 0-, 0q, 0n, 0m, 0f, 1ugpg: nivel: 1  validez:   3  firmada:   0  confianza: 3-, 0q, 0n, 0m, 0f, 0ugpg: siguiente comprobación de base de datos de confianza el: 2025-12-18/home/pavlo/.gnupg/pubring.kbx------------------------------pub   rsa3072 2024-12-13 [SC] [caduca: 2026-12-13]      C2E235639EB3A2A420828C9DED45D8BE85D4DB1Auid        [  absoluta ] Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sub   rsa3072 2024-12-13 [E] [caduca: 2026-12-13]pub   rsa3072 2024-12-12 [SC] [caduca: 2026-12-12]      B39722468D0599C3B62F9AEA9E7BEEE532BE0469uid        [   total   ] Alejandro Liáñez Frutos &lt;alejandroliafru@gmail.com&gt;sub   rsa3072 2024-12-12 [E] [caduca: 2026-12-12]pub   rsa3072 2024-12-16 [SC] [caduca: 2026-12-16]      B7E822D8FB45BD8BAF2F31561B80812C7BB9EA86uid        [   total   ] Andrés Morales González &lt;asirandyglez@gmail.com&gt;sub   rsa3072 2024-12-16 [E] [caduca: 2026-12-16]pub   rsa4096 2024-12-18 [SC] [caduca: 2025-12-18]      7E7ECEAC3D3DF6FDAF903497F78DAA71DB72B640uid        [   total   ] jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;sub   rsa4096 2024-12-18 [E] [caduca: 2025-12-18]Todas las claves han sido ya firmadas (es posible que nos haya pedido la frase de paso de nuestra clave privada a la hora de llevar a cabo el proceso de firmado), su validez ha cambiado de desconocida a total, por lo que en caso de querer encriptar con dichas claves públicas o comprobar firmas, no se nos mostrará el mensaje de advertencia.Podemos verificar que todas las claves se encuentran firmadas por todos, por lo que todos hemos validado las claves de todos.Comprueba que ya puedes verificar sin “problemas” una firma recibida por una persona en la que confías.Como podemos observar, el documento firmado anteriormente ya nos muestra el mensaje de que la firma es correcta:pavlo@debian:~()$ gpg --verify documento.txt.sig gpg: asumiendo que los datos firmados están en 'documento.txt'gpg: Firmado el mié 18 dic 2024 18:42:03 CETgpg:                usando RSA clave 7E7ECEAC3D3DF6FDAF903497F78DAA71DB72B640gpg: Firma correcta de \"jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;\" [total]Comprueba que puedes verificar con confianza una firma de una persona en las que no confías, pero sin embargo si confía otra persona en la que tu tienes confianza total.El primer paso es asignar un nivel de confianza absoluta a la clave de una persona (Andrés Morales González en este caso), bajo el supuesto de que verificará correctamente las claves de otros usuarios. Esto se realiza con los comandos:pavlo@debian:~/firma()$ gpg --edit-key \"Andrés Morales González\"gpg (GnuPG) 2.2.40; Copyright (C) 2022 g10 Code GmbHThis is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.pub  rsa3072/1B80812C7BB9EA86     creado: 2024-12-16  caduca: 2026-12-16  uso: SC       confianza: desconocido   validez: totalsub  rsa3072/31278448B2A4EFCA     creado: 2024-12-16  caduca: 2026-12-16  uso: E   [   total   ] (1). Andrés Morales González &lt;asirandyglez@gmail.com&gt;gpg&gt; trustpub  rsa3072/1B80812C7BB9EA86     creado: 2024-12-16  caduca: 2026-12-16  uso: SC       confianza: desconocido   validez: totalsub  rsa3072/31278448B2A4EFCA     creado: 2024-12-16  caduca: 2026-12-16  uso: E   [   total   ] (1). Andrés Morales González &lt;asirandyglez@gmail.com&gt;Por favor, decida su nivel de confianza en que este usuarioverifique correctamente las claves de otros usuarios (mirandopasaportes, comprobando huellas dactilares en diferentes fuentes...)  1 = No lo sé o prefiero no decirlo  2 = NO tengo confianza  3 = Confío un poco  4 = Confío totalmente  5 = confío absolutamente  m = volver al menú principal¿Su decisión? 5¿De verdad quiere asignar absoluta confianza a esta clave? (s/N) spub  rsa3072/1B80812C7BB9EA86     creado: 2024-12-16  caduca: 2026-12-16  uso: SC       confianza: absoluta      validez: totalsub  rsa3072/31278448B2A4EFCA     creado: 2024-12-16  caduca: 2026-12-16  uso: E   [   total   ] (1). Andrés Morales González &lt;asirandyglez@gmail.com&gt;Ten en cuenta que la validez de clave mostrada no es necesariamentecorrecta a menos de que reinicies el programa.gpg&gt; quitSeleccionamos el nivel 5 (confianza absoluta) y confirmamos la acción. Esto marca la clave como confiable para firmar otras claves, lo que permite delegar la validación.Luego, importamos la clave pública del firmante final, en este caso Juan Antonio Pineda Amador, utilizando su identificador:pavlo@debian:~/firma()$ gpg --keyserver keyserver.ubuntu.com --recv-keys d30d0b7e734fcf74gpg: clave D30D0B7E734FCF74: clave pública \"Juan Antonio Pineda Amador &lt;juanantpiama@gmail.com&gt;\" importadagpg: Cantidad total procesada: 1gpg:               importadas: 1Esto descarga e importa la clave pública al anillo de claves.Luego, importamos una versión de la clave firmada por alguien en quien confío (como Andrés Morales González):pavlo@debian:~/firma()$ gpg --import clave-firmada-pablo.asc gpg: clave ED45D8BE85D4DB1A: \"Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;\" 1 firma nuevagpg: Cantidad total procesada: 1gpg:         nuevas firmas: 1gpg: marginals needed: 3  completes needed: 1  trust model: pgpgpg: nivel: 0  validez:   2  firmada:   2  confianza: 0-, 0q, 0n, 0m, 0f, 2ugpg: nivel: 1  validez:   2  firmada:   0  confianza: 2-, 0q, 0n, 0m, 0f, 0ugpg: siguiente comprobación de base de datos de confianza el: 2025-12-18Por último damos nuestra confianza absoluta en Juan Antonio Pineda:pavlo@debian:~/firma()$ gpg --edit-key \"Juan Antonio Pineda Amador\"gpg (GnuPG) 2.2.40; Copyright (C) 2022 g10 Code GmbHThis is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.pub  rsa3072/D30D0B7E734FCF74     creado: 2024-12-13  caduca: 2026-12-13  uso: SC       confianza: desconocido   validez: desconocidosub  rsa3072/BC028BCC730037FF     creado: 2024-12-13  caduca: 2026-12-13  uso: E   [desconocida] (1). Juan Antonio Pineda Amador &lt;juanantpiama@gmail.com&gt;gpg&gt; trustpub  rsa3072/D30D0B7E734FCF74     creado: 2024-12-13  caduca: 2026-12-13  uso: SC       confianza: desconocido   validez: desconocidosub  rsa3072/BC028BCC730037FF     creado: 2024-12-13  caduca: 2026-12-13  uso: E   [desconocida] (1). Juan Antonio Pineda Amador &lt;juanantpiama@gmail.com&gt;Por favor, decida su nivel de confianza en que este usuarioverifique correctamente las claves de otros usuarios (mirandopasaportes, comprobando huellas dactilares en diferentes fuentes...)  1 = No lo sé o prefiero no decirlo  2 = NO tengo confianza  3 = Confío un poco  4 = Confío totalmente  5 = confío absolutamente  m = volver al menú principal¿Su decisión? 5¿De verdad quiere asignar absoluta confianza a esta clave? (s/N) spub  rsa3072/D30D0B7E734FCF74     creado: 2024-12-13  caduca: 2026-12-13  uso: SC       confianza: absoluta      validez: desconocidosub  rsa3072/BC028BCC730037FF     creado: 2024-12-13  caduca: 2026-12-13  uso: E   [desconocida] (1). Juan Antonio Pineda Amador &lt;juanantpiama@gmail.com&gt;Ten en cuenta que la validez de clave mostrada no es necesariamentecorrecta a menos de que reinicies el programa.gpg&gt; quitpavlo@debian:~/firma()$ gpg --list-siggpg: comprobando base de datos de confianzagpg: marginals needed: 3  completes needed: 1  trust model: pgpgpg: nivel: 0  validez:   3  firmada:   2  confianza: 0-, 0q, 0n, 0m, 0f, 3ugpg: nivel: 1  validez:   2  firmada:   0  confianza: 2-, 0q, 0n, 0m, 0f, 0ugpg: siguiente comprobación de base de datos de confianza el: 2025-12-18/home/pavlo/.gnupg/pubring.kbx------------------------------pub   rsa3072 2024-12-13 [SC] [caduca: 2026-12-13]      C2E235639EB3A2A420828C9DED45D8BE85D4DB1Auid        [  absoluta ] Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sig 3        ED45D8BE85D4DB1A 2024-12-13  Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sig          1B80812C7BB9EA86 2024-12-18  Andrés Morales González &lt;asirandyglez@gmail.com&gt;sig          9E7BEEE532BE0469 2024-12-18  Alejandro Liáñez Frutos &lt;alejandroliafru@gmail.com&gt;sig          F78DAA71DB72B640 2024-12-18  jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;sig          D30D0B7E734FCF74 2024-12-19  Juan Antonio Pineda Amador &lt;juanantpiama@gmail.com&gt;sub   rsa3072 2024-12-13 [E] [caduca: 2026-12-13]sig          ED45D8BE85D4DB1A 2024-12-13  Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;pub   rsa3072 2024-12-12 [SC] [caduca: 2026-12-12]      B39722468D0599C3B62F9AEA9E7BEEE532BE0469uid        [   total   ] Alejandro Liáñez Frutos &lt;alejandroliafru@gmail.com&gt;sig 3        9E7BEEE532BE0469 2024-12-12  Alejandro Liáñez Frutos &lt;alejandroliafru@gmail.com&gt;sig          1B80812C7BB9EA86 2024-12-17  Andrés Morales González &lt;asirandyglez@gmail.com&gt;sig          EB11F07AEE22B444 2024-12-18  [ID de usuario no encontrado]sig          ED45D8BE85D4DB1A 2024-12-18  Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sub   rsa3072 2024-12-12 [E] [caduca: 2026-12-12]sig          9E7BEEE532BE0469 2024-12-12  Alejandro Liáñez Frutos &lt;alejandroliafru@gmail.com&gt;pub   rsa3072 2024-12-16 [SC] [caduca: 2026-12-16]      B7E822D8FB45BD8BAF2F31561B80812C7BB9EA86uid        [  absoluta ] Andrés Morales González &lt;asirandyglez@gmail.com&gt;sig 3        1B80812C7BB9EA86 2024-12-16  Andrés Morales González &lt;asirandyglez@gmail.com&gt;sig          ED45D8BE85D4DB1A 2024-12-18  Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sub   rsa3072 2024-12-16 [E] [caduca: 2026-12-16]sig          1B80812C7BB9EA86 2024-12-16  Andrés Morales González &lt;asirandyglez@gmail.com&gt;pub   rsa4096 2024-12-18 [SC] [caduca: 2025-12-18]      7E7ECEAC3D3DF6FDAF903497F78DAA71DB72B640uid        [   total   ] jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;sig 3        F78DAA71DB72B640 2024-12-18  jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;sig          ED45D8BE85D4DB1A 2024-12-18  Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sub   rsa4096 2024-12-18 [E] [caduca: 2025-12-18]sig          F78DAA71DB72B640 2024-12-18  jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;pub   rsa3072 2023-02-22 [SC] [caduca: 2025-02-21]      D6E21A8B6ED6E8EF9F7CE81686F55C1E2DA53D65uid        [desconocida] Raúl Ruiz &lt;raulpruebas21@gmail.com&gt;sig 3        86F55C1E2DA53D65 2023-02-22  Raúl Ruiz &lt;raulpruebas21@gmail.com&gt;sub   rsa3072 2023-02-22 [E] [caduca: 2025-02-21]sig          86F55C1E2DA53D65 2023-02-22  Raúl Ruiz &lt;raulpruebas21@gmail.com&gt;pub   rsa3072 2024-12-13 [SC] [caduca: 2026-12-13]      97AAB306BAF9F7A0600C9F7CD30D0B7E734FCF74uid        [  absoluta ] Juan Antonio Pineda Amador &lt;juanantpiama@gmail.com&gt;sig 3        D30D0B7E734FCF74 2024-12-13  Juan Antonio Pineda Amador &lt;juanantpiama@gmail.com&gt;sub   rsa3072 2024-12-13 [E] [caduca: 2026-12-13]sig          D30D0B7E734FCF74 2024-12-13  Juan Antonio Pineda Amador &lt;juanantpiama@gmail.com&gt;Con ambas claves presentes (la del intermediario y la del firmante final), verificamos el archivo firmado y el archivo original para comprobar su autenticidad:pavlo@debian:~/firma()$ gpg --verify pinedadocumento.txt.sig pinedadocumento.txtgpg: Firmado el dom 15 dic 2024 18:36:36 CETgpg:                usando RSA clave 97AAB306BAF9F7A0600C9F7CD30D0B7E734FCF74gpg: Firma correcta de \"Juan Antonio Pineda Amador &lt;juanantpiama@gmail.com&gt;\" [absoluta]Y como vemos el sistema confirma la firma.Tarea 2: Correo seguro con evolution/thunderbirdAhora vamos a configurar nuestro cliente de correo electrónico para poder mandar correos cifrados, para ello:Configura el cliente de correo evolution con tu cuenta de correo habitualPara este apartado lo que haremos será instalar Thunderbird con el siguiente comando:pavlo@debian:~()$ sudo apt install thunderbird-l10n-es-esUna vez instalado ejecutamos Thunderbird y rellenamos los campos:Después de hacer la verificación en dos pasos ya nos dejará entrar sin ningún problema:Añade a la cuenta las opciones de seguridad para poder enviar correos firmados con tu clave privada o cifrar los mensajes para otros destinatariosPara este apartado debemos utilizar la clave privada, por lo que primero debemos listarla:pavlo@debian:~/firma()$ gpg --list-secret-keys/home/pavlo/.gnupg/pubring.kbx------------------------------sec   rsa3072 2024-12-13 [SC] [caduca: 2026-12-13]      C2E235639EB3A2A420828C9DED45D8BE85D4DB1Auid        [  absoluta ] Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;ssb   rsa3072 2024-12-13 [E] [caduca: 2026-12-13]Ahora, utilizando el ID de nuestra clave, debemos exportarla en un fichero para más tarde configurarlo en Thunderbird:pavlo@debian:~/firma()$ gpg --export-secret-keys --armor C2E235639EB3A2A420828C9DED45D8BE85D4DB1A &gt; clave-thunderbird.ascPosiblemente nos pida la frase de paso, la introducimos y ya debería generarse el fichero:pavlo@debian:~/firma()$ ls -l | grep 'clave'-rw-r--r-- 1 pavlo pavlo 7187 dic 19 11:57 clave-thunderbird.ascSeguidamente, debemos dirigirnos a la aplicación de correos e importar la clave que acabamos de crear. Para ello nos dirigimos a Ajustes » Configuración de la cuenta » Cifrado de extremo a extremo, le damos a añadir clave y seleccionamos la creada anteriormente:Y como vemos ya se ha importado correctamente la clave:Envía y recibe varios mensajes con tus compañeros y comprueba el funcionamiento adecuado de GPGPara esta prueba, le he mandado un correo a Andrés Morales (asirandyglez@gmail.com) con su clave pública la cual me ha pasado:pavlo@debian:~/firma()$ ls -ltotal 28-rw-r--r-- 1 pavlo pavlo 4256 dic 19 12:10 andy-and1.asc-rw-r--r-- 1 pavlo pavlo 7187 dic 19 11:57 clave-thunderbird.asc-rw-r--r-- 1 pavlo pavlo 3244 dic 18 19:37 pablo_firmada.asc-rw-r--r-- 1 pavlo pavlo 3663 dic 18 18:42 pmh19.asc-rw-r--r-- 1 pavlo pavlo 3069 dic 18 17:44 pmh.ascPor lo tanto, enviamos un mensaje y seleccionamos el fichero de su clave para que se firme el correo:Por otro lado, Andrés me enviará un correo firmado con mi clave pública:Y como podemos observar, desde gmail no nos dejará ver el contenido:Enviar un correo electrónico al profesor con un mensaje firmado por vosotros y que solo pueda descifrar yo.Para la realización de este apartado extra debemos importar la clave del profesor Raúl en nuestro sistema. Para ello nos dirigimos a la página wiki y nos descargamos su clave:pavlo@debian:~/firma()$ gpg --keyserver keyserver.ubuntu.com --recv-keys 86f55c1e2da53d65gpg: clave 86F55C1E2DA53D65: clave pública \"Raúl Ruiz &lt;raulpruebas21@gmail.com&gt;\" importadagpg: Cantidad total procesada: 1gpg:               importadas: 1Como podemos observar, su clave se ha importado correctamente:pavlo@debian:~/firma()$ gpg --list-keys /home/pavlo/.gnupg/pubring.kbx------------------------------pub   rsa3072 2024-12-13 [SC] [caduca: 2026-12-13]      C2E235639EB3A2A420828C9DED45D8BE85D4DB1Auid        [  absoluta ] Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sub   rsa3072 2024-12-13 [E] [caduca: 2026-12-13]pub   rsa3072 2024-12-12 [SC] [caduca: 2026-12-12]      B39722468D0599C3B62F9AEA9E7BEEE532BE0469uid        [   total   ] Alejandro Liáñez Frutos &lt;alejandroliafru@gmail.com&gt;sub   rsa3072 2024-12-12 [E] [caduca: 2026-12-12]pub   rsa3072 2024-12-16 [SC] [caduca: 2026-12-16]      B7E822D8FB45BD8BAF2F31561B80812C7BB9EA86uid        [   total   ] Andrés Morales González &lt;asirandyglez@gmail.com&gt;sub   rsa3072 2024-12-16 [E] [caduca: 2026-12-16]pub   rsa4096 2024-12-18 [SC] [caduca: 2025-12-18]      7E7ECEAC3D3DF6FDAF903497F78DAA71DB72B640uid        [   total   ] jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;sub   rsa4096 2024-12-18 [E] [caduca: 2025-12-18]pub   rsa3072 2023-02-22 [SC] [caduca: 2025-02-21]      D6E21A8B6ED6E8EF9F7CE81686F55C1E2DA53D65uid        [desconocida] Raúl Ruiz &lt;raulpruebas21@gmail.com&gt;sub   rsa3072 2023-02-22 [E] [caduca: 2025-02-21]Por lo que ahora debemos hacer lo mismo que antes, exportar la clave en un fichero .asc y añadirla en Thunderbird:pavlo@debian:~/firma()$ gpg --export --armor 86f55c1e2da53d65 &gt; clave-raul.ascVamos a enviar un nuevo correo a Raúl a su correo y debemos darle arriba a la izquierda a “Cifrar”. Una vez seleccionado esta opción nos saldrá un mensaje abajo en amarillo, en donde debemos darle a “Resolver”. Ahí importamos la clave de Raúl y ya estaría:Y como podemos comprobar a continuación, el correo ha sido enviado con OpenGPG:Tarea 3: Integridad de ficherosVamos a descargarnos la ISO de debian, y posteriormente vamos a comprobar su integridad.Puedes encontrar la ISO en la dirección: https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/.Para validar el contenido de la imagen CD, solo asegúrese de usar la herramienta apropiada para sumas de verificación. Para cada versión publicada existen archivos de suma de comprobación con algoritmos fuertes (SHA256 y SHA512); debería usar las herramientas sha256sum o sha512sum para trabajar con ellosPues lo primero que debemos hacer es descargar la ISO de Debian 12 y el fichero de suma de comprobación(SHA512):pavlo@debian:~/integridad()$ wget https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-12.8.0-amd64-netinst.isopavlo@debian:~/integridad()$ wget https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/SHA512SUMSUtilizamos la herramienta sha512sum para generar el hash de la imagen ISO descargada y comparar el resultado con el hash proporcionado en los archivos de suma de comprobación.pavlo@debian:~/integridad()$ ls -ltotal 646148-rw-r--r-- 1 pavlo pavlo 661651456 nov  9 13:46 debian-12.8.0-amd64-netinst.iso-rw-r--r-- 1 pavlo pavlo       494 nov  9 17:34 SHA512SUMSpavlo@debian:~/integridad()$ sha512sum --check --ignore-missing SHA512SUMSdebian-12.8.0-amd64-netinst.iso: La suma coincideY como vemos el contenido de la imagen CD coincide.Verifica que el contenido del hash que has utilizado no ha sido manipulado, usando la firma digital que encontrarás en el repositorio. Puedes encontrar una guía para realizarlo en este artículo: How to verify an authenticity of downloaded Debian ISO imagesEste paso verifica que el archivo de suma de comprobación no ha sido manipulado y que está firmado por una clave confiable. Por lo que debemos descargarnos la firma digital:pavlo@debian:~/integridad()$ wget https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/SHA512SUMS.signVerificamos la firma y como vemos a continuación nos saldrá un mensaje de error de que es imposible comprobar la firma:pavlo@debian:~/integridad()$ gpg --verify SHA512SUMS.sign SHA512SUMSgpg: Firmado el sáb 09 nov 2024 17:35:02 CETgpg:                usando RSA clave DF9B9C49EAA9298432589D76DA87E80D6294BE9Bgpg: Imposible comprobar la firma: No hay clave públicaEsto se debe a que no tenemos importada la clave pública de la persona que firmó dicho fichero, por lo que para solucionar esto debemos importar la clave:pavlo@debian:~/integridad()$ gpg --keyserver keyserver.ubuntu.com --recv-keys DF9B9C49EAA9298432589D76DA87E80D6294BE9Bgpg: clave DA87E80D6294BE9B: clave pública \"Debian CD signing key &lt;debian-cd@lists.debian.org&gt;\" importadagpg: Cantidad total procesada: 1gpg:               importadas: 1Volvemos a verificar la firma:pavlo@debian:~/integridad()$ gpg --verify SHA512SUMS.sign SHA512SUMSgpg: Firmado el sáb 09 nov 2024 17:35:02 CETgpg:                usando RSA clave DF9B9C49EAA9298432589D76DA87E80D6294BE9Bgpg: Firma correcta de \"Debian CD signing key &lt;debian-cd@lists.debian.org&gt;\" [desconocido]gpg: ATENCIÓN: ¡Esta clave no está certificada por una firma de confianza!gpg:          No hay indicios de que la firma pertenezca al propietario.Huellas dactilares de la clave primaria: DF9B 9C49 EAA9 2984 3258  9D76 DA87 E80D 6294 BE9BY efectivamente, el hash del fichero resumen coincide con el hash del fichero resumen que Debian ha firmado, por lo que podemos concluir que no ha habido ninguna manipulación y las imágenes ISO están totalmente limpias.Al no tener validada la clave de Debian nos ha mostrado la advertencia de seguridad, pero eso no tiene nada que ver, pues la firma ha sido correctamente verificada.Tarea 4: Integridad y autenticidad (apt secure)APT Secure es el mecanismo utilizado por Debian para garantizar que los paquetes instalados desde sus repositorios oficiales sean legítimos y no hayan sido modificados. Este sistema utiliza criptografía asimétrica para verificar la autenticidad de los paquetes.¿Qué software utiliza apt secure para realizar la criptografía asimétrica?APT Secure utiliza GNU Privacy Guard (GPG) para realizar la criptografía asimétrica, firmando digitalmente los paquetes y verificando las firmas de los mismos.¿Para que sirve el comando apt-key? ¿Qué muestra el comando apt-key list?El comando apt-key es una herramienta que permite gestionar las claves utilizadas por APT para autenticar paquetes, considerando como confiables aquellos paquetes que han sido correctamente autenticados mediante estas claves. Las opciones más comunes son:      add: Añade una nueva clave a la lista de claves de confianza desde un archivo que se pasa como parámetro.        del: Elimina una clave de la lista de claves de confianza, especificando el fingerprint de la clave como parámetro.        export: Muestra la clave a través de la salida estándar, indicando el fingerprint de la misma como parámetro.        exportall: Muestra todas las claves de confianza por la salida estándar.        list: Muestra todas las claves de confianza.        finger: Muestra los fingerprints de todas las claves de confianza.  Por ejemplo, una salida del comando sería:pavlo@debian:~()$ apt-key listWarning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8))./etc/apt/trusted.gpg--------------------pub   rsa4096 2017-02-22 [SCEA]      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88uid        [desconocida] Docker Release (CE deb) &lt;docker@docker.com&gt;sub   rsa4096 2017-02-22 [S]pub   dsa1024 2004-09-12 [SC]      6302 39CC 130E 1A7F D81A  27B1 4097 6EAF 437D 05B5uid        [desconocida] Ubuntu Archive Automatic Signing Key &lt;ftpmaster@ubuntu.com&gt;sub   elg2048 2004-09-12 [E]pub   rsa4096 2024-05-03 [SC]      3648 37CF 91E0 7091 0231  C2FE 8219 B3A0 AEF3 D498uid        [desconocida] Launchpad PPA for elementary OS teampub   rsa1024 2011-10-01 [SC]      6C87 69CE DC20 F5E6 6C3B  7D37 BF36 996C 4E1F 8A59uid        [desconocida] Launchpad PPA for elementary OS team/etc/apt/trusted.gpg.d/debian-archive-bookworm-automatic.asc------------------------------------------------------------pub   rsa4096 2023-01-21 [SC] [caduca: 2031-01-19]      B8B8 0B5B 623E AB6A D877  5C45 B7C5 D7D6 3509 47F8uid        [desconocida] Debian Archive Automatic Signing Key (12/bookworm) &lt;ftpmaster@debian.org&gt;sub   rsa4096 2023-01-21 [S] [caduca: 2031-01-19]/etc/apt/trusted.gpg.d/debian-archive-bookworm-security-automatic.asc---------------------------------------------------------------------pub   rsa4096 2023-01-21 [SC] [caduca: 2031-01-19]      05AB 9034 0C0C 5E79 7F44  A8C8 254C F3B5 AEC0 A8F0uid        [desconocida] Debian Security Archive Automatic Signing Key (12/bookworm) &lt;ftpmaster@debian.org&gt;sub   rsa4096 2023-01-21 [S] [caduca: 2031-01-19]/etc/apt/trusted.gpg.d/debian-archive-bookworm-stable.asc---------------------------------------------------------pub   ed25519 2023-01-23 [SC] [caduca: 2031-01-21]      4D64 FEC1 19C2 0290 67D6  E791 F8D2 585B 8783 D481uid        [desconocida] Debian Stable Release Key (12/bookworm) &lt;debian-release@lists.debian.org&gt;/etc/apt/trusted.gpg.d/debian-archive-bullseye-automatic.asc------------------------------------------------------------pub   rsa4096 2021-01-17 [SC] [caduca: 2029-01-15]      1F89 983E 0081 FDE0 18F3  CC96 73A4 F27B 8DD4 7936uid        [desconocida] Debian Archive Automatic Signing Key (11/bullseye) &lt;ftpmaster@debian.org&gt;sub   rsa4096 2021-01-17 [S] [caduca: 2029-01-15]/etc/apt/trusted.gpg.d/debian-archive-bullseye-security-automatic.asc---------------------------------------------------------------------pub   rsa4096 2021-01-17 [SC] [caduca: 2029-01-15]      AC53 0D52 0F2F 3269 F5E9  8313 A484 4904 4AAD 5C5Duid        [desconocida] Debian Security Archive Automatic Signing Key (11/bullseye) &lt;ftpmaster@debian.org&gt;sub   rsa4096 2021-01-17 [S] [caduca: 2029-01-15]/etc/apt/trusted.gpg.d/debian-archive-bullseye-stable.asc---------------------------------------------------------pub   rsa4096 2021-02-13 [SC] [caduca: 2029-02-11]      A428 5295 FC7B 1A81 6000  62A9 605C 66F0 0D6C 9793uid        [desconocida] Debian Stable Release Key (11/bullseye) &lt;debian-release@lists.debian.org&gt;/etc/apt/trusted.gpg.d/debian-archive-buster-automatic.asc----------------------------------------------------------pub   rsa4096 2019-04-14 [SC] [caduca: 2027-04-12]      80D1 5823 B7FD 1561 F9F7  BCDD DC30 D7C2 3CBB ABEEuid        [desconocida] Debian Archive Automatic Signing Key (10/buster) &lt;ftpmaster@debian.org&gt;sub   rsa4096 2019-04-14 [S] [caduca: 2027-04-12]/etc/apt/trusted.gpg.d/debian-archive-buster-security-automatic.asc-------------------------------------------------------------------pub   rsa4096 2019-04-14 [SC] [caduca: 2027-04-12]      5E61 B217 265D A980 7A23  C5FF 4DFA B270 CAA9 6DFAuid        [desconocida] Debian Security Archive Automatic Signing Key (10/buster) &lt;ftpmaster@debian.org&gt;sub   rsa4096 2019-04-14 [S] [caduca: 2027-04-12]/etc/apt/trusted.gpg.d/debian-archive-buster-stable.asc-------------------------------------------------------pub   rsa4096 2019-02-05 [SC] [caduca: 2027-02-03]      6D33 866E DD8F FA41 C014  3AED DCC9 EFBF 77E1 1517uid        [desconocida] Debian Stable Release Key (10/buster) &lt;debian-release@lists.debian.org&gt;/etc/apt/trusted.gpg.d/deb-multimedia-keyring.gpg-------------------------------------------------pub   rsa4096 2014-03-05 [SC]      A401 FF99 368F A1F9 8152  DE75 5C80 8C2B 6555 8117uid        [desconocida] Christian Marillat &lt;marillat@debian.org&gt;uid        [desconocida] Christian Marillat &lt;marillat@free.fr&gt;uid        [desconocida] Christian Marillat &lt;marillat@deb-multimedia.org&gt;sub   rsa4096 2014-03-05 [E]/etc/apt/trusted.gpg.d/google-chrome.gpg----------------------------------------pub   rsa4096 2016-04-12 [SC]      EB4C 1BFD 4F04 2F6D DDCC  EC91 7721 F63B D38B 4796uid        [desconocida] Google Inc. (Linux Packages Signing Authority) &lt;linux-packages-keymaster@google.com&gt;sub   rsa4096 2023-02-15 [S] [caduca: 2026-02-14]sub   rsa4096 2024-01-30 [S] [caduca: 2027-01-29]/etc/apt/trusted.gpg.d/microsoft.gpg------------------------------------pub   rsa2048 2015-10-28 [SC]      BC52 8686 B50D 79E3 39D3  721C EB3E 94AD BE12 29CFuid        [desconocida] Microsoft (Release signing) &lt;gpgsecurity@microsoft.com&gt;¿En que fichero se guarda el anillo de claves que guarda la herramienta apt-key?El anillo de claves utilizado por apt-key se guarda en el fichero /etc/apt/trusted.gpg y en cualquier archivo .gpg dentro de /etc/apt/trusted.gpg.d/.¿Qué contiene el archivo Release de un repositorio de paquetes?. ¿Y el archivo Release.gpg?. Puedes ver estos archivos en el repositorio http://ftp.debian.org/debian/dists/Debian10.1/. Estos archivos se descargan cuando hacemos un apt update.El archivo Release contiene información sobre el repositorio, como la versión del sistema operativo, la arquitectura, la lista de componentes (main, contrib, non-free) y otra información relevante. También incluye firmas digitales (hashes criptográficos) para cada archivo de paquete (por ejemplo, Packages y Packages.gz) dentro del repositorio. Estos hashes se utilizan para verificar la integridad de los archivos descargados.El archivo Release.gpg contiene la firma digital asociada con el archivo Release. Esta firma es generada por la entidad que mantiene el repositorio y se utiliza para verificar la autenticidad del archivo Release. Esta firma digital se verifica durante el proceso de apt update, asegurando que el archivo Release no haya sido modificado y que realmente provenga del repositorio oficial.Explica el proceso por el cual el sistema nos asegura que los ficheros que estamos descargando son legítimos.Este proceso implica el uso de criptografía asimétrica y firmas digitales:      Descarga del archivo “Release” y su firma (“Release.gpg”): cuando ejecutamos apt update, el sistema descarga el archivo Release y su firma asociada Release.gpg desde el repositorio Debian o el mirror especificado.        Verificación de la firma digital: el archivo Release.gpg contiene la firma digital generada por la clave privada de la entidad que mantiene el repositorio. Utilizando la clave pública correspondiente a esa clave privada (que generalmente ya está instalada en el sistema), se verifica la autenticidad de la firma digital. Si la verificación falla, el proceso se detendrá, ya que indica que el archivo Release puede haber sido modificado.        Verificación de la integridad del archivo “Release”: si la firma digital es válida, se procede a verificar la integridad del archivo Release. El archivo Release contiene hashes criptográficos (generalmente SHA256) de otros archivos importantes en el repositorio, como Packages y Packages.gz. Se recalcula el hash localmente y se compara con los hashes proporcionados en el archivo Release. Si hay alguna discrepancia, se asume que los archivos pueden haber sido modificados y el proceso se detiene.        Descarga de archivos de índice de paquetes (por ejemplo, Packages o Packages.gz): si la verificación de firma y la integridad del archivo Release son exitosas, el sistema procede a descargar los archivos de índice de paquetes mencionados en el archivo Release.        Verificación de la integridad de los archivos de paquetes: similar al paso anterior, se verifica la integridad de los archivos de paquetes utilizando los hashes proporcionados en los archivos de índice de paquetes.  Añade de forma correcta el repositorio de virtualbox añadiendo la clave pública de virtualbox como se indica en la documentación.En primer lugar añadimos el repositorio con los siguientes comando:pavlo@debian:~()$ sudo echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/oracle-virtualbox-2016.gpg] https://download.virtualbox.org/virtualbox/debian bookworm contrib\" | sudo tee /etc/apt/sources.list.d/virtualbox.listY ahora descargamos e importamos la clave pública de Oracle con el siguiente comando:pavlo@debian:~()$ wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo gpg --dearmor -o /usr/share/keyrings/oracle-virtualbox-2016.gpgHacemos un apt update y ya encontramos el repositorio listo para descargar Virtualbox:pavlo@debian:~()$ sudo apt updateObj:2 https://deb.nodesource.com/node_20.x nodistro InRelease                                                                                                               Obj:4 https://dl.google.com/linux/chrome/deb stable InRelease                                                                                                               Ign:3 https://ppa.launchpad.net/elementary-os/stable/ubuntu focal InRelease                                                                                                 Obj:1 https://deb-multimedia.org bookworm InRelease                                                                                                                         Des:8 https://packages.microsoft.com/repos/code stable InRelease [3.590 B]                                                                                        Obj:5 https://deb.debian.org/debian bookworm InRelease                                                                             Obj:6 https://security.debian.org/debian-security bookworm-security InRelease   Des:9 https://download.virtualbox.org/virtualbox/debian bookworm InRelease [4.434 B]Obj:7 https://deb.debian.org/debian bookworm-updates InRelease                           Des:10 https://packages.microsoft.com/repos/code stable/main armhf Packages [18,3 kB]Des:11 https://packages.microsoft.com/repos/code stable/main arm64 Packages [18,2 kB]Des:12 https://packages.microsoft.com/repos/code stable/main amd64 Packages [18,2 kB]Ign:3 https://ppa.launchpad.net/elementary-os/stable/ubuntu focal InReleaseDes:13 https://download.virtualbox.org/virtualbox/debian bookworm/contrib amd64 Packages [1.947 B]Des:14 https://download.virtualbox.org/virtualbox/debian bookworm/contrib amd64 Contents (deb) [4.375 B]Tarea 5: Autentificación: ejemplo SSHExplica los pasos que se producen entre el cliente y el servidor para que el protocolo cifre la información que se transmite? ¿Para qué se utiliza la criptografía simétrica? ¿Y la asimétrica?El protocolo SSH utiliza tanto criptografía simétrica como asimétrica para garantizar la seguridad en la comunicación entre el cliente y el servidor. Estos son los pasos que se producen:      El cliente inicia la conexión al servidor SSH enviando una solicitud de conexión. Intercambio de identificación y parámetros:        El servidor y el cliente intercambian información sobre sus capacidades y parámetros de configuración.        Negociación de algoritmos: se realiza una negociación para seleccionar los algoritmos que se utilizarán en la conexión, incluyendo algoritmos para cifrado simétrico, funciones hash, intercambio de claves, etc.        Intercambio de claves de sesión (cripografía asimétrica): el cliente y el servidor acuerdan sobre una clave de sesión utilizando criptografía asimétrica. Usualmente, el algoritmo de intercambio de claves utilizado es Diffie-Hellman.        Autenticación: en esta fase, se puede realizar la autenticación de las partes. Esto puede involucrar la presentación de credenciales por parte del cliente (como contraseñas o certificados).        Generación de la clave de sesión compartida (criptografía simétrica): a partir de la información intercambiada en el paso anterior, ambas partes generan de manera independiente una clave de sesión compartida. Esta clave de sesión será utilizada para cifrar y descifrar los datos durante la sesión.        Cifrado de la sesión (criptografía simétrica): a partir de este punto, la conexión SSH utiliza la criptografía simétrica para cifrar los datos durante la transmisión. La clave de sesión compartida se utiliza para este propósito, proporcionando eficiencia y velocidad en el cifrado.        Intercambio de mensajes cifrados: Todos los mensajes intercambiados entre el cliente y el servidor, incluyendo comandos, respuestas y otros datos, se cifran utilizando la clave de sesión compartida.  La criptografía simétrica se utiliza para cifrar los datos durante la transmisión debido a su eficiencia. Es más rápida que la criptografía asimétrica, por lo que es ideal para cifrar grandes cantidades de datos. Sin embargo, la criptografía asimétrica se utiliza en la fase de intercambio de claves para asegurar que las claves de sesión compartida se generen de forma segura y sin necesidad de intercambiar claves directamente, lo que sería menos seguro. La combinación de ambos tipos de criptografía en SSH aprovecha las fortalezas de cada uno para proporcionar un entorno de comunicación seguro y eficiente.Explica los dos métodos principales de autentificación: por contraseña y utilizando un par de claves públicas y privadas.      Autenticación por contraseña: el usuario inicia una conexión SSH proporcionando un nombre de usuario y contraseña, y son enviados al servidor. El servidor compara la contraseña ingresada con la almacenada para el usuario. Este método es sencillo aunque la seguridad depende de la complejidad y robustez de la contraseña, y puede ser vulnerable a ataques de fuerza bruta o de suplantación de identidad si estas son débiles.        Autenticación por par de claves: el usuario genera un par de claves. La clave pública se inyecta en el servidor SSH y se asocia con el nombre de usuario correspondiente. Al iniciarse la conexión SSH, el cliente debe hacerlo con su clave privada para demostrar la identidad. El servidor utiliza la clave pública asociada al usuario para verificar la autenticidad de la clave privada del cliente. Este método proporciona un alto nivel de seguridad, superior al método de autenticación por contraseña (por ejemplo es resistente a los ataques por fuerza bruta). Además también permite el acceso a un servidor sin necesidad de ingresar una contraseña cada vez que se establece la conexión.  En el cliente, ¿para que sirve el contenido que se guarda en el fichero ~/.ssh/know_hosts?Este archivo almacena los fingerprints de las claves públicas de los hosts remotos a los que el cliente se ha conectado anteriormente. Cuando el cliente se va a conectar a un host remoto, la clave pública de ese host se almacena en este archivo. Una vez almacenada en el cliente, en la próxima conexión se vuelve a calcular el fingerprint del host remoto y se compara con el que ya estaba almacenado de anteriores conexiones. Si la huella digital coincide con una entrada existente, se considera que el host es auténtico y la conexión procede sin problemas. Si la huella digital no coincide, el cliente emite una advertencia de posible ataque de “man-in-the-middle” (intermediario malicioso) porque la clave pública del host remoto ha cambiado.¿Qué significa este mensaje que aparece la primera vez que nos conectamos a un servidor?$ ssh debian@172.22.200.74 The authenticity of host '172.22.200.74 (172.22.200.74)' can't be established. ECDSA key fingerprint is SHA256:7ZoNZPCbQTnDso1meVSNoKszn38ZwUI4i6saebbfL4M. Are you sure you want to continue connecting (yes/no)? En este escenario, el usuario tiene la opción de continuar o no con la conexión, dependiendo de cuánto confíe en el servidor. Si decide aceptar, la clave del servidor se guardará en el archivo situado en ~/.ssh/known_hosts. Esto asegura que, en futuras conexiones, no se le pedirá nuevamente al cliente que confirme, ya que el sistema verificará si la clave ya está registrada en dicho archivo.En ocasiones cuando estamos trabajando en el cloud, y reutilizamos una ip flotante nos aparece este mensaje:$ ssh debian@172.22.200.74 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the ECDSA key sent by the remote host is SHA256:W05RrybmcnJxD3fbwJOgSNNWATkVftsQl7EzfeKJgNc. Please contact your system administrator. Add correct host key in /home/jose/.ssh/known_hosts to get rid of this message. Offending ECDSA key in /home/jose/.ssh/known_hosts:103   remove with:   ssh-keygen -f \"/home/jose/.ssh/known_hosts\" -R \"172.22.200.74\" ECDSA host key for 172.22.200.74 has changed and you have requested strict checking.Esto significa que nos estamos conectando a un host remoto que previamente teníamos su fingerprint almacenada en este archivo, pero al comparar la actual del host remoto con la que teníamos almacenada estas no coinciden, por lo que nos manda la alerta.¿Qué guardamos y para qué sirve el fichero en el servidor ~/.ssh/authorized_keys?En este archivo es donde se almacenan las claves públicas de los clientes remotos que desean acceder al servidor. Al realizarse la conexión a un usuario, la clave pública del cliente debe estar presente en el archivo authorized_keys del usuario para que tenga permisos de acceso a esa sesión. La seguridad de este archivo es importante, y sus permisos típicos son 600: de lectura y escritura solo para el propietario."
  },
  
  {
    "title": "Cifrado asimétrico con gpg y openssl",
    "url": "/posts/gpg-openssl/",
    "categories": "Seguridad, Criptografía",
    "tags": "Criptografía",
    "date": "2024-12-12 21:15:00 +0100",
    





    
    "snippet": "Tarea 1: Generación de claves (gpg)1. Genera un par de claves (pública y privada). ¿En que directorio se guarda las claves de un usuario?Para generar el par de claves haremos uso de la opción --gen...",
    "content": "Tarea 1: Generación de claves (gpg)1. Genera un par de claves (pública y privada). ¿En que directorio se guarda las claves de un usuario?Para generar el par de claves haremos uso de la opción --gen-key de gpg:pavlo@debian:~()$ gpg --gen-keygpg (GnuPG) 2.2.40; Copyright (C) 2022 g10 Code GmbHThis is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Nota: Usa \"gpg --full-generate-key\" para el diálogo completo de generación de clave.GnuPG debe construir un ID de usuario para identificar su clave.Nombre y apellidos:Primero, se nos solicitará que ingresemos nuestro nombre completo, incluyendo los apellidos, con el objetivo de diferenciar nuestra clave de las demás. Escribiremos esta información y procederemos al siguiente paso.Nombre y apellidos: Pablo Martín HidalgoDirección de correo electrónico: pmartinhidalgo19@gmail.comA continuación, será necesario proporcionar nuestra dirección de correo electrónico. La ingresaremos y continuaremos con el proceso.Está usando el juego de caracteres 'utf-8'.Ha seleccionado este ID de usuario:    \"Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;\"¿Cambia (N)ombre, (D)irección o (V)ale/(S)alir?Cuando hayamos completado estos datos, se nos mostrará un resumen para confirmarlos. Si todo es correcto, seleccionaremos la opción “V” para confirmar.¿Cambia (N)ombre, (D)irección o (V)ale/(S)alir? VEs necesario generar muchos bytes aleatorios. Es una buena idea realizaralguna otra tarea (trabajar en otra ventana/consola, mover el ratón, usarla red y los discos) durante la generación de números primos. Esto da algenerador de números aleatorios mayor oportunidad de recoger suficienteentropía.En este momento, se nos pedirá que configuremos una frase de paso que protegerá nuestra clave privada. Será necesario ingresarla dos veces para confirmar y, una vez hecho esto, se iniciará el proceso de generación del par de claves. Como se indica en el mensaje mostrado, es recomendable realizar alguna actividad en nuestro equipo durante este proceso para ayudar a generar entropía.gpg: creado el directorio '/home/pavlo/.gnupg/openpgp-revocs.d'gpg: certificado de revocación guardado como '/home/pavlo/.gnupg/openpgp-revocs.d/9D0AB661A8C5977C20924020130D7BAF24114BE7.rev'claves pública y secreta creadas y firmadas.pub   rsa3072 2024-12-12 [SC] [caduca: 2026-12-12]      9D0AB661A8C5977C20924020130D7BAF24114BE7uid                      Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sub   rsa3072 2024-12-12 [E] [caduca: 2026-12-12]Una vez completada la generación, nuestro par de claves estará creado y añadido con total confianza a nuestro keyring pubring.kbx, que se encuentra ubicado en el directorio personal dentro de la carpeta .gnupg/. Además, de manera automática se habrá generado un certificado de revocación en .gnupg/openpgp-revocs.d/. Este certificado será útil en caso de que nuestra clave privada sea comprometida o si decidimos dejar de usar este par de claves, permitiendo informar a otros usuarios que la clave pública asociada no debe ser utilizada más para cifrar.2. Lista las claves públicas que tienes en tu almacén de claves. Explica los distintos datos que nos muestra. ¿Cómo deberías haber generado las claves para indicar, por ejemplo, que tenga un 1 mes de validez?Para listar las claves públicas haremos uso de la opción --list-keys de gpg:pavlo@debian:~()$ gpg --list-keysgpg: comprobando base de datos de confianzagpg: marginals needed: 3  completes needed: 1  trust model: pgpgpg: nivel: 0  validez:   1  firmada:   0  confianza: 0-, 0q, 0n, 0m, 0f, 1ugpg: siguiente comprobación de base de datos de confianza el: 2026-12-12/home/pavlo/.gnupg/pubring.kbx------------------------------pub   rsa3072 2024-12-12 [SC] [caduca: 2026-12-12]      9D0AB661A8C5977C20924020130D7BAF24114BE7uid        [  absoluta ] Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sub   rsa3072 2024-12-12 [E] [caduca: 2026-12-12]Si quisiéramos generar claves con un período de validez específico, podríamos haber utilizado la opción –full-gen-key de GPG. Esto nos habría mostrado un mensaje donde se solicita configurar el tiempo de validez.pavlo@debian:~()$ gpg --full-generate-keygpg (GnuPG) 2.2.40; Copyright (C) 2022 g10 Code GmbHThis is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Por favor seleccione tipo de clave deseado:   (1) RSA y RSA (por defecto)   (2) DSA y ElGamal   (3) DSA (sólo firmar)   (4) RSA (sólo firmar)  (14) Existing key from cardSu elección: las claves RSA pueden tener entre 1024 y 4096 bits de longitud.¿De qué tamaño quiere la clave? (3072) El tamaño requerido es de 3072 bitsPor favor, especifique el período de validez de la clave.         0 = la clave nunca caduca      &lt;n&gt;  = la clave caduca en n días      &lt;n&gt;w = la clave caduca en n semanas      &lt;n&gt;m = la clave caduca en n meses      &lt;n&gt;y = la clave caduca en n años¿Validez de la clave (0)?En este punto, podríamos haber indicado la duración deseada siguiendo las opciones que se nos presentan. Por ejemplo, para establecer una validez de un mes, podríamos haber ingresado 30, 4w o 1m, ya que todas estas opciones representan el mismo intervalo de tiempo.3. Lista las claves privadas de tu almacén de clavesPara listar las claves privadas haremos uso de la opción --list-secret-keys de gpg:pavlo@debian:~()$ gpg --list-secret-keys/home/pavlo/.gnupg/pubring.kbx------------------------------sec   rsa3072 2024-12-12 [SC] [caduca: 2026-12-12]      9D0AB661A8C5977C20924020130D7BAF24114BE7uid        [  absoluta ] Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;ssb   rsa3072 2024-12-12 [E] [caduca: 2026-12-12]Cuando listamos las claves públicas obtuvimos las siguientes abreviaturas:  pub: Clave primaria pública (public primary key).  uid: Identificador único (unique identifier).  sub: Clave secundaria pública (public sub-key).Al listar las claves privadas con gpg --list-secret-keys, las abreviaturas mostradas fueron:  sec: Clave primaria privada (secret primary key).  uid: Identificador único (unique identifier).  ssb: Clave secundaria privada (secret sub-key).En criptografía asimétrica trabajamos con pares de claves: una clave pública para encriptar o comprobar firmas, y una clave privada (secreta) para desencriptar o firmar, respectivamente.Cuando generamos un par de claves OpenPGP con GnuPG, se crean por defecto:  Un par de claves primario o master key:          Contiene uno o más identificadores de usuario (user-IDs), como nombre, apellidos y correo electrónico.      Se utiliza para firmar o comprobar firmas, ya que es una prueba de identidad.      La clave privada de este par debe protegerse cuidadosamente.        Un par de claves secundario:          Está firmado por el par de claves primario, lo que garantiza que pertenece al user-ID.      Se utiliza exclusivamente para encriptar o desencriptar información.      La separación entre pares de claves maestros y secundarios permite revocar estos últimos sin afectar a los primeros y almacenarlos por separado. En esencia, los pares de claves secundarios son independientes, pero están vinculados al par maestro.Tarea 2: Importar/exportar clave pública (gpg)1. Exporta tu clave pública en formato ASCII, guárdalo en un archivo “nombre_apellido.asc” y envíalo al compañero con el que vas a hacer esta práctica.Para exportar nuestras claves públicas, utilizaremos la opción --export de gpg junto con la opción -a &lt;nombre&gt;. Esto generará una salida en formato ASCII que puede ser redirigida a un archivo.El &lt;nombre&gt; que debemos especificar es el mismo que introdujimos al generar el par de claves (generalmente nuestro nombre o dirección de correo electrónico).El comando a ejecutar es el siguiente:pavlo@debian:~()$ gpg --export -a \"Pablo Martín Hidalgo\" &gt; pablo_martin.ascpavlo@debian:~()$ ls -l pablo_martin.asc -rw-r--r-- 1 pavlo pavlo 2476 dic 12 18:33 pablo_martin.ascEsta práctica la he realizado junto a Jose Antonio Canalo, así que le he enviado mis claves públicas exportadas a través de Discord:2. Importa las claves públicas recibidas de vuestro compañeroAl igual que yo, Jose me ha pasado su clave pública por Discord y como vemos ya la tengo descargada:Para importar las claves públicas de otro usuario, utilizaremos la opción --import de gpg, seguida del nombre del archivo que contiene la clave pública. En este caso, el archivo a importar es el que hemos recibido, por ejemplo, joseantoniocanalo.asc.El comando a ejecutar sería:pavlo@debian:~()$ gpg --import joseantoniocanalo.asc gpg: clave 5DD99C6F8D4E1C65: clave pública \"jose antonio Canalo Gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;\" importadagpg: Cantidad total procesada: 1gpg:               importadas: 1Como vemos nos ha devuelto un mensaje por pantalla informando que las claves públicas de Jose han sido correctamente importadas.3. Comprueba que las claves se han incluido correctamente en vuestro keyringDe nuevo, volveremos a hacer uso de opción --list-keys de gpg para verificar que las claves públicas han sido correctamente importadas a nuestro keyring:pavlo@debian:~()$ gpg --list-keys/home/pavlo/.gnupg/pubring.kbx------------------------------pub   rsa3072 2024-12-12 [SC] [caduca: 2026-12-12]      9D0AB661A8C5977C20924020130D7BAF24114BE7uid        [  absoluta ] Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sub   rsa3072 2024-12-12 [E] [caduca: 2026-12-12]pub   rsa3072 2024-12-12 [SC] [caduca: 2026-12-12]      279F1D439CE7DA18300BF21D5DD99C6F8D4E1C65uid        [desconocida] jose antonio Canalo Gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;sub   rsa3072 2024-12-12 [E] [caduca: 2026-12-12]Y efectivamente, las claves públicas de Jose han sido correctamente importadas a nuestro keyring en .gnupg/pubring.kbx.Tarea 3: Cifrado asimétrico con claves públicas (gpg)1. Cifraremos un archivo cualquiera y lo remitiremos por email a uno de nuestros compañeros que nos proporcionó su clave públicaEn este ejemplo, tengo un archivo llamado mensaje_encriptado.txt, el cual quiero cifrar con la clave pública de Jose para enviárselo de forma segura. Para ello, utilizaremos la opción -e de gpg junto con:  -u &lt;remitente&gt;: Indica quién es el remitente, especificando la clave privada que se usará para firmar, si es necesario.  -r &lt;destinatario&gt;: Especifica el destinatario, cuya clave pública será usada para cifrar el archivo.El comando a ejecutar sería:pavlo@debian:~()$ gpg -e -u \"Pablo Martín Hidalgo\" -r \"jose antonio Canalo Gonzalez\" mensaje_encriptado.txtgpg: 6CB51A1718E6B9E9: No hay seguridad de que esta clave pertenezca realmenteal usuario que se nombrasub  rsa3072/6CB51A1718E6B9E9 2024-12-12 jose antonio Canalo Gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt; Huella clave primaria: 279F 1D43 9CE7 DA18 300B  F21D 5DD9 9C6F 8D4E 1C65      Huella de subclave: F8AF 9D20 076C 877E DDEF  DE6B 6CB5 1A17 18E6 B9E9No es seguro que la clave pertenezca a la persona que se nombra en elidentificador de usuario. Si *realmente* sabe lo que está haciendo,puede contestar sí a la siguiente pregunta.¿Usar esta clave de todas formas? (s/N) sAl listar los archivos en el directorio utilizando el comando:pavlo@debian:~()$ ls -l | egrep mensaje_encriptado-rw-r--r--  1 pavlo pavlo   25 dic 12 18:45 mensaje_encriptado.txt-rw-r--r--  1 pavlo pavlo  507 dic 12 18:46 mensaje_encriptado.txt.gpgComo podemos observar ahora tenemos dos archivos, el original (mensaje_encriptado.txt) y el encriptado (mensaje_encriptado.txt.gpg).Tras ello, le enviaré dicho fichero a Jose por Discord:2. Nuestro compañero, a su vez, nos remitirá un archivo cifrado para que nosotros lo descifremos.Al igual que yo, Jose me ha pasado su mensaje cifrado por Discord:3. Tanto nosotros como nuestro compañero comprobaremos que hemos podido descifrar los mensajes recibidos respectivamentePara descifrar un archivo que hemos recibido, utilizaremos la opción -d de gpg, seguida del nombre del archivo a descifrar. En este caso, el archivo que hemos recibido de Jose es mensaje_cifrado.gpg.El comando a ejecutar sería:pavlo@debian:~()$ gpg -d mensaje_cifrado.gpggpg: cifrado con clave de 3072 bits RSA, ID 8E63E9C3C10E3D32, creada el 2024-12-12      \"Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;\"Espero que ganemos el sábadoTras ejecutar el comando, se nos pedirá la frase de paso para desbloquear la clave privada con la que vamos a descifrar el fichero (pues anteriormente fue cifrado con la clave pública asociada a dicha clave privada).Como se puede observar, el contenido del archivo descifrado no está en texto plano, sino que corresponde a un archivo .txt encriptado.pavlo@debian:~()$ cat mensaje_cifrado.gpg ���c���=2         �������42�曄:�1�J;)�\t6�&gt;�),��_�-g�g*���pȆ]8@�x�,K��Ҭ�,��g�W?�m�\"��dA0jb��z�\\����ݑb��a�5mk�6�� ��c��ޘ_=\"�e�G�օb}+�3(A&amp;�T��uG�h��?��/5�;D� ֖B������. ���Al�B�[_]�Tno7��ݯ�M��IT���;BtLn���Xqߵ�&gt;�R-�[[Z�D���-������.C��zu���|���/�ˊ��'5&amp;                                                                                                                                      �2r����&gt;Vq���[ԙ��TK-����N~3Q=�g0C:���XE���U:�`V�~\t�0��˴������E$�j�~}�������2���܍�L״��k���d=-���L1T'�bp����rBjq�B�����ad1:�'s��M2�  �tw��i%�}A#%Xh�Y`��k�,�mt&gt;|~                              �]��ɽVV7b^��KPara visualizarlo correctamente, debemos redirigir la salida del archivo descifrado a un archivo de formato .txt.Para ello, volvemos a ejecutar el comando de descifrado, pero esta vez redirigiendo la salida a un archivo con extensión .txt, como por ejemplo descifrado.txt.El comando a ejecutar sería:pavlo@debian:~()$ gpg -d mensaje_cifrado.gpg &gt; descifrado.txtgpg: cifrado con clave de 3072 bits RSA, ID 8E63E9C3C10E3D32, creada el 2024-12-12      \"Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;\"Y como vemos el contenido es totalmente visible:pavlo@debian:~()$ cat descifrado.txt Espero que ganemos el sábado4. Por último, enviaremos el documento cifrado a alguien que no estaba en la lista de destinatarios y comprobaremos que este usuario no podrá descifrar este archivoPara este punto hemos pedido ayuda a Andrés Morales, al cual le he enviado el fichero y ha comprobado si podía abrirlo o no. Y como podemos observar obtuvo el siguiente error:madandy@toyota-hilux:~/Descargas$ gpg -d mensaje_encriptado.txt.gpg gpg: cifrado con clave RSA, ID 6CB51A1718E6B9E9gpg: descifrado fallido: No secret keyComo se puede apreciar, el descifrado ha fallado dado que no ha encontrado ninguna clave privada para descifrar dicho fichero.5. Para terminar, indica los comandos necesarios para borrar las claves públicas y privadas que poseesEs importante seguir un orden específico al eliminar un par de claves en GPG para evitar errores. Primero, debemos eliminar la clave privada asociada y, posteriormente, la clave pública.Para eliminar la clave privada, utilizaremos la opción --delete-secret-key de gpg, seguida del nombre asociado al par de claves (el mismo que introdujimos al generarlo). El comando sería:pavlo@debian:~()$ gpg --delete-secret-key \"Pablo Martín Hidalgo\"gpg (GnuPG) 2.2.40; Copyright (C) 2022 g10 Code GmbHThis is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.sec  rsa3072/130D7BAF24114BE7 2024-12-12 Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;¿Eliminar esta clave del anillo? (s/N) s¡Es una clave secreta! ¿Eliminar realmente? (s/N) sUna vez eliminada la clave privada, procedemos a eliminar la clave pública con la opción –delete-key:pavlo@debian:~()$ gpg --delete-key \"Pablo Martín Hidalgo\"gpg (GnuPG) 2.2.40; Copyright (C) 2022 g10 Code GmbHThis is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.pub  rsa3072/130D7BAF24114BE7 2024-12-12 Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;¿Eliminar esta clave del anillo? (s/N) sAl completar ambos pasos, el par de claves (tanto público como privado) habrá sido eliminado de nuestro sistema.pavlo@debian:~()$ gpg --list-keysgpg: comprobando base de datos de confianzagpg: no se encuentran claves absolutamente fiables/home/pavlo/.gnupg/pubring.kbx------------------------------pub   rsa3072 2024-12-12 [SC] [caduca: 2026-12-12]      279F1D439CE7DA18300BF21D5DD99C6F8D4E1C65uid        [desconocida] jose antonio Canalo Gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;sub   rsa3072 2024-12-12 [E] [caduca: 2026-12-12]Tarea 4: Exportar clave a un servidor público de claves PGP1. Genera la clave de revocación de tu clave pública para utilizarla en caso de que haya problemasCuando generamos un par de claves con GPG, el programa crea automáticamente una clave de revocación. Sin embargo, para mostrar el proceso manual, generaremos una nueva clave de revocación.Para generar una clave de revocación, utilizaremos la opción --gen-revoke de gpg, seguida del identificador del par de claves (conocido como fingerprint). Este identificador es una secuencia de 40 dígitos que podemos encontrar al listar nuestras claves públicas con el siguiente comando:pavlo@debian:~()$ gpg --gen-revoke F0BCAC25DBEF1413DA96DFE02F56104F90EDEC18sec  rsa3072/2F56104F90EDEC18 2024-12-12 Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;¿Crear un certificado de revocación para esta clave? (s/N) sPor favor elija una razón para la revocación:  0 = No se dio ninguna razón  1 = La clave ha sido comprometida  2 = La clave ha sido reemplazada  3 = La clave ya no está en uso  Q = Cancelar(Probablemente quería seleccionar 1 aquí)¿Su decisión? 0Introduzca una descripción opcional; acábela con una línea vacía:&gt; Ejercicios de criptografía&gt; Razón para la revocación: No se dio ninguna razónEjercicios de criptografía¿Es correcto? (s/N) sse fuerza salida con armadura ASCII.-----BEGIN PGP PUBLIC KEY BLOCK-----Comment: This is a revocation certificateiQHRBCABCgA7FiEE8LysJdvvFBPalt/gL1YQT5Dt7BgFAmdbJhkdHQBFamVyY2ljaW9zIGRlIGNyaXB0b2dyYWbDrWEACgkQL1YQT5Dt7Bgkiwv7BLuEp9rUi3hgiYhJhCPyh9FqkD9UJByICZmdVf/wgP9BnKIy0SC9KEEjUF9Fko6N/nDz0EMVAwZ4WtCPflt3xq0ACJUfzGp9llP2iNujpcCbmdlwHDMwhCkvcI+ri4pb0fmZPRhw3BO9Ad4EcDMQ2LFffJ29zbBsWS1RqYZzTGEytjB3m5BaoIq+C5HAnM7dImfKbV5DBdCLsqCcwnwS1zvlHwFzpf9Ap6IhbmpN4Rf4H+ZBL8siVQrUDlOsbybwgBrzxLtLmaq0EZL+kZL7QHizTHaO9bUJd/PxumfiNiuq3wq5MxdUSnXNEg52bDg4AxPYlWm9IU87wAPB6fHFpwfzJh/VKyfZi7tD0CSb1fRN4qxg7abXRAS/4aRAprOaRFtbyvXiAswvD9oIY8LFxUe5P8OmvuzD9X7npsQX+H3ZbxTvJJZ9RVMn1Oxi1AHWiqqn2ae+jw7CPpgzy9C+FFWJTL/ME4vNeZ+y+EdRboRO+tx96Q453+jwo/tlLF7u=Oyi5-----END PGP PUBLIC KEY BLOCK-----Certificado de revocación creado.Por favor consérvelo en un medio que pueda esconder; si alguien consigueacceso a este certificado puede usarlo para inutilizar su clave.Es inteligente imprimir este certificado y guardarlo en otro lugar, porsi acaso su medio resulta imposible de leer. Pero precaución: ¡el sistemade impresión de su máquina podría almacenar los datos y hacerlos accesiblesa otras personas!El certificado de revocación generado por GPG contiene la información necesaria para revocar un par de claves de forma oficial. Este certificado está delimitado por las etiquetas:—–BEGIN PGP PUBLIC KEY BLOCK—– … —–END PGP PUBLIC KEY BLOCK—–2. Exporta tu clave pública al servidor pgp.rediris.esPara compartir nuestra clave pública con otros usuarios, podemos exportarla a un servidor de claves públicas, lo que permite que cualquiera pueda buscarla y utilizarla para cifrar mensajes destinados a nosotros.Para exportar la clave pública, utilizaremos la opción --keyserver para especificar el servidor al cual queremos enviar la clave y --send-key para indicar el identificador (ID) de la clave pública. En este caso, se utilizará el servidor pgp.rediris.es, y el ID será el fingerprint de la clave, que consta de 40 dígitos. También es posible usar únicamente los últimos 8 dígitos del fingerprint. El comando sería:pavlo@debian:~()$ gpg --keyserver pgp.rediris.es --send-key F0BCAC25DBEF1413DA96DFE02F56104F90EDEC18gpg: enviando clave 2F56104F90EDEC18 a hkp://pgp.rediris.esPara confirmar que la clave ha sido subida correctamente, se puede acceder al servidor de claves públicas mediante un navegador web. En este caso, al visitar la página de búsqueda de claves de pgp.rediris.es, es posible introducir un identificador como el nombre o la dirección de correo electrónico en el campo de búsqueda.Por ejemplo, al introducir el correo electrónico en el campo de búsqueda y pulsar “Search for a key”, aparecerán los resultados que coincidan con la búsqueda realizada.Si todo ha funcionado correctamente, debería verse la clave pública entre los resultados, lo que confirma que la subida al servidor de claves públicas se ha completado de manera satisfactoria. Exportar claves públicas a servidores como pgp.rediris.es facilita el intercambio de claves y asegura que otras personas puedan comunicarse de forma segura.3. Borra la clave pública de alguno de tus compañeros de clase e impórtala ahora del servidor público de redirisTal y como hemos visto en uno de los ejercicios anteriores, para eliminar una clave pública de nuestro keyring, utilizaremos la opción --delete-key seguida del nombre asociado a la clave. En este caso, el nombre que debemos introducir es el de Jose.pavlo@debian:~()$ gpg --delete-key \"jose antonio canalo gonzalez\"gpg (GnuPG) 2.2.40; Copyright (C) 2022 g10 Code GmbHThis is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.pub  rsa3072/5DD99C6F8D4E1C65 2024-12-12 jose antonio Canalo Gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;¿Eliminar esta clave del anillo? (s/N) sY listo, la clave pública de Jose ya se encuentra borrada:pavlo@debian:~()$ gpg --list-keys/home/pavlo/.gnupg/pubring.kbx------------------------------pub   rsa3072 2024-12-12 [SC] [caduca: 2026-12-12]      F0BCAC25DBEF1413DA96DFE02F56104F90EDEC18uid        [  absoluta ] Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sub   rsa3072 2024-12-12 [E] [caduca: 2026-12-12]Una vez que la clave pública ha sido totalmente eliminada, es momento de volver a importarla desde el servidor de claves públicas. Para ello, utilizaremos la opción --keyserver para especificar el servidor del que queremos descargar la clave y --recv-keys para indicar el identificador (fingerprint) de la clave pública.En este caso, el servidor a utilizar será pgp.rediris.es, y el ID será el fingerprint de 40 dígitos de la clave de Alejandro. También se pueden usar los últimos 8 dígitos del fingerprint.pavlo@debian:~()$ gpg --keyserver pgp.rediris.es --recv-keys 5D55680Cgpg: clave A93FC51D5D55680C: clave pública \"jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;\" importadagpg: Cantidad total procesada: 1gpg:               importadas: 1Como vemos, la clave pública de Jose ha sido importada de nuevo:pavlo@debian:~()$ gpg --list-keys/home/pavlo/.gnupg/pubring.kbx------------------------------pub   rsa3072 2024-12-12 [SC] [caduca: 2026-12-12]      F0BCAC25DBEF1413DA96DFE02F56104F90EDEC18uid        [  absoluta ] Pablo Martín Hidalgo &lt;pmartinhidalgo19@gmail.com&gt;sub   rsa3072 2024-12-12 [E] [caduca: 2026-12-12]pub   rsa3072 2024-12-12 [SC] [caduca: 2026-12-12]      B93E1746A5B533527796FC9DA93FC51D5D55680Cuid        [desconocida] jose antonio canalo gonzalez &lt;joseantoniocgonzalez83@gmail.com&gt;sub   rsa3072 2024-12-12 [E] [caduca: 2026-12-12]Tarea 5: Cifrado asimétrico con openssl1. Genera un par de claves (pública y privada)Para generar el par de claves utilizando el algoritmo RSA, emplearemos la opción genrsa. Además, configuraremos una frase de paso para proteger la clave privada, utilizando el algoritmo AES128, lo que requiere incluir la opción -aes128. Este par de claves se almacenará en un único archivo con extensión .pem, y para especificar dicho archivo de salida usaremos la opción -out &lt;fichero&gt;. En este caso, el archivo de salida se llamará key.pem. Finalmente, indicaremos el tamaño de la clave, siendo recomendable un mínimo de 2048 bits.pavlo@debian:~()$ sudo openssl genrsa -aes128 -out clave.pem 2048[sudo] contraseña para pavlo: Enter PEM pass phrase:Verifying - Enter PEM pass phrase:Tras habernos preguntado dos veces la frase de paso, el par de claves se habrá generado en un fichero .pem.2. Envía tu clave pública a un compañeroDado que openssl genera tanto la clave privada como la pública en un único archivo, es necesario extraer la clave pública para enviársela al compañero. Esto se debe a que no es seguro compartir el archivo que contiene ambas claves. Para realizar esta extracción, utilizaremos la opción -in &lt;pardeclaves&gt; para especificar el archivo que contiene el par de claves, junto con la opción -pubout para indicar que se extraiga únicamente la clave pública. Además, emplearemos la opción -out &lt;ficherosalida&gt; para guardar la clave pública en un archivo separado con la extensión .public.pem. Por último, indicaremos el algoritmo RSA, que es el que estamos utilizando.En este caso, el archivo del par de claves es clave.pem y el archivo de salida para la clave pública será clave-publica.pem.pavlo@debian:~()$ sudo openssl rsa -in clave.pem -pubout -out clave-publica.pemEnter pass phrase for clave.pem:writing RSA keyNos ha solicitado la frase de paso y justo después ha generado el fichero con la clave pública:pavlo@debian:~()$ cat clave-publica.pem -----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwTaSZx2rgZxL8H0XoU48Orzus0tpPn64xw/ftf0Sk5sh6MMnkVgbdug1Iydxun28rs8L1iULPoGDZUUZARMc6oa4CuW6gu6gsfvul4bktpSps9NjJmHA0Vd2Gehp7PMncxzXFPokwwinetSZi85J9uL2/RSJes2AxxRVxBIonOurpuBxWuaAB50ptDL2v6h0B3+A/1dtOdsSY1KmSuTqQFKVYry3sYKvPOJMy4JX78GSCzy5E/SPwnv3f6oD22Ual7MqIcDgNZsQ6tHjCZXPz/4VRA9SAkQ5yTIcSkb5IT/NxxkuiItHp1rwEnkfbxP2tymaUj5udVp5uQ6YT1/SsQIDAQAB-----END PUBLIC KEY-----Ahora, Jose y yo nos pasamos nuestra clave pública:3. Utilizando la clave pública cifra un fichero de texto y envíalo a tu compañeroLo primero que haremos será generar un fichero de texto con el contenido que deseemos:pavlo@debian:~()$ echo \"Hoy pierde el Betis\" &gt; archivo.txtTras la extracción de la clave pública, podremos proceder a cifrar un archivo utilizando la clave pública del destinatario. Esto se logra mediante el uso de las opciones de openssl. Específicamente:  La opción -encrypt indica que deseamos cifrar el archivo.  La opción -in &lt;fichero&gt; especifica el archivo de entrada que se desea cifrar.  La opción -out &lt;ficherosalida&gt; define el archivo de salida que contendrá los datos cifrados, con una extensión habitual como .enc.  La opción -inkey &lt;clavepublica&gt; especifica la clave pública que se usará para el cifrado.  La opción -pubin se utiliza para señalar que estamos trabajando con una clave pública.  Finalmente, el comando pkeyutl se emplea para realizar operaciones de firma, verificación, cifrado o descifrado con RSA.En este caso, el archivo de entrada será archivo.txt, el archivo de salida será mensaje_encriptado.enc, y la clave pública utilizada será la de Jose, contenida en clave_publica.pem.pavlo@debian:~()$ openssl pkeyutl -encrypt -in archivo.txt -out mensaje_encriptado.enc -inkey clave_publica.pem -pubinComo vemos, el mensaje encriptado utiliza carácteres no reconocidos:pavlo@debian:~()$ cat mensaje_encriptado.enc ��h�u*�3�ݔL��;\"v��T������_f.VH4�C��y!                                     �ei�0dKs   �����T������'&gt;�����Dd�F��-�^}�\t��t�p���j@ݓ�Dg�P�a3N�bE��I�Ҝ��U����cL�@�FKa�2e��z[?3�l���4De nuevo, yo le paso mi mensaje cifrado para que lo averigüe y yo me descargo el suyo:4. Tu compañero te ha mandado un fichero cifrado, muestra el proceso para el descifradoPara descifrar un archivo previamente cifrado, utilizamos la herramienta openssl con las siguientes opciones:  La opción -decrypt indica que queremos realizar la operación de descifrado.  La opción -in &lt;fichero&gt; especifica el archivo cifrado que deseamos descifrar.  La opción -out &lt;ficherosalida&gt; define el archivo donde se guardará el contenido descifrado.  La opción -inkey &lt;claveprivada&gt; señala la clave privada que se utilizará para descifrar el archivo.  Al igual que en el cifrado, la opción pkeyutl se usa para realizar operaciones de firma, verificación, cifrado o descifrado con el algoritmo RSA.En este caso, el archivo de entrada será mensajenuevo_cifrado.enc, el archivo de salida será documento.txt, y la clave privada utilizada será clave.pem, la cual generamos previamente.pavlo@debian:~()$ sudo openssl pkeyutl -decrypt -in mensajenuevo_cifrado.enc -out documento.txt -inkey clave.pemY como vemos, podemos visualizar el contenido:pavlo@debian:~()$ cat documento.txt ojala eliminen al betis"
  },
  
  {
    "title": "Escenario en OpenStack",
    "url": "/posts/openstack/",
    "categories": "Servicios, Cloud",
    "tags": "Cloud",
    "date": "2024-12-11 18:15:00 +0100",
    





    
    "snippet": "Práctica (1 / 2): Escenario en OpenStackPara nombrar las máquinas se van a utilizar los siguientes nombres: luffy, zoro, nami, sanji. Estos nombres pertenecen la serie manga One Piece.Además el dom...",
    "content": "Práctica (1 / 2): Escenario en OpenStackPara nombrar las máquinas se van a utilizar los siguientes nombres: luffy, zoro, nami, sanji. Estos nombres pertenecen la serie manga One Piece.Además el dominio será un subdominio de la forma tunombre.gonzalonazareno.org. De esta forma tendremos:  Máquina 1: Instancia en OpenStack con Debian 12 Bookworm que se llama luffy.tunombre.gonzalonazareno.org.  Máquina 2: Instancia en OpenStack con Rocky Linux 9 que se llama zoro.tunombre.gonzalonazareno.org.  Máquina 3: Contenedor LXC con Ubuntu 22.04 que se llama nami.tunombre.gonzalonazareno.org.  Máquina 4: Contenedor LXC con Ubuntu 22.04 que se llama sanji.tunombre.gonzalonazareno.org.Todas las operaciones que realices sobre recursos de OpenStack lo tienes que hacer usando OSC.Creación de la infraestructura de red  Crea un nuevo router llamado RouterPractica conectado a la red externa.Para crear el router ejecutamos el siguiente comando:(os) pavlo@debian:~/OpenStack()$ openstack router create RouterPractica+---------------------------+--------------------------------------+| Field                     | Value                                |+---------------------------+--------------------------------------+| admin_state_up            | UP                                   || availability_zone_hints   |                                      || availability_zones        |                                      || created_at                | 2024-12-11T17:32:26Z                 || description               |                                      || enable_default_route_bfd  | False                                || enable_default_route_ecmp | False                                || enable_ndp_proxy          | None                                 || external_gateway_info     | null                                 || external_gateways         | []                                   || flavor_id                 | None                                 || id                        | c94e22f0-5551-4842-9628-a9d3929b5539 || name                      | RouterPractica                       || project_id                | 07df99f775d343a58e702b5c99adcbad     || revision_number           | 1                                    || routes                    |                                      || status                    | ACTIVE                               || tags                      |                                      || tenant_id                 | 07df99f775d343a58e702b5c99adcbad     || updated_at                | 2024-12-11T17:32:26Z                 |+---------------------------+--------------------------------------+Luego, lo añadimos a la red pública que por lo general suele ser public, aunque en este caso es ext-net:(os) pavlo@debian:~/OpenStack()$ openstack router set RouterPractica --external-gateway ext-net      Crea una red interna que se llame Red Intra de tu_usuario, con las siguientes características:                  Está conectada al router que has creado en el punto anterior.                    Direccionamiento: 10.0.200.0/24                    Con DHCP y DNS (172.22.0.1).                    La puerta de enlace de los dispositivos conectados a esta red será el 10.0.200.1.            Para este paso debemos crear una red:(os) pavlo@debian:~/OpenStack()$ openstack network create red-intra-pablo+---------------------------+--------------------------------------+| Field                     | Value                                |+---------------------------+--------------------------------------+| admin_state_up            | UP                                   || availability_zone_hints   |                                      || availability_zones        |                                      || created_at                | 2024-12-11T17:33:53Z                 || description               |                                      || dns_domain                | None                                 || id                        | 260d2b52-38e8-449f-a368-a68824d2474f || ipv4_address_scope        | None                                 || ipv6_address_scope        | None                                 || is_default                | False                                || is_vlan_transparent       | None                                 || mtu                       | 1442                                 || name                      | red-intra-pablo                      || port_security_enabled     | True                                 || project_id                | 07df99f775d343a58e702b5c99adcbad     || provider:network_type     | None                                 || provider:physical_network | None                                 || provider:segmentation_id  | None                                 || qos_policy_id             | None                                 || revision_number           | 1                                    || router:external           | Internal                             || segments                  | None                                 || shared                    | False                                || status                    | ACTIVE                               || subnets                   |                                      || tags                      |                                      || updated_at                | 2024-12-11T17:33:53Z                 |+---------------------------+--------------------------------------+Luego, crear la subred con las especificaciones:(os) pavlo@debian:~/OpenStack()$ openstack subnet create red-intra-pablo-subnet \\&gt; --network red-intra-pablo \\&gt; --subnet-range 10.0.200.0/24 \\&gt; --dhcp \\&gt; --gateway 10.0.200.1 \\&gt; --dns-nameserver 172.22.0.1+----------------------+--------------------------------------+| Field                | Value                                |+----------------------+--------------------------------------+| allocation_pools     | 10.0.200.2-10.0.200.254              || cidr                 | 10.0.200.0/24                        || created_at           | 2024-12-11T17:35:40Z                 || description          |                                      || dns_nameservers      | 172.22.0.1                           || dns_publish_fixed_ip | None                                 || enable_dhcp          | True                                 || gateway_ip           | 10.0.200.1                           || host_routes          |                                      || id                   | 7ef74cd9-63bf-4b2e-8479-69250a4a087b || ip_version           | 4                                    || ipv6_address_mode    | None                                 || ipv6_ra_mode         | None                                 || name                 | red-intra-pablo-subnet               || network_id           | 260d2b52-38e8-449f-a368-a68824d2474f || project_id           | 07df99f775d343a58e702b5c99adcbad     || revision_number      | 0                                    || segment_id           | None                                 || service_types        |                                      || subnetpool_id        | None                                 || tags                 |                                      || updated_at           | 2024-12-11T17:35:40Z                 |+----------------------+--------------------------------------+Por último añadimos la subnet creada en el paso anterior al router creado al principio:(os) pavlo@debian:~/OpenStack()$ openstack router add subnet RouterPractica red-intra-pablo-subnet      Crea una red interna que se llame Red DMZ de tu_usuario, con las siguientes características:                  Direccionamiento: 172.16.0.0/16                    Sin DHCP.                    Deshabilitamos la puerta de enlace. Esto es para que cloud-init no configure la puerta de enlace en las instancias conectada a esta red.                    La puerta de enlace de los dispositivos conectados a esta red será el 172.16.0.1.            Para crear esta red hacemos lo mismo que antes:(os) pavlo@debian:~/OpenStack()$ openstack network create red-dmz-pablo+---------------------------+--------------------------------------+| Field                     | Value                                |+---------------------------+--------------------------------------+| admin_state_up            | UP                                   || availability_zone_hints   |                                      || availability_zones        |                                      || created_at                | 2024-12-11T17:41:36Z                 || description               |                                      || dns_domain                | None                                 || id                        | b6ae55f9-e6fb-4509-bd3b-fd627a3da1d8 || ipv4_address_scope        | None                                 || ipv6_address_scope        | None                                 || is_default                | False                                || is_vlan_transparent       | None                                 || mtu                       | 1442                                 || name                      | red-dmz-pablo                        || port_security_enabled     | True                                 || project_id                | 07df99f775d343a58e702b5c99adcbad     || provider:network_type     | None                                 || provider:physical_network | None                                 || provider:segmentation_id  | None                                 || qos_policy_id             | None                                 || revision_number           | 1                                    || router:external           | Internal                             || segments                  | None                                 || shared                    | False                                || status                    | ACTIVE                               || subnets                   |                                      || tags                      |                                      || updated_at                | 2024-12-11T17:41:36Z                 |+---------------------------+--------------------------------------+Luego creamos la subnet indicando que no queremos dhcp ni puerta de enlace:(os) pavlo@debian:~/OpenStack()$ openstack subnet create red-dmz-pablo-subnet \\&gt; --network red-dmz-pablo \\&gt; --subnet-range 172.16.0.0/16 \\&gt; --no-dhcp \\&gt; --gateway none+----------------------+--------------------------------------+| Field                | Value                                |+----------------------+--------------------------------------+| allocation_pools     | 172.16.0.1-172.16.255.254            || cidr                 | 172.16.0.0/16                        || created_at           | 2024-12-11T17:44:05Z                 || description          |                                      || dns_nameservers      |                                      || dns_publish_fixed_ip | None                                 || enable_dhcp          | False                                || gateway_ip           | None                                 || host_routes          |                                      || id                   | 450496f9-646a-42a4-9a8e-b07b5b3a992d || ip_version           | 4                                    || ipv6_address_mode    | None                                 || ipv6_ra_mode         | None                                 || name                 | red-dmz-pablo-subnet                 || network_id           | b6ae55f9-e6fb-4509-bd3b-fd627a3da1d8 || project_id           | 07df99f775d343a58e702b5c99adcbad     || revision_number      | 0                                    || segment_id           | None                                 || service_types        |                                      || subnetpool_id        | None                                 || tags                 |                                      || updated_at           | 2024-12-11T17:44:05Z                 |+----------------------+--------------------------------------+Aunque no configuramos la puerta de enlace en la red (para evitar que cloud-init lo haga automáticamente), las instancias se pueden configurar manualmente si es necesario.La dirección 172.16.0.1 será la puerta de enlace predeterminada que los dispositivos pueden usar.Instalación de las instancias de OpenStackConfiguración de las instanciasLas dos instancias que vamos a crear se van a configurar con cloud-init de la siguiente manera:      Deben actualizar los paquetes de la distribución de la instancia.        El dominio utilizado será del tipo tunombre.gonzalonazareno.org. Por lo tanto en la configuración con cloud-init habrá que indicar el hostname y el FQDN.        Se crearán dos usuarios:                  Un usuario sin privilegios. Se puede llamar como quieras (pero el nombre será el mismo en todas las máquinas) y accederás a las máquinas usando tu clave ssh privada.                    Un usuario profesor, que puede utilizar sudo sin contraseña. Copia de las claves públicas de todos los profesores en las instancias para que puedan acceder con el usuario profesor.                  Cambia la contraseña al usuario root.  Bueno pues para ello debemos crear el fichero cloud-init-luffy.yaml en donde añadiremos las configuraciones que se pide:#cloud-configpackage_update: truepackage_upgrade: truehostname: luffyfqdn: luffy.pablo.gonzalonazareno.orgusers:  - name: pablo    shell: /bin/bash    sudo: ['ALL=(ALL) NOPASSWD:ALL']    ssh_authorized_keys:      - \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQClFcnIhYd1oaEpvGi/f4psQc4+DaAZvSNIxVRRJHtRoJui8wbJybi3Om8yTOflgEcmBaUrJLkfmzmWqVq1j6MpESq72p7J2hdq2lXnvzdt3huYv5evFwyd0p/r72RfpVZzr3ILi/BS//SJqfVKlDEVbZRaOE5MU2XuElmFFY4EO7NiiZAkbatVqUOT8H/nrfXcad0mjZVxroVqHhsHV+06rxiB0xifG0xZv204Qj4zRura8uqZlEVAAwU+NO/SIGdRwpLY7n7xbQGe1DbjHgPUeVPjJX6HpMK41a43eGj4XYdYtZBLugaU8Mq1y6Kl3tE6cvYkQ9WFTYTLLNy3bvNRZpP2p6qAy5qn03ZLFICiXBNXPmrl5+KVrKaSipNaPHkmInvczbYJjXpfyVBsfEabt+0Y1629M+eEKkkl+iZmVr2ySDSS1gHxMC7zlJRaUhG27o26agpNPYPHH3mVXVjqdGg0ryH0YHZk1V8+Gt1Z9hZ7UYWE1UX8DCgFfecqdX0= pavlo@debian\"  - name: profesor    shell: /bin/bash    sudo: ['ALL=(ALL) NOPASSWD:ALL']    ssh_authorized_keys:      - \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCmjoVIoZCx4QFXvljqozXGqxxlSvO7V2aizqyPgMfGqnyl0J9YXo6zrcWYwyWMnMdRdwYZgHqfiiFCUn2QDm6ZuzC4Lcx0K3ZwO2lgL4XaATykVLneHR1ib6RNroFcClN69cxWsdwQW6dpjpiBDXf8m6/qxVP3EHwUTsP8XaOV7WkcCAqfYAMvpWLISqYme6e+6ZGJUIPkDTxavu5JTagDLwY+py1WB53eoDWsG99gmvyit2O1Eo+jRWN+mgRHIxJTrFtLS6o4iWeshPZ6LvCZ/Pum12Oj4B4bjGSHzrKjHZgTwhVJ/LDq3v71/PP4zaI3gVB9ZalemSxqomgbTlnT jose@debian\"      - \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDf9lnBH2nCT2ezpDZnqSBeDuSsVGGFD1Kzqa4KyIVkzkrD7pNHHkkpSuO4isKcCsUcopYOcA38QtG7wB0v/qn8Jsq731N8bjaKOdQN25vqLjwVj8DpYtvGc+ZA0uaChe7TS+QBzlMC9ypwj4wf15Q/z3v/ip4FF2cORT0cQC04cNRQDgUg4p1rlOs8+ma7OPh3P3UvzlPfLhi2H1yl+/mo4XLOcAMNr/jiZCwYxom6OEOYVBNk8MZX/Zn+qRi71D0RPiKg27AcXSD/FPWdQW9hBH1Zq5xGicUFS4C9yXvHKru7cMmmxV2G80p/ArRscKWq92UT5jIJQpccmHxsxdIi6o25LhcxH1dOnZy6kHcJ2yP24CnBHK5Y3SsovCD0Th6MN1VlTySbl8Ar0ypmY+GYO+oVd4bM3ioHzL0AMqYnS29m0UtEDvFEUUoSkOoLK4uSlcvej+OIVp7X5G7oZ56nZZf+qHEgodv++a6vPmhH2ZSgoOj1sE39DK7InuKSqCE= rafa@eco\"      - \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDASDwvkY5SbIgM+/j14mNQluPV+/HGcM3ZgXrYDWt7zhQKq8KAXqJLs1vw1HcRv5PRV071caZQxV2ssfrNqIDofjSzWM1I1JkVIqIj4NCOsRFsQQFN8HwfkE9ic/X6vRaV+NfkEF+t3VmX2YgBd02ZbmGt53qjDaGMQRS/qxw3MPS+ynf2Fj8ZibT6DZeWnyjEGhFcyrggFWiPDqw77MNaiDr+31SO0TaP1WeIWFMrSwPVMVG1zvSxAQ9L13SQ5XzwK0Xs2A8kBPiZmPuUFRqYlBWeffhUnRPSg4TdOsWqJjEwFb5OwpQmTDCT5z0MSFCNVLV5GGwvvqCrw5jd1Xfdswdqazc8mCaIPIrCmhsiwz7uZvQDYr1HDrKxJ1L8LLo3usp4FM5cCCM5jptK+XffhmIyJSkMrcg6tYawBeNuAiY3dwPRIyKeV1Ku3UUctkN+kbuOpMQ4nSvAK0DyhUiTakc8qMJDNLD8oHhSEp49G2bzsLwFOmaEgb8falVMLyk= javji@Javier\"  - name: root    passwd: \"root\"final_message: \"Instancia configurada correctamente.\"Este fichero está destinado a la configuración de la instancia luffy.A continuación, crearé el archivo cloud-init-zoro.yaml para la posterior creación de la instancia zoro.#cloud-configpackage_update: truepackage_upgrade: truehostname: zorofqdn: zoro.pablo.gonzalonazareno.orgusers:  - name: pablo    gecos: Usuario sin privilegios    groups: []    shell: /bin/bash    sudo: ['ALL=(ALL) NOPASSWD:ALL']    ssh_authorized_keys:      - \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQClFcnIhYd1oaEpvGi/f4psQc4+DaAZvSNIxVRRJHtRoJui8wbJybi3Om8yTOflgEcmBaUrJLkfmzmWqVq1j6MpESq72p7J2hdq2lXnvzdt3huYv5evFwyd0p/r72RfpVZzr3ILi/BS//SJqfVKlDEVbZRaOE5MU2XuElmFFY4EO7NiiZAkbatVqUOT8H/nrfXcad0mjZVxroVqHhsHV+06rxiB0xifG0xZv204Qj4zRura8uqZlEVAAwU+NO/SIGdRwpLY7n7xbQGe1DbjHgPUeVPjJX6HpMK41a43eGj4XYdYtZBLugaU8Mq1y6Kl3tE6cvYkQ9WFTYTLLNy3bvNRZpP2p6qAy5qn03ZLFICiXBNXPmrl5+KVrKaSipNaPHkmInvczbYJjXpfyVBsfEabt+0Y1629M+eEKkkl+iZmVr2ySDSS1gHxMC7zlJRaUhG27o26agpNPYPHH3mVXVjqdGg0ryH0YHZk1V8+Gt1Z9hZ7UYWE1UX8DCgFfecqdX0= pavlo@debian\"  - name: profesor    gecos: Usuario Profesor    groups: sudo    shell: /bin/bash    sudo: ['ALL=(ALL) NOPASSWD:ALL']    ssh_authorized_keys:      - \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCmjoVIoZCx4QFXvljqozXGqxxlSvO7V2aizqyPgMfGqnyl0J9YXo6zrcWYwyWMnMdRdwYZgHqfiiFCUn2QDm6ZuzC4Lcx0K3ZwO2lgL4XaATykVLneHR1ib6RNroFcClN69cxWsdwQW6dpjpiBDXf8m6/qxVP3EHwUTsP8XaOV7WkcCAqfYAMvpWLISqYme6e+6ZGJUIPkDTxavu5JTagDLwY+py1WB53eoDWsG99gmvyit2O1Eo+jRWN+mgRHIxJTrFtLS6o4iWeshPZ6LvCZ/Pum12Oj4B4bjGSHzrKjHZgTwhVJ/LDq3v71/PP4zaI3gVB9ZalemSxqomgbTlnT jose@debian\"      - \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDf9lnBH2nCT2ezpDZnqSBeDuSsVGGFD1Kzqa4KyIVkzkrD7pNHHkkpSuO4isKcCsUcopYOcA38QtG7wB0v/qn8Jsq731N8bjaKOdQN25vqLjwVj8DpYtvGc+ZA0uaChe7TS+QBzlMC9ypwj4wf15Q/z3v/ip4FF2cORT0cQC04cNRQDgUg4p1rlOs8+ma7OPh3P3UvzlPfLhi2H1yl+/mo4XLOcAMNr/jiZCwYxom6OEOYVBNk8MZX/Zn+qRi71D0RPiKg27AcXSD/FPWdQW9hBH1Zq5xGicUFS4C9yXvHKru7cMmmxV2G80p/ArRscKWq92UT5jIJQpccmHxsxdIi6o25LhcxH1dOnZy6kHcJ2yP24CnBHK5Y3SsovCD0Th6MN1VlTySbl8Ar0ypmY+GYO+oVd4bM3ioHzL0AMqYnS29m0UtEDvFEUUoSkOoLK4uSlcvej+OIVp7X5G7oZ56nZZf+qHEgodv++a6vPmhH2ZSgoOj1sE39DK7InuKSqCE= rafa@eco\"      - \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDASDwvkY5SbIgM+/j14mNQluPV+/HGcM3ZgXrYDWt7zhQKq8KAXqJLs1vw1HcRv5PRV071caZQxV2ssfrNqIDofjSzWM1I1JkVIqIj4NCOsRFsQQFN8HwfkE9ic/X6vRaV+NfkEF+t3VmX2YgBd02ZbmGt53qjDaGMQRS/qxw3MPS+ynf2Fj8ZibT6DZeWnyjEGhFcyrggFWiPDqw77MNaiDr+31SO0TaP1WeIWFMrSwPVMVG1zvSxAQ9L13SQ5XzwK0Xs2A8kBPiZmPuUFRqYlBWeffhUnRPSg4TdOsWqJjEwFb5OwpQmTDCT5z0MSFCNVLV5GGwvvqCrw5jd1Xfdswdqazc8mCaIPIrCmhsiwz7uZvQDYr1HDrKxJ1L8LLo3usp4FM5cCCM5jptK+XffhmIyJSkMrcg6tYawBeNuAiY3dwPRIyKeV1Ku3UUctkN+kbuOpMQ4nSvAK0DyhUiTakc8qMJDNLD8oHhSEp49G2bzsLwFOmaEgb8falVMLyk= javji@Javier\"chpasswd:  list: |    root:root  expire: FalseCreación de las instanciasmáquina1 (luffy)      Crea una instancia sobre un volumen de 15Gb (el volumen se crea durante la creación de la instancia), usando una imagen de Debian 12 Bookworm. Elige el sabor vol.medium. Y configuralá con cloud-init como se ha indicado anteriormente.        Está instancia estará conectada a las dos redes. Recuerda que en la red Red DMZ debe tomar la dirección 172.16.0.1 (puerta de enlace las máquinas conectadas a esta red). Asigna a la instancia una IP flotante.        Deshabilita la seguridad de los puertos en las dos interfaces de red para que funcione de manera adecuada el NAT.        Configura de forma permanente la regla SNAT para que las máquinas de la Red DMZ tengan acceso a internet.  En primer lugar debemos crear la instancia:(os) pavlo@debian:~/OpenStack()$ openstack server create luffy \\&gt; --flavor vol.medium \\&gt; --image \"Debian 12 Bookworm\" \\&gt; --network red-intra-pablo \\&gt; --network red-dmz-pablo \\&gt; --user-data cloud-init-luffy.yaml \\&gt; --boot-from-volume 15 \\&gt; --security-group defaultLuego, le asignamos una IP flotante, para ello:(os) pavlo@debian:~/OpenStack()$ openstack server add floating ip luffy 172.22.200.100Comprobamos que se hayan añadido las interfaces correctamente:(os) pavlo@debian:~/OpenStack()$ openstack server list+--------------------------------------+-------+--------+--------------------------------------------------------------------------+--------------------------+------------+| ID                                   | Name  | Status | Networks                                                                 | Image                    | Flavor     |+--------------------------------------+-------+--------+--------------------------------------------------------------------------+--------------------------+------------+| 91e29177-4a4f-4529-8594-4f867d2dd6bd | luffy | ACTIVE | red-dmz-pablo=172.16.3.142; red-intra-pablo=10.0.200.181, 172.22.200.100 | N/A (booted from volume) | vol.medium |+--------------------------------------+-------+--------+--------------------------------------------------------------------------+--------------------------+------------+Ahora debemos deshabilitar la seguridad de los puertos en las dos interfaces de red, para ello primero obtenemos las IDs de los puertos:(os) pavlo@debian:~/OpenStack()$ openstack port list --server luffy+--------------------------------------+------+-------------------+-----------------------------------------------------------------------------+--------+| ID                                   | Name | MAC Address       | Fixed IP Addresses                                                          | Status |+--------------------------------------+------+-------------------+-----------------------------------------------------------------------------+--------+| 1505f6e0-7c0f-47d3-b865-1a5420c69246 |      | fa:16:3e:d9:cb:6a | ip_address='172.16.3.142', subnet_id='450496f9-646a-42a4-9a8e-b07b5b3a992d' | ACTIVE || 3168307f-1878-4306-a1c3-81256a9dd85a |      | fa:16:3e:ff:1e:6d | ip_address='10.0.200.181', subnet_id='7ef74cd9-63bf-4b2e-8479-69250a4a087b' | ACTIVE |+--------------------------------------+------+-------------------+-----------------------------------------------------------------------------+--------+Y una vez sabemos las IDs ya podemos deshabilitarlos:(os) pavlo@debian:~/OpenStack()$ openstack port set 1505f6e0-7c0f-47d3-b865-1a5420c69246 --no-security-group --disable-port-security(os) pavlo@debian:~/OpenStack()$ openstack port set 3168307f-1878-4306-a1c3-81256a9dd85a --no-security-group --disable-port-securityAntes de aceder al router (luffy) y realizar el SNAT voy a añadir en el ~/.ssh/config la máquina para poder conectarme de forma más sencilla:Host luffy  HostName 172.22.200.100  User pablo  ForwardAgent yesDe forma que ya puedo acceder a la instancia:(os) pavlo@debian:~/OpenStack()$ ssh luffy Linux luffy 6.1.0-28-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.119-1 (2024-11-22) x86_64The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Wed Dec 11 22:48:14 2024 from 172.29.0.34pablo@luffy:~$Una vez accedido a luffy habilitamos el bit de forwarding en el fichero /etc/sysctl.conf, en donde descomentamos la siguiente línea:net.ipv4.ip_forward=1Aplicamos los cambios:pablo@luffy:~$ sudo sysctl -pnet.ipv4.ip_forward = 1Ahora debemos configurar la reglas SNAT con iptables, pero antes miramos las direcciones IP de las interfaces:pablo@luffy:~$ ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host noprefixroute        valid_lft forever preferred_lft forever2: ens3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1442 qdisc fq_codel state UP group default qlen 1000    link/ether fa:16:3e:8c:07:52 brd ff:ff:ff:ff:ff:ff    altname enp0s3    inet 10.0.200.231/24 metric 100 brd 10.0.200.255 scope global dynamic ens3       valid_lft 42718sec preferred_lft 42718sec    inet6 fe80::f816:3eff:fe8c:752/64 scope link        valid_lft forever preferred_lft forever3: ens4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1442 qdisc fq_codel state UP group default qlen 1000    link/ether fa:16:3e:67:5a:49 brd ff:ff:ff:ff:ff:ff    altname enp0s4    inet 172.16.0.16/16 brd 172.16.255.255 scope global ens4       valid_lft forever preferred_lft forever    inet6 fe80::f816:3eff:fe67:5a49/64 scope link        valid_lft forever preferred_lft foreverEn base a esta configuración de interfaces de red:  ens3: Interfaz conectada a la red interna (red-intra-pablo, 10.0.200.0/24).  ens4: Interfaz conectada a la red DMZ (red-dmz-pablo, 172.16.0.0/16).Dado esto, necesitamos configurar las reglas SNAT para que el tráfico desde Red DMZ pueda salir a Internet a través de ens3. Para ello:sudo iptables -t nat -A POSTROUTING -o ens3 -s 172.16.0.0/16 -j MASQUERADEDe forma que quede así:pablo@luffy:~$ sudo iptables -t nat -L -vChain PREROUTING (policy ACCEPT 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source               destination         Chain INPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source               destination         Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source               destination         Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source               destination             0     0 MASQUERADE  all  --  any    ens3    172.16.0.0/16        anywherePara hacer las reglas persistentes instalamos el siguiente paquete:sudo apt install iptables-persistentEn la misma instalación si detecta reglas existentes las guarda automáticamente, aunque si añadimos otras reglas debemos hacerlo manualmente.Con esto, ya habríamos terminado la instalación y configuración al completo del router luffy.maquina2 (zoro)      Crea un volumen de 15Gb con la imagen Rocky Linux 9.        Crea la instancia a partir de este volumen. Elige el sabor vol.medium. Y configúrala con cloud-init como se ha indicado anteriormente.        En un primer momento, para que la instancia se configure mediante cloud-init conecta esta instancia a un red con DHCP.        Posteriormente, desconecta la interfaz de red de esa red y conéctala a la red Red DMZ a la dirección 172.16.0.200.        Recuerda, que esa configuración no se hará de forma automática por lo que deberas, de forma manual, configurar la red en esta máquina. recuerda que Rocky Linux tiene instalado por defecto NetwokManager.        Deshabilita la seguridad de los puertos en la interfaz de red para que funcione de manera adecuada el NAT.        Comprueba que tiene acceso a internet.  Empezamos creando el volumen a partir de la imagen:(os) pavlo@debian:~/OpenStack()$ openstack volume create --size 15 --image \"Rocky Linux 9\" volumen-zoro+---------------------+------------------------------------------------------------------+| Field               | Value                                                            |+---------------------+------------------------------------------------------------------+| attachments         | []                                                               || availability_zone   | nova                                                             || bootable            | false                                                            || consistencygroup_id | None                                                             || created_at          | 2024-12-12T07:44:39.479661                                       || description         | None                                                             || encrypted           | False                                                            || id                  | 786b9400-013c-4bf3-9986-1896891628bf                             || multiattach         | False                                                            || name                | volumen-zoro                                                     || properties          |                                                                  || replication_status  | None                                                             || size                | 15                                                               || snapshot_id         | None                                                             || source_volid        | None                                                             || status              | creating                                                         || type                | lvmdriver-1                                                      || updated_at          | None                                                             || user_id             | a74499e28f7622936621adb74c2b02fe4a18a1f6964a32bdbb23af09b776065f |+---------------------+------------------------------------------------------------------+Seguidamente creamos la instancia a partir del volumen, conectándola en un principio a una red con DHCP como red-intra-pablo.(os) pavlo@debian:~/OpenStack()$ openstack server create zoro \\    --flavor vol.medium \\    --volume volumen-zoro \\    --network red-intra-pablo \\    --user-data cloud-init-zoro.yaml \\    --security-group defaultComprobamos que se haya creado correctamente:(os) pavlo@debian:~/OpenStack()$ openstack server list+--------------------------------------+-------+--------+-------------------------------------------------------------------------+--------------------------+------------+| ID                                   | Name  | Status | Networks                                                                | Image                    | Flavor     |+--------------------------------------+-------+--------+-------------------------------------------------------------------------+--------------------------+------------+| 82692c6d-9d36-4bdd-86b6-46e90bea1892 | zoro  | ACTIVE | red-intra-pablo=10.0.200.132                                            | N/A (booted from volume) | vol.medium || 9c9e8c12-7712-404e-aa3b-2e2bf566ca0c | luffy | ACTIVE | red-dmz-pablo=172.16.0.16; red-intra-pablo=10.0.200.231, 172.22.200.100 | N/A (booted from volume) | vol.medium |+--------------------------------------+-------+--------+-------------------------------------------------------------------------+--------------------------+------------+Ya que se ha creado la instancia y el cloud-init se ha configurado correctamente, añadimos en el fichero ~/.ssh/config la nueva configuración temporal:Host luffy  HostName 172.22.200.100  User pablo  ForwardAgent yesHost zoro  HostName 10.0.200.244  User pablo  ForwardAgent yes  ProxyJump luffyAdemás, añadimos la nueva interfaz que estará conectada a la Red DMZ con la dirección 172.16.0.200, la que posteriormente vamos a configurar manualmente:(os) pavlo@debian:~/OpenStack()$ openstack server add port zoro \\&gt; $(openstack port create --network red-dmz-pablo --fixed-ip subnet=red-dmz-pablo-subnet,ip-address=172.16.0.200 puerto-zoro -f value -c id)Accedemos a la instancia:(os) pavlo@debian:~/OpenStack()$ ssh zoro The authenticity of host '10.0.200.244 (&lt;no hostip for proxy command&gt;)' can't be established.ED25519 key fingerprint is SHA256:JrbuXBRRZ4JoLGdRCCiKNThDEKWqINQtX2NVLKP7Gvo.This host key is known by the following other names/addresses:    ~/.ssh/known_hosts:421: [hashed name]Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added '10.0.200.244' (ED25519) to the list of known hosts.Last login: Thu Dec 12 07:52:34 2024 from 10.0.200.231Y hacemos algunas comprobaciones:[pablo@zoro ~]$ hostname -fzoro.pablo.gonzalonazareno.org[pablo@zoro ~]$ ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1442 qdisc fq_codel state UP group default qlen 1000    link/ether fa:16:3e:78:8b:9e brd ff:ff:ff:ff:ff:ff    altname enp0s3    altname ens33: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1442 qdisc fq_codel state UP group default qlen 1000    link/ether fa:16:3e:87:ca:cd brd ff:ff:ff:ff:ff:ff    altname enp0s7    altname ens7    inet 10.0.200.244/24 brd 10.0.200.255 scope global dynamic noprefixroute eth1       valid_lft 43120sec preferred_lft 43120sec    inet6 fe80::7f34:f482:b58c:edcc/64 scope link noprefixroute        valid_lft forever preferred_lft foreverComo vemos la interfaz eth0 está sin direccionamiento, por lo que vamos a añadir la IP para luego poder eliminar la red-intra-pablo.Para ello, creamos el fichero /etc/NetworkManager/system-connections/dmz.nmconnection con la siguiente configuración:[connection]id=dmztype=ethernetinterface-name=eth0[ipv4]method=manualaddresses=172.16.0.200/16gateway=172.16.0.16dns=8.8.8.8;1.1.1.1[ipv6]method=ignoreSeguidamente reiniciamos los servicios:[pablo@zoro ~]$ sudo nmcli connection reload[pablo@zoro ~]$ sudo systemctl restart NetworkManager[pablo@zoro ~]$ sudo nmcli connection up dmzConnection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/4)Y ya tenemos dirección IP:[pablo@zoro ~]$ ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1442 qdisc fq_codel state UP group default qlen 1000    link/ether fa:16:3e:78:8b:9e brd ff:ff:ff:ff:ff:ff    altname enp0s3    altname ens3    inet 172.16.0.200/16 brd 172.16.255.255 scope global noprefixroute eth0       valid_lft forever preferred_lft forever    inet6 fe80::f816:3eff:fe78:8b9e/64 scope link        valid_lft forever preferred_lft forever3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1442 qdisc fq_codel state UP group default qlen 1000    link/ether fa:16:3e:87:ca:cd brd ff:ff:ff:ff:ff:ff    altname enp0s7    altname ens7    inet 10.0.200.244/24 brd 10.0.200.255 scope global dynamic noprefixroute eth1       valid_lft 43193sec preferred_lft 43193sec    inet6 fe80::7f34:f482:b58c:edcc/64 scope link noprefixroute        valid_lft forever preferred_lft foreverAhora, nos salimos de la instancia y revocamos la red-intra-pablo:pavlo@debian:~/OpenStack()$ openstack server remove network zoro red-intra-pabloMás tarde, modificamos el fichero ~/.ssh/config para que acceda con la nueva IP:Host luffy  HostName 172.22.200.100  User pablo  ForwardAgent yesHost zoro  HostName 172.16.0.200  User pablo  ForwardAgent yes  ProxyJump luffyY ya nos dejaría acceder:pavlo@debian:~/OpenStack()$ ssh zoro The authenticity of host '172.16.0.200 (&lt;no hostip for proxy command&gt;)' can't be established.ED25519 key fingerprint is SHA256:JrbuXBRRZ4JoLGdRCCiKNThDEKWqINQtX2NVLKP7Gvo.This host key is known by the following other names/addresses:    ~/.ssh/known_hosts:421: [hashed name]    ~/.ssh/known_hosts:424: [hashed name]Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added '172.16.0.200' (ED25519) to the list of known hosts.Last login: Thu Dec 12 08:30:57 2024 from 10.0.200.231[pablo@zoro ~]$Antes de probar la conexión a Internet debemos deshabilitar la seguridad de los puertos para que el NAT funcione correctamente:pavlo@debian:~/OpenStack()$ openstack port list --server zoro+--------------------------------------+-------------+-------------------+-----------------------------------------------------------------------------+--------+| ID                                   | Name        | MAC Address       | Fixed IP Addresses                                                          | Status |+--------------------------------------+-------------+-------------------+-----------------------------------------------------------------------------+--------+| 3dd6bcc3-0c30-4f37-ae10-3d70767efff1 | puerto-zoro | fa:16:3e:78:8b:9e | ip_address='172.16.0.200', subnet_id='450496f9-646a-42a4-9a8e-b07b5b3a992d' | ACTIVE |+--------------------------------------+-------------+-------------------+-----------------------------------------------------------------------------+--------+pavlo@debian:~/OpenStack()$ openstack port set 3dd6bcc3-0c30-4f37-ae10-3d70767efff1 --no-security-group --disable-port-securityPudiendo de esta forma acceder a Internet:[pablo@zoro ~]$ ping -c 4 8.8.8.8PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.64 bytes from 8.8.8.8: icmp_seq=1 ttl=103 time=18.0 ms64 bytes from 8.8.8.8: icmp_seq=2 ttl=103 time=17.8 ms64 bytes from 8.8.8.8: icmp_seq=3 ttl=103 time=17.6 ms64 bytes from 8.8.8.8: icmp_seq=4 ttl=103 time=17.1 ms--- 8.8.8.8 ping statistics ---4 packets transmitted, 4 received, 0% packet loss, time 3005msrtt min/avg/max/mdev = 17.086/17.607/17.958/0.325 msYa habríamos terminado la primera parte del escenario de OpenStack, quedando la topología de la siguiente forma:Si queremos hacer algunas comprobaciones como por ejemplo acceder a los FQDN del otro, tendremos que configurar los /etc/hosts:pablo@luffy:~$ cat /etc/hosts127.0.0.1\tlocalhost::1\t\tlocalhost ip6-localhost ip6-loopbackff02::1\t\tip6-allnodesff02::2\t\tip6-allrouters172.16.0.16 luffy.pablo.gonzalonazareno.org luffy172.16.0.200 zoro.pablo.gonzalonazareno.org zoro[pablo@zoro ~]$ cat /etc/hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6172.16.0.16 luffy.pablo.gonzalonazareno.org luffy172.16.0.200 zoro.pablo.gonzalonazareno.org zoroDe forma que tenemos conectividad entre ambos:pablo@luffy:~$ ping -c 2 zoro.pablo.gonzalonazareno.org PING zoro.pablo.gonzalonazareno.org (172.16.0.200) 56(84) bytes of data.64 bytes from zoro.pablo.gonzalonazareno.org (172.16.0.200): icmp_seq=1 ttl=64 time=2.40 ms64 bytes from zoro.pablo.gonzalonazareno.org (172.16.0.200): icmp_seq=2 ttl=64 time=0.510 ms--- zoro.pablo.gonzalonazareno.org ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1002msrtt min/avg/max/mdev = 0.510/1.457/2.404/0.947 ms[pablo@zoro ~]$ ping -c 2 luffy.pablo.gonzalonazareno.orgPING luffy.pablo.gonzalonazareno.org (172.16.0.16) 56(84) bytes of data.64 bytes from luffy.pablo.gonzalonazareno.org (172.16.0.16): icmp_seq=1 ttl=64 time=0.218 ms64 bytes from luffy.pablo.gonzalonazareno.org (172.16.0.16): icmp_seq=2 ttl=64 time=0.441 ms--- luffy.pablo.gonzalonazareno.org ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1026msrtt min/avg/max/mdev = 0.218/0.329/0.441/0.111 msPor último, podemos ver que tenemos conectividad a Internet en ambas máquinas:pablo@luffy:~$ ping -c 2 google.comPING google.com (142.250.186.78) 56(84) bytes of data.64 bytes from fra24s05-in-f14.1e100.net (142.250.186.78): icmp_seq=1 ttl=101 time=40.0 ms64 bytes from fra24s05-in-f14.1e100.net (142.250.186.78): icmp_seq=2 ttl=101 time=38.2 ms--- google.com ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1002msrtt min/avg/max/mdev = 38.183/39.114/40.045/0.931 ms[pablo@zoro ~]$ ping -c 2 google.comPING google.com (142.250.186.78) 56(84) bytes of data.64 bytes from fra24s05-in-f14.1e100.net (142.250.186.78): icmp_seq=1 ttl=100 time=40.4 ms64 bytes from fra24s05-in-f14.1e100.net (142.250.186.78): icmp_seq=2 ttl=100 time=37.1 ms--- google.com ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1001msrtt min/avg/max/mdev = 37.124/38.739/40.355/1.615 msPráctica (2 / 2): Escenario en OpenStackInstalación de los contenedoresEn máquina1 (luffy) vamos a crear dos contenedores en un red interna, para ello:  Crea en máquina1 (luffy) un linux bridge llamado br-intra (no lo hagas con virsh ya que se configura una reglas de cortafuego muy estrictas) y asigna una dirección IP estática 192.168.0.1. Esta será la IP de máquina1 (luffy) conectada a este switch virtual y será la puerta de enlace de los contenedores. Tienes que tener en cuenta que la imagen de Debian 12 Bookworm de OpenStack tiene netplan para la configuración de las redes, por lo tanto tienes que configurar el bridge usando el fichero de configuración de netplan, para ello te puede ser útil esta página. No olvides poner la mtu a 1442 al crear el bridge.Para crear el puente tendremos que modificar la configuración del fichero netplan, en donde añadiremos las siguientes líneas:bridges:      br-intra:        addresses: [192.168.0.1/24]        mtu: 1442        dhcp4: no        dhcp6: no        nameservers:          addresses: [172.22.0.1]Una vez añadido, aplicamos los cambios:pablo@luffy:~$ sudo netplan generatepablo@luffy:~$ sudo netplan apply  Instala LXC y crea dos contenedores con la distribución Ubuntu 22.04. Estos contenedores serán la máquina3 (nami) y la máquina4 (sanji).Para instalar LXC ejecutamos el siguiente comando:pablo@luffy:~$ sudo apt install lxcUna vez instalado, pasamos a instalar los contenedores:  Namipablo@luffy:~$ sudo lxc-create -n nami -t ubuntu -- -r jammy  Sanjipablo@luffy:~$ sudo lxc-create -n sanji -t ubuntu -- -r jammy  Configura de forma permanente la regla SNAT para que los contenedores tengan acceso a internet.Para ello es tan simple como añadir la siguiente regla:pablo@luffy:~$ sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o ens3 -j MASQUERADEImportante hacer las reglas persistentes para posibles futuros reinicios:pablo@luffy:~$ sudo -iroot@luffy:~# iptables-save &gt; /etc/iptables/rules.v4root@luffy:~# exitlogout  Conecta los contenedores al bridge br-intra y configúralo de forma estática con las siguientes direcciones: máquina3 (nami) la 192.168.0.2 y máquina4 (sanji) la 192.168.0.3. Su DNS será el 172.22.0.1.Para la configuración de red modificaremos el fichero /var/lib/lxc/nombrecontenedor/config, quedando de la siguiente forma:pablo@luffy:~$ sudo cat /var/lib/lxc/nami/config# Template used to create this container: /usr/share/lxc/templates/lxc-ubuntu# Parameters passed to the template: -r jammy# For additional config options, please look at lxc.container.conf(5)# Uncomment the following line to support nesting containers:#lxc.include = /usr/share/lxc/config/nesting.conf# (Be aware this has security implications)# Common configurationlxc.include = /usr/share/lxc/config/ubuntu.common.conf# Container specific configurationlxc.apparmor.profile = generatedlxc.apparmor.allow_nesting = 1lxc.rootfs.path = dir:/var/lib/lxc/nami/rootfslxc.uts.name = namilxc.arch = amd64# Network configurationlxc.net.0.type = vethlxc.net.0.hwaddr = 00:16:3e:40:e4:dalxc.net.0.link = br-intralxc.net.0.flags = uplxc.net.0.ipv4.address = 192.168.0.2/24lxc.net.0.ipv4.gateway = 192.168.0.1Los DNS debemos configurarlos dentro del contenedor, para ello:root@nami:/# rm /etc/resolv.confroot@nami:/# echo -e \"nameserver 172.22.0.1\\nnameserver 8.8.8.8\" &gt; /etc/resolv.confroot@nami:/# cat /etc/resolv.conf nameserver 172.22.0.1nameserver 8.8.8.8En sanji añadimos prácticamente la misma configuración:# Network configurationlxc.net.0.type = vethlxc.net.0.hwaddr = 00:16:3e:c5:5c:70lxc.net.0.link = br-intralxc.net.0.flags = uplxc.net.0.ipv4.address = 192.168.0.3/24lxc.net.0.ipv4.gateway = 192.168.0.1Antes de acceder tenemos que iniciar los contenedores:pablo@luffy:~$ sudo lxc-start namipablo@luffy:~$ sudo lxc-start sanji  Para que la red de OpenStack funcione de forma adecuada las imágenes que usamos tienen configurado la mtu (Unidad máxima de transferencia) a 1442 bytes. Tenemos que adecuar los contenedores a este tamaño de trama. Para ello introduce en la configuración de los contenedores la línea: lxc.net.0.mtu = 1442.Para ello tendremos que modificar el fichero config de ambos contenedores en donde añadimos esta línea:lxc.net.0.mtu = 1442Para aplicar los cambios apagamos y encendemos el contenedor:pablo@luffy:~$ sudo lxc-stop -n namipablo@luffy:~$ sudo lxc-start -n namipablo@luffy:~$ sudo lxc-stop -n sanjipablo@luffy:~$ sudo lxc-start -n sanji  Configura los contenedores para que se auto inicien al reiniciar la instancia.Para ello añadimos en el archivo config mencionado anteriormente la siguiente línea:lxc.start.auto = 1      Los contenedores tendrán características parecidas a las instancias anteriormente:          Debes actualizar los paquetes de la distribución instalada.        root@nami:/# apt update        root@sanji:/# apt update              El dominio utilizado será del tipo tunombre.gonzalonazareno.org. Por lo tanto configura de manera adecuada el hostname y el FQDN.        Nami    root@nami:/# cat /etc/hosts127.0.0.1   localhost127.0.1.1   nami.pablo.gonzalonazareno.org nami# The following lines are desirable for IPv6 capable hosts::1     ip6-localhost ip6-loopbackfe00::0 ip6-localnetff00::0 ip6-mcastprefixff02::1 ip6-allnodesff02::2 ip6-allrouters        Comprobamos:    root@nami:/# hostnamenamiroot@nami:/# hostname -fnami.pablo.gonzalonazareno.org        Sanji    root@sanji:/# cat /etc/hosts127.0.0.1   localhost127.0.1.1   sanji.pablo.gonzalonazareno.org sanji# The following lines are desirable for IPv6 capable hosts::1     ip6-localhost ip6-loopbackfe00::0 ip6-localnetff00::0 ip6-mcastprefixff02::1 ip6-allnodesff02::2 ip6-allrouters        Comprobamos:    root@sanji:/# hostnamesanjiroot@sanji:/# hostname -fsanji.pablo.gonzalonazareno.org                      Para acceder a los contenedores vamos a usar ssh.                    Crea dos usuarios:                  Un usuario sin privilegios. Se puede llamar como quieras (el nombre de usuario que usaste en las instancias) y accederás a los contenedores usando tu clave ssh privada.                root@nami:/# useradd -m -s /bin/bash pablo                root@sanji:/# useradd -m -s /bin/bash pablo                Luego, en ambos contenedores añadimos nuestra clave pública dentro del authorized_keys:        root@sanji:/# su - pablopablo@sanji:~$ mkdir -p /home/pablo/.sshpablo@sanji:~$ echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQClFcnIhYd1oaEpvGi/f4psQc4+DaAZvSNIxVRRJHtRoJui8wbJybi3Om8yTOflgEcmBaUrJLkfmzmWqVq1j6MpESq72p7J2hdq2lXnvzdt3huYv5evFwyd0p/r72RfpVZzr3ILi/BS//SJqfVKlDEVbZRaOE5MU2XuElmFFY4EO7NiiZAkbatVqUOT8H/nrfXcad0mjZVxroVqHhsHV+06rxiB0xifG0xZv204Qj4zRura8uqZlEVAAwU+NO/SIGdRwpLY7n7xbQGe1DbjHgPUeVPjJX6HpMK41a43eGj4XYdYtZBLugaU8Mq1y6Kl3tE6cvYkQ9WFTYTLLNy3bvNRZpP2p6qAy5qn03ZLFICiXBNXPmrl5+KVrKaSipNaPHkmInvczbYJjXpfyVBsfEabt+0Y1629M+eEKkkl+iZmVr2ySDSS1gHxMC7zlJRaUhG27o26agpNPYPHH3mVXVjqdGg0ryH0YHZk1V8+Gt1Z9hZ7UYWE1UX8DCgFfecqdX0= pavlo@debian &gt; /home/pablo/.ssh/authorized_keyspablo@sanji:~$ chown -R pablo:pablo /home/pablo/.sshpablo@sanji:~$ chmod 700 /home/pablo/.sshpablo@sanji:~$ chmod 600 /home/pablo/.ssh/authorized_keys                Modificamos también el fichero /etc/sudoers para que no pida contraseña a mi usuario pablo:        # User privilege specificationroot    ALL=(ALL:ALL) ALLpablo   ALL=(ALL) NOPASSWD:ALL                          Un usuario profesor, que puede utilizar sudo sin contraseña. Copia de las claves públicas de todos los profesores en los contenedores para que puedan acceder con el usuario profesor.                Añadimos el usuario en ambos contenedores:        root@nami:~# useradd -m -s /bin/bash profesor                root@sanji:~# useradd -m -s /bin/bash profesor                Y repetimos el mismo proceso que anteriormente.                  Cambia la contraseña al usuario root.  root@nami:~# passwd rootNew password: Retype new password: passwd: password updated successfullyYa está todo configurado, solo nos quedaría crear los accesos por ssh, para ello en el fichero ~/.ssh/config añadimos lo siguiente:pavlo@debian:~()$ cat .ssh/config Host luffy  HostName 172.22.200.100  User pablo  ForwardAgent yesHost zoro  HostName 172.16.0.200  User pablo  ForwardAgent yes  ProxyJump luffyHost nami  HostName 192.168.0.2  User pablo  ForwardAgent yes  ProxyJump luffyHost sanji  HostName 192.168.0.3  User pablo  ForwardAgent yes  ProxyJump luffyDe esta forma, desde nuestro host principal podemos acceder a todas las máquinas, incluyendo los contenedores:pavlo@debian:~()$ ssh namiWelcome to Ubuntu 22.04.5 LTS (GNU/Linux 6.1.0-28-amd64 x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/proLast login: Mon Dec 16 10:54:43 2024 from 192.168.0.1pablo@nami:~$ logoutConnection to 192.168.0.2 closed.pavlo@debian:~()$ ssh sanjiWelcome to Ubuntu 22.04.5 LTS (GNU/Linux 6.1.0-28-amd64 x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/proLast login: Mon Dec 16 10:49:30 2024 from 192.168.0.1pablo@sanji:~$Otras comprobaciones que podemos hacer:  La salida del comando sudo lxc-ls -f.pablo@luffy:~$ sudo lxc-ls -fNAME  STATE   AUTOSTART GROUPS IPV4        IPV6 UNPRIVILEGED nami  RUNNING 0         -      192.168.0.2 -    false        sanji RUNNING 1         -      192.168.0.3 -    false  Prueba de funcionamiento de que los contenedores tienen acceso a internet accediendo a un nombre de dominio, para comprobar que funciona el DNS.pavlo@debian:~()$ ssh namiWelcome to Ubuntu 22.04.5 LTS (GNU/Linux 6.1.0-28-amd64 x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/proLast login: Mon Dec 16 10:57:54 2024 from 192.168.0.1pablo@nami:~$ ping -c 2 www.google.esPING www.google.es (142.250.186.163) 56(84) bytes of data.64 bytes from fra24s08-in-f3.1e100.net (142.250.186.163): icmp_seq=1 ttl=100 time=51.8 ms64 bytes from fra24s08-in-f3.1e100.net (142.250.186.163): icmp_seq=2 ttl=100 time=38.7 ms--- www.google.es ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1001msrtt min/avg/max/mdev = 38.722/45.277/51.832/6.555 mspavlo@debian:~()$ ssh sanjiWelcome to Ubuntu 22.04.5 LTS (GNU/Linux 6.1.0-28-amd64 x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/proLast login: Mon Dec 16 10:57:59 2024 from 192.168.0.1pablo@sanji:~$ ping -c 2 www.youtube.comPING youtube-ui.l.google.com (216.58.206.78) 56(84) bytes of data.64 bytes from lhr35s11-in-f14.1e100.net (216.58.206.78): icmp_seq=1 ttl=99 time=43.6 ms64 bytes from tzfraa-aa-in-f14.1e100.net (216.58.206.78): icmp_seq=2 ttl=99 time=42.9 ms--- youtube-ui.l.google.com ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1002msrtt min/avg/max/mdev = 42.871/43.247/43.624/0.376 msFinalmente comprueba que todo el escenario está funcionando después de reiniciar la máquina1 (luffy):pablo@luffy:~$ sudo rebootBroadcast message from root@luffy on pts/1 (Mon 2024-12-16 11:15:21 UTC):The system will reboot now!pablo@luffy:~$ Connection to 172.22.200.100 closed by remote host.Connection to 172.22.200.100 closed.pavlo@debian:~()$ ssh namiWelcome to Ubuntu 22.04.5 LTS (GNU/Linux 6.1.0-28-amd64 x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/proLast login: Mon Dec 16 11:01:53 2024 from 192.168.0.1pablo@nami:~$ logoutConnection to 192.168.0.2 closed.pavlo@debian:~()$ ssh sanjiWelcome to Ubuntu 22.04.5 LTS (GNU/Linux 6.1.0-28-amd64 x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/proLast login: Mon Dec 16 11:13:31 2024 from 192.168.0.1pablo@sanji:~$ logoutConnection to 192.168.0.3 closed."
  },
  
  {
    "title": "Instalación de Oracle 19c en Debian 12",
    "url": "/posts/instalacion-oracle19c/",
    "categories": "Base de Datos, Instalación",
    "tags": "Instalación",
    "date": "2024-11-15 18:15:00 +0100",
    





    
    "snippet": "IntroducciónEn este post, voy a detallar el proceso de instalación de Oracle 19c en una máquina virtual con Debian 12, utilizando QEMU/KVM como plataforma de virtualización. Para este tipo de insta...",
    "content": "IntroducciónEn este post, voy a detallar el proceso de instalación de Oracle 19c en una máquina virtual con Debian 12, utilizando QEMU/KVM como plataforma de virtualización. Para este tipo de instalación, es fundamental asegurarse de que la máquina virtual tenga recursos suficientes para que Oracle funcione correctamente. En este caso, se recomienda asignar al menos 4096 MB de memoria RAM, 4 núcleos de procesador (cores) y 40 GB de almacenamiento. Estos recursos permitirán que la base de datos funcione de manera estable, incluso en entornos de prueba o desarrollo.La máquina virtual se configurará con la red “default”, lo que le asignará automáticamente una dirección IP dentro del rango 192.168.122.x/24. Esta configuración de red es ideal para comunicaciones internas entre la máquina virtual y el sistema host, así como para facilitar la instalación y acceso remoto, si es necesario, sin complicaciones adicionales en cuanto a configuraciones de red. A continuación, explicaré detalladamente cómo configurar todo el entorno y proceder con la instalación de Oracle 19c paso a paso.InstalaciónEn este caso, se está configurando una red estática en la máquina virtual que va a hospedar Oracle 19c. Esta configuración es importante porque permite tener un control más preciso sobre la dirección IP de la máquina virtual, lo cual es crucial para garantizar que el sistema sea accesible y que la comunicación con otros dispositivos de la red no se vea interrumpida, especialmente cuando se trabaja con bases de datos como Oracle, que requieren un acceso constante y estable.Configuración de la interfaz de red estáticaEl archivo /etc/network/interfaces en Debian es el encargado de definir cómo se gestionan las interfaces de red. En este caso, se está configurando la interfaz de red enp1s0 con una dirección IP estática:pablo@oracle-server:~$ cat /etc/network/interfaces# This file describes the network interfaces available on your system# and how to activate them. For more information, see interfaces(5).source /etc/network/interfaces.d/*# The loopback network interfaceauto loiface lo inet loopback# The primary network interface#allow-hotplug enp1s0#iface enp1s0 inet dhcpauto enp1s0iface enp1s0 inet static\taddress 192.168.122.126\tnetmask 255.255.255.0\tgateway 192.168.122.1Configuración del archivo /etc/hostsEl archivo /etc/hosts se utiliza para mapear direcciones IP a nombres de host. En este caso, se ha añadido una entrada para la dirección IP estática que se configuró en el paso anterior, asociándola al nombre oracle-server:pablo@oracle-server:~$ cat /etc/hosts127.0.0.1\tlocalhost127.0.1.1\toracle-server# The following lines are desirable for IPv6 capable hosts::1     localhost ip6-localhost ip6-loopbackff02::1 ip6-allnodesff02::2 ip6-allrouters192.168.122.126\toracle-serverLa combinación de una red estática con la entrada en /etc/hosts garantiza que la máquina virtual siempre tendrá la misma dirección IP en la red y que será posible referenciarla mediante un nombre fácil de recordar, como oracle-server, tanto en la máquina virtual como en otros dispositivos o aplicaciones que necesiten comunicarse con ella.Cuando realizas una instalación de Oracle 19c en Debian 12, uno de los primeros pasos que debes hacer es asegurarte de que el sistema esté completamente actualizado y tenga todas las dependencias necesarias para que Oracle funcione sin problemas. Para ello, realizarás dos comandos importantes que explico a continuación:pablo@oracle-server:~$ sudo apt update &amp;&amp; sudo apt upgrade -yObj:1 http://deb.debian.org/debian bookworm InReleaseObj:2 http://security.debian.org/debian-security bookworm-security InReleaseObj:3 http://deb.debian.org/debian bookworm-updates InReleaseLeyendo lista de paquetes... HechoCreando árbol de dependencias... HechoLeyendo la información de estado... HechoTodos los paquetes están actualizados.Leyendo lista de paquetes... HechoCreando árbol de dependencias... HechoLeyendo la información de estado... HechoCalculando la actualización... Hecho0 actualizados, 0 nuevos se instalarán, 0 para eliminar y 0 no actualizados.E instalamos las dependencias necesarias:pablo@oracle-server:~$ sudo apt install libaio1 unixodbc bc ksh gawk -yEste comando instala una serie de paquetes necesarios para el funcionamiento de Oracle 19c. Cada uno de estos paquetes cumple una función específica dentro del entorno de Oracle y en la configuración del sistema:      libaio1: Este paquete instala las bibliotecas de entrada/salida asíncrona (AIO) necesarias para Oracle. Oracle utiliza AIO para realizar operaciones de lectura y escritura sin bloquear el proceso, lo que mejora el rendimiento de la base de datos. Este es un requisito fundamental para que Oracle funcione correctamente en el sistema.        unixodbc: Este paquete proporciona las bibliotecas y herramientas necesarias para gestionar la conectividad con bases de datos mediante ODBC (Open Database Connectivity). Aunque Oracle no siempre utiliza ODBC para la conectividad por defecto, algunas herramientas o configuraciones de Oracle pueden requerir este paquete para establecer conexiones a otras bases de datos o para ciertos procesos internos.        bc: Este paquete instala una calculadora de precisión arbitraria, que es útil en muchos scripts y procesos de Oracle. Se usa, por ejemplo, para realizar cálculos matemáticos en la configuración o en la ejecución de scripts de mantenimiento y automatización de la base de datos.        ksh: Este es el KornShell, un intérprete de comandos compatible con muchos de los scripts utilizados por Oracle. Aunque Oracle puede funcionar con otros shells, como bash, ciertos scripts y herramientas de Oracle requieren específicamente el KornShell para funcionar correctamente.        gawk: Este paquete instala la versión GNU de AWK, que es un potente lenguaje de programación utilizado para procesamiento de texto y manipulación de datos. Oracle utiliza AWK en muchos de sus scripts de configuración y mantenimiento, por lo que es necesario tenerlo instalado para que los scripts internos de Oracle se ejecuten correctamente.  Oracle utiliza un enfoque de administración basado en roles, por lo que es importante crear un grupo y un usuario específico para garantizar que el sistema esté organizado y que las tareas administrativas puedan realizarse de manera controlada. Para ello:pablo@oracle-server:~$ sudo groupadd dbapablo@oracle-server:~$ sudo adduser --ingroup dba --home /home/oracle --shell /bin/bash oracleAñadiendo el usuario `oracle' ...Adding new user `oracle' (1001) with group `dba (1001)' ...Creando el directorio personal `/home/oracle' ...Copiando los ficheros desde `/etc/skel' ...Nueva contraseña: Vuelva a escribir la nueva contraseña: passwd: contraseña actualizada correctamenteCambiando la información de usuario para oracleIntroduzca el nuevo valor, o pulse INTRO para usar el valor predeterminado\tNombre completo []: \tNúmero de habitación []: \tTeléfono del trabajo []: \tTeléfono de casa []: \tOtro []: ¿Es correcta la información? [S/n] Adding new user `oracle' to supplemental / extra groups `users' ...Añadiendo al usuario `oracle' al grupo `users' ...En este paso del proceso de instalación de Oracle 19c, es importante mencionar que, aunque Oracle ofrece soporte para varias distribuciones de Linux, no proporciona soporte oficial para Debian. Esto significa que no existe un paquete .deb directamente disponible para instalar Oracle en Debian. Sin embargo, existen formas de sortear este inconveniente.Obtención del fichero de instalaciónEl primer paso es descargar el archivo de instalación desde la página oficial de Oracle. Para ello, tendrás que acceder a la sección de descargas de Oracle en su sitio web, donde podrás encontrar el instalador correspondiente para Oracle 19c. Generalmente, Oracle proporciona el instalador en formato .rpm para sistemas basados en Red Hat, como CentOS o RHEL, pero no ofrece un paquete .deb directamente para Debian. Esto se debe a que Debian y sus derivados (como Ubuntu) utilizan un sistema de gestión de paquetes diferente, basado en el formato .deb.Conversión del paquete .rpm a .deb usando alienDado que Oracle no ofrece un paquete nativo de Debian, una de las opciones es utilizar una herramienta llamada alien para convertir el paquete .rpm (Red Hat Package Manager) a un formato .deb compatible con Debian.alien es una herramienta que permite convertir entre diferentes formatos de paquetes de Linux, incluyendo .rpm a .deb. Aunque la conversión no es perfecta en todos los casos, generalmente funciona bien para muchos paquetes.Para realizar la conversión, primero necesitas instalar alien en tu sistema Debian:sudo apt install alienUna vez instalado alien, puedes convertir el archivo .rpm a .deb con el siguiente comando:sudo alien -d oracle-database-ee-19c-1.0-1.x86_64.rpm  El parámetro -d le indica a alien que cree un paquete .deb. Este proceso generará un archivo .deb que podrás instalar de manera estándar en tu sistema Debian utilizando dpkg.Proceso ya realizadoComo ya he realizado esta conversión previamente, para aligerar el proceso, he subido el paquete .deb a un servicio de almacenamiento en la nube, como Mega, para que puedas descargarlo directamente sin necesidad de hacer la conversión tú mismo.Dejaré el link de descarga de este paquete .deb para que puedas instalar Oracle 19c sin complicaciones adicionales. Solo tendrás que descargar el archivo:MegaUna vez que hayas descargado el archivo .deb de Oracle 19c, el siguiente paso es transferir este fichero a la máquina virtual donde realizarás la instalación. Para ello, utilizaremos el comando scp (Secure Copy), que es una herramienta segura para transferir archivos entre sistemas a través de SSH.El comando que he utilizado es el siguiente:pavlo@debian:~()$ scp /home/pavlo/iso/oracle-database-ee-19c_1.0-2_amd64.deb pablo@192.168.122.126:/home/pablopablo@192.168.122.126's password: oracle-database-ee-19c_1.0-2_amd64.deb                                                                                                     100% 2409MB 101.4MB/s   00:23Y como podemos ver ya lo tenemos en nuestra máquina virtual:pablo@oracle-server:~$ lsoracle-database-ee-19c_1.0-2_amd64.debUna vez que hemos transferido el archivo .deb de Oracle Database 19c a nuestra máquina virtual, es hora de proceder con la instalación. Para ello, usaremos el comando dpkg, que es el gestor de paquetes estándar en Debian. Aquí te dejo cómo hacerlo.pablo@oracle-server:~$ sudo dpkg -i oracle-database-ee-19c_1.0-2_amd64.deb [sudo] contraseña para pablo: Seleccionando el paquete oracle-database-ee-19c previamente no seleccionado.(Leyendo la base de datos ... 34459 ficheros o directorios instalados actualmente.)Preparando para desempaquetar oracle-database-ee-19c_1.0-2_amd64.deb ...ln: fallo al crear el enlace simbólico '/bin/awk': El fichero ya existeDesempaquetando oracle-database-ee-19c (1.0-2) ...Configurando oracle-database-ee-19c (1.0-2) ...[INFO] Executing post installation scripts...[INFO] Oracle home installed successfully and ready to be configured.To configure a sample Oracle Database you can execute the following service configuration script as root: /etc/init.d/oracledb_ORCLCDB-19c configureProcesando disparadores para libc-bin (2.36-9+deb12u9) ...Una vez hecho esto, ya es hora de comenzar la instalación, pero antes recomiendo borrar el contenido del fichero /etc/init.d/oracledb_ORCLCDB-19c y añadir el siguiente contenido modificado:#!/bin/bash## chkconfig: 2345 80 05# Description: This script is responsible for taking care of configuring the Oracle Database and its associated services.## processname: oracledb_ORCLCDB-19c# Red Hat or SuSE config: /etc/sysconfig/oracledb_ORCLCDB-19c## Set path if path not setcase $PATH in    \"\") PATH=/bin:/usr/bin:/sbin:/etc         export PATH ;;esac# Check if the root user is running this scriptif [ $(id -u) != \"0\" ]then    echo \"You must be root user to run the configurations script. Login as root user and try again.\"    exit 1fi# Setting the required environment variablesexport ORACLE_HOME=/opt/oracle/product/19c/dbhome_1export ORACLE_VERSION=19c export ORACLE_SID=ORCLCDBexport TEMPLATE_NAME=General_Purpose.dbcexport CHARSET=AL32UTF8export PDB_NAME=ORCLPDB1export LISTENER_NAME=LISTENERexport NUMBER_OF_PDBS=1export CREATE_AS_CDB=true# General exports and varsexport PATH=$ORACLE_HOME/bin:$PATHLSNR=$ORACLE_HOME/bin/lsnrctlSQLPLUS=$ORACLE_HOME/bin/sqlplusDBCA=$ORACLE_HOME/bin/dbcaNETCA=$ORACLE_HOME/bin/netcaORACLE_OWNER=oracleRETVAL=0CONFIG_NAME=\"oracledb_$ORACLE_SID-$ORACLE_VERSION.conf\"CONFIGURATION=\"/etc/sysconfig/$CONFIG_NAME\"# Commandsif [ -z \"$SU\" ];then SU=/bin/su; fiif [ -z \"$GREP\" ]; then GREP=/usr/bin/grep; fiif [ ! -f \"$GREP\" ]; then GREP=/bin/grep; fi# To start the DBstart(){    check_for_configuration    RETVAL=$?    if [ $RETVAL -eq 1 ]    then        echo \"The Oracle Database is not configured. You must run '/etc/init.d/oracledb_$ORACLE_SID-$ORACLE_VERSION configure' as the root user to configure the database.\"        exit    fi    # Check if the DB is already started    pmon=ps -ef | egrep pmon_$ORACLE_SID'\\&gt;' | $GREP -v grep    if [ \"$pmon\" = \"\" ];    then        # Unset the proxy env vars before calling sqlplus        unset_proxy_vars        echo \"Starting Oracle Net Listener.\"        $SU -s /bin/bash $ORACLE_OWNER -c \"$LSNR  start $LISTENER_NAME\" &gt; /dev/null 2&gt;&amp;1        RETVAL=$?        if [ $RETVAL -eq 0 ]        then            echo \"Oracle Net Listener started.\"        fi        echo \"Starting Oracle Database instance $ORACLE_SID.\"        $SU -s /bin/bash  $ORACLE_OWNER -c \"$SQLPLUS -s /nolog &lt;&lt; EOF                                                                connect / as sysdba                                                                startup                                                                alter pluggable database all open                                                                exit;                                                                EOF\" &gt; /dev/null 2&gt;&amp;1        RETVAL1=$?        if [ $RETVAL1 -eq 0 ]        then            echo \"Oracle Database instance $ORACLE_SID started.\"        fi    else        echo \"The Oracle Database instance $ORACLE_SID is already started.\"        exit 0    fi    echo    if [ $RETVAL -eq 0 ] &amp;&amp; [ $RETVAL1 -eq 0 ]    then        return 0     else        echo \"Failed to start Oracle Net Listener using $ORACLE_HOME/bin/tnslsnr and Oracle Database using $ORACLE_HOME/bin/sqlplus.\"        exit 1    fi}# To stop the DBstop(){    check_for_configuration    RETVAL=$?    if [ $RETVAL -eq 1 ]    then        echo \"The Oracle Database is not configured. You must run '/etc/init.d/oracledb_$ORACLE_SID-$ORACLE_VERSION configure' as the root user to configure the database.\"        exit 1    fi    # Check if the DB is already stopped    pmon=ps -ef | egrep pmon_$ORACLE_SID'\\&gt;' | $GREP -v grep    if [ \"$pmon\" = \"\" ]    then        echo \"Oracle Database instance $ORACLE_SID is already stopped.\"        exit 1    else        # Unset the proxy env vars before calling sqlplus        unset_proxy_vars        echo \"Shutting down Oracle Database instance $ORACLE_SID.\"        $SU -s /bin/bash $ORACLE_OWNER -c \"$SQLPLUS -s /nolog &lt;&lt; EOF                                                                connect / as sysdba                                                                shutdown immediate                                                                exit;                                                                EOF\" &gt; /dev/null 2&gt;&amp;1        RETVAL=$?        if [ $RETVAL -eq 0 ]        then            echo \"Oracle Database instance $ORACLE_SID shut down.\"        fi        echo \"Stopping Oracle Net Listener.\"        $SU -s /bin/bash  $ORACLE_OWNER -c \"$LSNR stop $LISTENER_NAME\" &gt; /dev/null 2&gt;&amp;1        RETVAL1=$?        if [ $RETVAL1 -eq 0 ]        then            echo \"Oracle Net Listener stopped.\"        fi    fi    echo    if [ $RETVAL -eq 0 ] &amp;&amp; [ $RETVAL1 -eq 0 ]    then        return 0    else        echo \"Failed to stop Oracle Net Listener using $ORACLE_HOME/bin/tnslsnr and Oracle Database using $ORACLE_HOME/bin/sqlplus.\"        exit 1    fi}# To call DBCA to configure the DBconfigure_perform(){    # Unset the proxy env vars before calling dbca    unset_proxy_vars    echo \"Configuring Oracle Database $ORACLE_SID.\"    # Add the -J-Doracle.assistants.dbca.validate.ConfigurationParams=false to bypass the memory validation error    $SU -s /bin/bash  $ORACLE_OWNER -c \"$DBCA -silent -createDatabase -gdbName $ORACLE_SID -templateName $TEMPLATE_NAME -characterSet $CHARSET -createAsContainerDatabase $CREATE_AS_CDB -numberOfPDBs $NUMBER_OF_PDBS -pdbName $PDB_NAME -createListener $LISTENER_NAME:$LISTENER_PORT -datafileDestination $ORACLE_DATA_LOCATION -sid $ORACLE_SID -autoGeneratePasswords -emConfiguration DBEXPRESS -emExpressPort $EM_EXPRESS_PORT -J-Doracle.assistants.dbca.validate.ConfigurationParams=false\"    RETVAL=$?    echo    if [ $RETVAL -eq 0 ]    then        echo \"Database configuration completed successfully. The passwords were auto generated, you must change them by connecting to the database using 'sqlplus / as sysdba' as the oracle user.\"        return 0    else        echo \"Database configuration failed.\"        exit 1    fi}# Enh 27965939 - Unsets the proxy env variablesunset_proxy_vars(){    if [ \"$http_proxy\" != \"\" ]    then        unset http_proxy    fi    if [ \"$HTTP_PROXY\" != \"\" ]    then        unset HTTP_PROXY    fi    if [ \"$https_proxy\" != \"\" ]    then        unset https_proxy    fi    if [ \"$HTTPS_PROXY\" != \"\" ]    then        unset HTTPS_PROXY    fi}# Check if the DB is already configuredcheck_for_configuration(){    configfile=$GREP --no-messages $ORACLE_SID:$ORACLE_HOME /etc/oratab &gt; /dev/null 2&gt;&amp;1    if [ \"$configfile\" = \"\" ]    then        return 1    fi    return 0}read_config_file(){    if [ -f \"$CONFIGURATION\" ]    then        . \"$CONFIGURATION\"    else        echo \"The Oracle Database is not configured. Unable to read the configuration file '$CONFIGURATION'\"        exit 1;    fi}# Entry point to configure the DBconfigure(){    check_for_configuration    RETVAL=$?    if [ $RETVAL -eq 0 ]    then        echo \"Oracle Database instance $ORACLE_SID is already configured.\"        exit 1    fi    read_config_file    check_port_availability    check_em_express_port_availability    configure_perform}check_port_availability(){    port=netstat -n --tcp --listen | $GREP :$LISTENER_PORT    if [ \"$port\" != \"\" ]    then        echo \"Port $LISTENER_PORT appears to be in use by another application. Specify a different port in the configuration file.\"        exit 1    fi}check_em_express_port_availability(){    port=netstat -n --tcp --listen | $GREP :$EM_EXPRESS_PORT    if [ \"$port\" != \"\" ]    then        echo \"Port $EM_EXPRESS_PORT appears to be in use by another application. Specify a different port in the configuration file.\"        exit 1    fi}case \"$1\" in    start)        start        ;;    stop)        stop        ;;    restart)        stop        start        ;;    configure)        configure        ;;    *)        echo \"Usage: $0 {start|stop|restart|configure}\"        exit 1esacEsto es porque por defecto el contenido del script del fichero configure me daba problemas, por lo que con estas modificaciones me funciona correctamente.Ahora, ya solo nos queda ejecutar el comando de la instalación y esperar. Este proceso puede tardar varios minutos.pablo@oracle-server:~$ sudo /etc/init.d/oracledb_ORCLCDB-19c configure/etc/init.d/oracledb_ORCLCDB-19c: línea 243: -n: orden no encontrada/etc/init.d/oracledb_ORCLCDB-19c: línea 253: -n: orden no encontradaConfiguring Oracle Database ORCLCDB.Preparar para funcionamiento de base de datos8% finalizadoCopiando archivos de base de datos31% finalizadoCreando e iniciando instancia Oracle32% finalizado36% finalizado40% finalizado43% finalizado46% finalizadoTerminando creación de base de datos51% finalizado54% finalizadoCreando Bases de Datos de Conexión58% finalizado77% finalizadoEjecutando acciones posteriores a la configuración100% finalizadoCreación de la base de datos terminada. Consulte los archivos log de /opt/oracle/cfgtoollogs/dbca/ORCLCDB para obtener más información.Información de Base de Datos:Nombre de la Base de Datos Global:ORCLCDBIdentificador del Sistema (SID):ORCLCDBPara obtener información detallada, consulte el archivo log \"/opt/oracle/cfgtoollogs/dbca/ORCLCDB/ORCLCDB.log\".Database configuration completed successfully. The passwords were auto generated, you must change them by connecting to the database using 'sqlplus / as sysdba' as the oracle user.ConfiguraciónAl finalizar la ejecución del script de configuración de Oracle Database, se indica que la base de datos ha sido configurada exitosamente. Sin embargo, antes de poder usar Oracle como el usuario oracle, es necesario configurar las variables de entorno adecuadas para garantizar que el sistema pueda encontrar las herramientas y archivos correctos de Oracle. Estas variables definen el entorno en el que Oracle se ejecuta, y se deben configurar correctamente para que los comandos de Oracle funcionen sin problemas. Por lo tanto, nos cambiamos al usuario oracle y en el fichero ~/.bashrc añadimos las variables al final:pablo@oracle-server:~$ sudo su - oracleoracle@oracle-server:~$ tail -6 ~/.bashrc #Oracle environmentsexport ORACLE_HOME=/opt/oracle/product/19c/dbhome_1export ORACLE_SID=ORCLCDBexport ORACLE_BASE=/opt/oracleexport PATH=$ORACLE_HOME/bin:$PATHexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATHoracle@oracle-server:~$ source ~/.bashrcUna vez que hemos añadido las variables de entorno necesarias en el archivo .bashrc del usuario oracle y hemos recargado dicho archivo, las herramientas de Oracle deberían estar completamente configuradas para su uso. Esto nos permite acceder a la base de datos utilizando comandos como sqlplus, que es la herramienta de línea de comandos de Oracle para interactuar con la base de datos.oracle@oracle-server:~$ sqlplus / as sysdbaSQL*Plus: Release 19.0.0.0.0 - Production on Tue Nov 19 13:33:37 2024Version 19.3.0.0.0Copyright (c) 1982, 2019, Oracle.  All rights reserved.Conectado a:Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - ProductionVersion 19.3.0.0.0SQL&gt;💡 Tip: El comando rlwrap es una herramienta muy útil que mejora la experiencia de uso de programas de línea de comandos que no tienen soporte nativo para edición de texto o historial de comandos. En el contexto de Oracle y herramientas como SQL*Plus, rlwrap puede ser un gran aliado al proporcionar características de edición y autocompletado que, de otra manera, no estarían disponibles.Primero de todo lo instalamos:oracle@oracle-server:~$ sudo apt install rlwrapPara aprovechar la funcionalidad de rlwrap de manera automática cada vez que iniciemos SQLPlus, podemos añadir el comando rlwrap a las variables de entorno del usuario oracle. Esto hará que SQLPlus siempre se ejecute con las ventajas de rlwrap, sin tener que escribir el comando completo cada vez. Por lo tanto, en el ~/.bashrc añadimos la siguiente línea:alias sqlplus='rlwrap sqlplus'Recargamos:oracle@oracle-server:~$ source ~/.bashrcY ahora cada vez que accedamos a la terminal de sqlplus lo tendremos a modo terminal, donde podremos recuperar comandos, hacer Ctrl + l, etc.Añadir usuario principalEn el proceso de configuración de la base de datos Oracle, hemos visto que podemos acceder a la base de datos desde el usuario oracle, dado que previamente le otorgamos los permisos necesarios. Sin embargo, generalmente no vamos a querer realizar todas las tareas administrativas directamente desde el usuario oracle, ya que este es un usuario dedicado principalmente a gestionar Oracle, y preferimos usar nuestro propio usuario principal para interactuar con el sistema, a menos que se nos indique lo contrario.Para poder administrar la base de datos desde nuestro usuario principal, necesitamos agregarlo al grupo dba que creamos anteriormente. Esto nos permitirá tener acceso a las herramientas y permisos necesarios para gestionar Oracle como si fuéramos administradores, sin tener que cambiar de usuario constantemente.Además, debemos asegurarnos de que las variables de entorno relacionadas con Oracle estén configuradas correctamente en nuestro usuario principal, de manera que podamos acceder a las herramientas de Oracle (como SQL*Plus) y ejecutar comandos administrativos desde nuestro propio entorno de usuario.pablo@oracle-server:~$ sudo usermod -a -G dba pablo[sudo] contraseña para pablo: pablo@oracle-server:~$ sudo nano ~/.bashrcpablo@oracle-server:~$ source ~/.bashrcpablo@oracle-server:~$ sqlplus / as sysdbaSQL*Plus: Release 19.0.0.0.0 - Production on Tue Nov 19 13:49:52 2024Version 19.3.0.0.0Copyright (c) 1982, 2019, Oracle.  All rights reserved.Conectado a:Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - ProductionVersion 19.3.0.0.0SQL&gt; Creación de un usuario en Oracle 19cAl trabajar con Oracle Database, una de las tareas más comunes es la creación de usuarios. Sin embargo, en algunas configuraciones recientes, como la que estamos utilizando en Oracle 19c, puede surgir un error relacionado con el parámetro _ORACLE_SCRIPT. Aquí te explicamos cómo crear un usuario y cómo resolver este problema si aparece.Creación de un usuario en OraclePara crear un usuario en Oracle Database, seguimos estos pasos:Accedemos a la base de datos con privilegios de administrador utilizando SQL*Plus:pablo@oracle-server:~$ sqlplus / as sysdbaSQL*Plus: Release 19.0.0.0.0 - Production on Tue Nov 19 13:58:52 2024Version 19.3.0.0.0Copyright (c) 1982, 2019, Oracle.  All rights reserved.Conectado a:Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - ProductionVersion 19.3.0.0.0Y creamos el nuevo usuario:SQL&gt; CREATE USER pablo IDENTIFIED BY password;CREATE USER pablo IDENTIFIED BY password            *ERROR en linea 1:ORA-65096: nombre de usuario o rol comun no validoPero como podemos ver nos ha dado error. Este error ocurre porque Oracle 12c y versiones posteriores introdujeron el concepto de bases de datos multitenant, donde una única instancia puede contener múltiples bases de datos “pluggable” (PDB). De forma predeterminada, Oracle espera que los nombres de usuario sigan ciertas convenciones especiales para usuarios “comunes” que se compartan entre las bases de datos contenedoras (CDB) y las bases de datos pluggable (PDB).Si no estamos configurando un usuario común, sino uno específico para nuestra base de datos pluggable, necesitamos desactivar temporalmente esta restricción.Para solucionarlo tendremos que ejecutar el siguiente comando:ALTER SESSION SET \"_ORACLE_SCRIPT\"=TRUE;Y ya nos dejará crear el usuario sin problemas:SQL&gt; ALTER SESSION SET \"_ORACLE_SCRIPT\"=TRUE;Sesion modificada.SQL&gt; CREATE USER pablo IDENTIFIED BY password;Usuario creado.Le damos permisos para conectarnos:SQL&gt; GRANT CONNECT, RESOURCE TO pablo;Concesion terminada correctamente.Y probamos a conectarnos con el nuevo usuario:pablo@oracle-server:~$ sqlplus pablo/passwordSQL*Plus: Release 19.0.0.0.0 - Production on Tue Nov 19 14:05:34 2024Version 19.3.0.0.0Copyright (c) 1982, 2019, Oracle.  All rights reserved.Conectado a:Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - ProductionVersion 19.3.0.0.0SQL&gt;Con esto concluimos la instalación y configuración de Oracle Database 19c sobre una máquina virtual con Debian 12, utilizando QEMU/KVM como hipervisor. A lo largo de este proceso, hemos cubierto todos los aspectos necesarios para poner en marcha la base de datos, desde la configuración inicial del sistema operativo hasta los pasos específicos para preparar y personalizar el entorno de Oracle.Hemos abordado detalles importantes como la instalación de dependencias, la creación de usuarios y grupos, la gestión de variables de entorno y la resolución de errores comunes. Además, vimos cómo realizar tareas básicas de administración, como el acceso a SQL*Plus, la adición de usuarios y el uso de herramientas útiles como rlwrap para mejorar la experiencia en la línea de comandos."
  },
  
  {
    "title": "Instalación de WordPress en un servidor LEMP",
    "url": "/posts/instalacion-wordpress/",
    "categories": "Implantación Web, Aplicaciones",
    "tags": "Aplicaciones",
    "date": "2024-11-15 18:15:00 +0100",
    





    
    "snippet": "¿Qué vas a aprender en este taller?  Realizar la instalación de un servidor LEMP.  Configurar nginx como proxy inverso para pasar las peticiones PHP al servidor de aplicación fpm-php.  Realizar la ...",
    "content": "¿Qué vas a aprender en este taller?  Realizar la instalación de un servidor LEMP.  Configurar nginx como proxy inverso para pasar las peticiones PHP al servidor de aplicación fpm-php.  Realizar la instalación de un CMS PHP WordPress.Instalación de la pila LEMPEn este taller configuraremos una máquina virtual con Debian 12 y un servidor LEMP.¿Qué es LEMP?LEMP es un conjunto de software diseñado para alojar aplicaciones web dinámicas. A continuación, desglosamos sus componentes:  L: Linux, el sistema operativo base.  E: Nginx, el servidor web, conocido por su rendimiento y eficiencia. (Se pronuncia “Engine-X”)  M: MySQL o MariaDB, sistemas de gestión de bases de datos utilizados para almacenar información.  P: PHP, un lenguaje de programación para generar contenido dinámico en páginas web.Es una alternativa moderna al stack LAMP (que utiliza Apache como servidor web).Pasos para instalar la pila LEMP:Ejecuta el siguiente comando para instalar Nginx:pablo@debian:~$ sudo apt install nginx -yInstala MariaDB para gestionar las bases de datos necesarias:pablo@debian:~$ sudo apt install mariadb-server mariadb-client -yAgrega PHP y los módulos imprescindibles para que WordPress funcione correctamente:pablo@debian:~$ sudo apt install php-fpm php-mysql php-xml php-mbstring php-curl php-gd -yY listo, con estos pasos ya tendrás instalada y configurada la pila LEMP.Creación de la base de datosEn este paso, configuraremos la base de datos necesaria para WordPress. Esto incluye crear una base de datos específica, un usuario asociado y otorgarle los permisos necesarios. A continuación, te explico el proceso:1. Accede a la consola de MariaDB como usuario root, para ello ejecuta el siguiente comando en tu terminal:pablo@debian:~$ sudo mysql -u root -pIngresa la contraseña de root cuando se te solicite. Esto te llevará al monitor de MariaDB.2. Una vez dentro de MariaDB, ejecuta:CREATE DATABASE wordpress_db;Esto crea una base de datos llamada wordpress_db donde se almacenarán los datos de WordPress.3. Define un nuevo usuario y una contraseña para gestionar la base de datos. Por ejemplo:GRANT ALL PRIVILEGES ON wordpress_db.* TO 'user'@'localhost';  user: Nombre del usuario.  password: Contraseña asociada al usuario.4. Otorga todos los privilegios al usuario sobre la base de datos:GRANT ALL PRIVILEGES ON wordpress_db.* TO 'user'@'localhost';Permite al usuario user gestionar completamente la base de datos wordpress_db:5. Finalmente, actualiza los privilegios para asegurarte de que se registren correctamente:FLUSH PRIVILEGES;6. Sal del monitor de MariaDB:EXIT;Ahora tienes una base de datos llamada wordpress_db y un usuario user con todos los privilegios sobre ella. Estos datos serán utilizados durante la configuración de WordPress.Configurar un VirtualHost para WordPressEn este paso, crearemos y configuraremos un virtualhost en nginx para que el sitio web de WordPress sea accesible a través de un dominio local como wordpress.pablo.beer. A continuación, los pasos detallados:1. Crear el archivo de configuración del virtualhostEdita o crea un nuevo archivo de configuración en /etc/nginx/sites-available/ con el nombre del dominio deseado:pablo@debian:~$ sudo nano /etc/nginx/sites-available/wordpress.pablo.beerDentro del archivo, agrega la configuración:server {    listen 80;    server_name wordpress.pablo.beer;    root /var/www/wordpress;    index index.php index.html index.htm;    location / {        try_files $uri $uri/ /index.php?$args;    }    location ~ \\.php$ {        include snippets/fastcgi-php.conf;        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;    }    location ~ /\\.ht {        deny all;    }}2. Activar el VirtualHostCrea un enlace simbólico en el directorio sites-enabled para que nginx cargue esta configuración:pablo@debian:~$ sudo ln -s /etc/nginx/sites-available/wordpress.pablo.beer /etc/nginx/sites-enabled/3. Verificar la configuración de nginxAntes de reiniciar nginx, verifica que la configuración sea válida:pablo@debian:~$ sudo nginx -tSi todo está correcto, verás un mensaje indicando que la configuración es válida.4. Descargar WordPresspablo@debian:~$ cd /tmppablo@debian:/tmp$ wget https://wordpress.org/latest.zipDescomprime el archivo descargado:pablo@debian:/tmp$ sudo apt install unzippablo@debian:/tmp$ unzip latest.zip5. Mover WordPress a la ruta del servidor webMueve los archivos de WordPress al directorio especificado en la configuración del virtualhost (/var/www/wordpress):pablo@debian:/tmp$ sudo mv wordpress /var/www/wordpress6. Asignar permisos correctosAsegúrate de que los archivos y directorios tengan los permisos correctos:pablo@debian:~$ sudo chown -R www-data:www-data /var/www/wordpresspablo@debian:~$ sudo chmod -R 755 /var/www/wordpress7. Configurar el archivo hostsAñade el dominio local wordpress.pablo.beer en el archivo /etc/hosts de tu host principal (tu máquina física) para que el navegador lo reconozca. Edita el archivo de la siguiente manera:pavlo@debian:~()$ sudo nano /etc/hostsAgrega la línea:&lt;IP_Máquina_Virtual&gt;\twordpress.pablo.beer8. Reiniciar nginxReinicia el servicio para aplicar los cambios:pablo@debian:~$ sudo systemctl restart nginxAhora deberías poder acceder a WordPress escribiendo http://wordpress.pablo.beer en tu navegador. Desde ahí podrás completar la instalación de WordPress en el navegador.Instalación de WordPressUna vez configurado el servidor, el virtualhost y los permisos, es momento de acceder a la interfaz de instalación de WordPress y configurar el sitio. Aquí tienes los pasos detallados:Accede a la URL de instalaciónAbre tu navegador web y accede al dominio configurado en tu archivo /etc/hosts:http://wordpress.pablo.beerDeberías ver la pantalla inicial de configuración de WordPress:El instalador nos pide que elijamos un idioma para el sitio. Selecciona el deseado (por ejemplo, Español) y haz clic en Continuar.Configura la conexión con la base de datosEn la siguiente pantalla, deberás proporcionar los datos de conexión a la base de datos:  Nombre de la base de datos: wordpress_db (la base de datos que creaste).  Nombre de usuario: user (el usuario que configuraste).  Contraseña: La contraseña asignada al usuario.  Servidor de la base de datos: localhost.  Prefijo de tabla: Por defecto es wp_. Puedes cambiarlo si lo deseas, pero no es obligatorio.Haz clic en Enviar.Configura los datos del sitio webRellena el formulario con la información básica del sitio:  Título del sitio: El nombre de tu blog o página.  Nombre de usuario: El nombre para el administrador del sitio.  Contraseña: Una contraseña segura para el usuario administrador.  Correo electrónico: Un correo asociado al administrador.  Privacidad: Puedes elegir si deseas que los motores de búsqueda indexen tu sitio (puedes cambiar esto más adelante).Haz clic en Instalar WordPress.Accede al panel de administraciónCuando la instalación se complete, WordPress te redirigirá a la pantalla de inicio de sesión.Si queremos acceder al panel de administración lo haremos desde http://wordpress.pablo.beer/wp-admin. Ingresa tu nombre de usuario y contraseña creados en el paso anterior y ya estaríamos dentro.Primer blogUna vez dentro del panel de administración:  En el menú de la izquierda, haz clic en Entradas.  Luego, selecciona Añadir nueva.En la pantalla de creación de la entrada escribe el contenido de tu blog:  Título: Escribe un título para tu entrada, como por ejemplo Mi primera entrada en el blog.  Contenido: En el editor, puedes escribir el cuerpo de tu entrada. Puedes incluir texto, imágenes, enlaces, videos, etc.El editor de WordPress es muy intuitivo y funciona mediante bloques:  Haz clic en el botón + para añadir bloques como párrafos, encabezados, imágenes, etc.  Arrastra y organiza los bloques según necesites.Antes de publicar, puedes ajustar algunos parámetros:  Estado: Puedes guardar como borrador si no estás listo para publicarla.  Visibilidad: Define si la entrada será pública, privada o protegida con contraseña.  Publicación programada: Puedes programar la publicación para una fecha y hora futura.Cuando estés listo:  Haz clic en el botón Publicar en la parte superior derecha.  Confirma la publicación en el cuadro de diálogo que aparece.Tu entrada estará disponible en el blog y visible para los visitantes.Después de publicar, haz clic en el enlace Ver entrada para ver cómo se ve en tu sitio.Configurar URL amigables en WordPressLas URL amigables (también conocidas como “permalinks”) son direcciones web fáciles de leer y entender, lo que mejora la experiencia del usuario y también el SEO (posicionamiento en buscadores). En lugar de tener URLs como http://tu-sitio.com/?p=123, con URL amigables, las URLs serán algo como http://tu-sitio.com/mi-primera-entrada.Pasos para configurar URL amigables en WordPress1. Accede al panel de administración de WordPress. Abre tu navegador y accede a tu sitio de WordPress (por ejemplo: http://wordpress.tunombre.algo/wp-admin).2. Configura los enlaces permanentes.      En el menú lateral izquierdo, ve a Ajustes &gt; Enlaces permanentes.        Aquí verás diferentes opciones para configurar cómo se verán las URLs de tus entradas. Puedes elegir entre varias opciones como:                  Predeterminado: http://tu-sitio.com/?p=123                    Día y nombre: http://tu-sitio.com/2024/11/15/mi-primera-entrada                    Mes y nombre: http://tu-sitio.com/2024/11/mi-primera-entrada                    Nombre de la entrada: http://tu-sitio.com/mi-primera-entrada (más recomendado)                  Selecciona la opción Nombre de la entrada si deseas tener URLs amigables, y luego haz clic en Guardar cambios.  ¡Y eso es todo! Ahora tu sitio WordPress debería estar configurado para usar URL amigables, mejorando tanto la accesibilidad para los usuarios como el SEO. Con esta configuración, podrás disfrutar de una navegación más fluida y profesional.🚀"
  },
  
  {
    "title": "Comandos para programación de tareas",
    "url": "/posts/comandos-programacion/",
    "categories": "Sistemas, Automatización",
    "tags": "Automatización",
    "date": "2024-09-02 20:00:00 +0200",
    





    
    "snippet": "IntroducciónEn el entorno Linux, la programación de tareas es una habilidad fundamental que permite a los usuarios automatizar la ejecución de comandos y scripts en momentos específicos o en interv...",
    "content": "IntroducciónEn el entorno Linux, la programación de tareas es una habilidad fundamental que permite a los usuarios automatizar la ejecución de comandos y scripts en momentos específicos o en intervalos regulares. Esta capacidad no solo mejora la eficiencia, sino que también asegura que las tareas críticas se realicen sin intervención manual, lo que es especialmente útil para mantenimiento del sistema, copias de seguridad y actualizaciones programadas.Este post explorará los comandos más utilizados para programar tareas en Linux, tales como cron, at y systemd timers. Aprenderemos cómo configurarlos y utilizarlos de manera efectiva, proporcionando ejemplos prácticos que facilitarán la comprensión de su funcionamiento. Al final, tendrás las herramientas necesarias para automatizar tareas y optimizar tu flujo de trabajo en el sistema operativo Linux.1. SleepEl comando sleep en Linux se utiliza para pausar la ejecución de un proceso o script durante un período de tiempo especificado por el usuario. Este comando está disponible en todas las distribuciones de Linux, incluyendo Debian, y no requiere instalación adicional.Opciones y ParámetrosLas opciones más comunes para el comando sleep son:  -h o –help: Muestra información de ayuda sobre el comando sleep.  -v o –version: Muestra información sobre la versión del comando y detalles relacionados con su desarrollo.Los parámetros que se pueden utilizar con sleep para especificar el tiempo de pausa son:  s: Segundos (por defecto).  m: Minutos.  h: Horas.  d: Días.Es posible utilizar números enteros o decimales para especificar el tiempo de pausa.Ejemplos de UsoAquí hay algunos ejemplos de cómo se puede utilizar el comando sleep:  Pausar un proceso durante 10 segundos:  Pausar un proceso durante 2 minutos:  Pausar un proceso durante 1 hora y media:  Pausar un proceso durante 3 días:                             Pausar un proceso durante una combinación de tiempos (1 día, 2 horas, 3 minutos y 4 segundos):  Pausar un proceso durante 0.5 segundos (usando un número decimal):  Ejecutar varios comandos sleep de forma consecutiva o utilizar el operador &amp;&amp; para ejecutar otro comando después de sleep:  Este script se ejecutará en un bucle infinito, pero se pausará durante 10 minutos en cada iteración utilizando sleep.    echo \"Este script se ejecutará cada 10 minutos.\"while true; do# Comandos que deseas ejecutarsleep 10mdone      El comando sleep es especialmente útil en scripts de shell para introducir retrasosentre la ejecución de diferentes comandos, para reintentar operaciones fallidas después de un tiempo, o para esperar a que se cumplan ciertas condiciones, como la disponibilidad de una conexión de red.En resumen, sleep es una herramienta simple pero poderosa para controlar el flujode ejecución en scripts y procesos en sistemas operativos basados en Linux.2. WatchEl comando watch en Linux es una herramienta que permite a los usuariosmonitorizar continuamente los cambios en un archivo o el resultado de un comando en tiempo real. Este comando ejecuta otros comandos de forma repetitiva y muestra los resultados en tiempo real. Por defecto, watch ejecuta el comando especificado cada 2 segundos y muestra los resultados en la terminal.Opciones y ParámetrosLas opciones más comunes para el comando watch son:  -n segundos: Esta opción permite especificar el intervalo de tiempo en segundos entre cada ejecución del comando.  -d: Esta opción es usada para destacar las diferencias entre las actualizaciones  -t: Esta opción elimina el encabezado que muestra el intervalo, el comando y la hora actual  -g o –chgexit: Esta opción permite que watch termine la ejecución en el caso de que se haya modificado la salidaEjemplos de UsoAquí hay algunos ejemplos de cómo se puede utilizar el comando watch:  Monitorizar el uso de la memoria del servidor cada segundo:  Ejecutar el comando ls cada 5 segundos:  Resaltar las diferencias entre las actualizaciones al ejecutar el comando date:  Eliminar el encabezado al ejecutar el comando free:  Terminar la ejecución si el uso de memoria ha cambiado:  Observar el estado de la memoria con free, refrescando cada décima de segundo:  Observar las conexiones de red con netstat cada segundo:El comando watch es una herramienta muy útil para realizar monitorización en tiempo real en Linux, especialmente para observar la disponibilidad de recursos de red, CPU, memoria, entre otros.3. AtEl comando at en Linux es una herramienta que permite programar tareas únicas para que se ejecuten en un momento específico. Este comando es útil para programar tareas como apagar el sistema a una hora específica, realizar una copia de seguridad única, enviar un correo electrónico como recordatorio a la hora especificada, entre otras cosas.Opciones y ParámetrosLas opciones más comunes para el comando at son:  atq: Lista los trabajos programados.  atrm: Elimina trabajos programados. Se utiliza seguido del número detrabajo, por ejemplo, atrm.  at [hora] [fecha]: Programa una tarea para que se ejecute en la hora y fechaespecificadas.Ejemplos de UsoAquí hay algunos ejemplos de cómo se puede utilizar el comando at:  Programar una tarea para que se ejecute a las 10:00 PM:  Programar una tarea para que se ejecute a las 04:00 AM, copiando unarchivo, eliminándolo del directorio original y apagando el PC:    at 04:00cp /home/usuario/Escritorio/imagen.iso /home/usuario/isosrm /home/usuario/Escritorio/imagen.isoshutdown -h now        Luego presionar Ctrl + D para terminar de ingresar las instrucciones.    Listar los trabajos programados:                               Eliminar un trabajo programado, por ejemplo, el trabajo número 3:  Programar una tarea para que se ejecute a las 11:40 del 26 de febrero de 2023, listando los archivos en la ruta /tmp:    at 11:40 2023-02-26ls -ltr /tmp &gt; \"~/prueba_comando_at.txt\"echo 'finalizado ' &gt;&gt; \"~/prueba_comando_at.txt\"        Luego presionar ctrl + D para terminar de ingresar las instrucciones.  Ten en cuenta que para que el comando at funcione correctamente, lo tendremos que instalar con un sudo apt install at y debe estar corriendo el servicio atd (at daemon). Para habilitarlo en sistemas que usan systemd, puedes ejecutar: sudo systemctl enable –now atd.4. CrontabEl comando crontab en Linux es una herramienta que permite programar tareas para que se ejecuten automáticamente a intervalos regulares. Este comando es útil para automatizar tareas como realizar copias de seguridad, enviar correos electrónicos, limpiar directorios, entre otras cosas.Opciones y ParámetrosLas opciones más comunes para el comando crontab son:  crontab -e: Permite editar el archivo crontab del usuario actual.  crontab -l: Muestra la lista de trabajos programados para el usuario actual.  crontab -r: Elimina todos los trabajos programados para el usuario actual.  crontab -u [usuario] -e: Permite editar el archivo crontab de otro usuario (requiere privilegios de superusuario).Ejemplos de UsoAquí hay algunos ejemplos de cómo se puede utilizar el comando crontab:  Programar una tarea para que se ejecute todos los días a las 5:00 PM:    crontab -e0 17 * * * /ruta/del/script.sh        Luego presionar ctrl + X y luego Y para guardar y salir (si estás utilizando el editor nano).    Listar los trabajos programados:                               Eliminar todos los trabajos programados:  Programar una tarea para que se ejecute cada minuto:    crontab -e* * * * * /ruta/del/comando        Programar una tarea para que se ejecute cada lunes a las 6:30 AM:    crontab -e30 6 * * 1 /ruta/del/comando      En los ejemplos anteriores, la sintaxis de los cinco asteriscos en las entradas de crontab representa minuto (0-59), hora (0-23), día del mes (1-31), mes (1-12) y día de la semana (0-7, donde tanto 0 como 7 representan el domingo), respectivamente.5. ConclusiónEn resumen, los comandos sleep, watch, at y crontab son herramientas esenciales en sistemas operativos basados en Linux, como Debian, para la gestión del tiempo y la automatización de tareas.Estas herramientas proporcionan a los usuarios y administradores de sistemas unagran flexibilidad para programar y automatizar tareas, optimizando así el flujo detrabajo y la eficiencia del sistema.6. BibliografíaIONOSMontblanczoneHostgator"
  },
  
  {
    "title": "Creación de máquina virtual en VirtualBox con arranque dual",
    "url": "/posts/dual-boot/",
    "categories": "Sistemas, Virtualización",
    "tags": "Virtualización",
    "date": "2024-09-02 14:09:00 +0200",
    





    
    "snippet": "IntroducciónEn esta práctica, aprenderemos a crear una máquina virtual en VirtualBox que permita ejecutar dos sistemas operativos en modo de arranque dual: Windows y Debian Bookworm. El arranque du...",
    "content": "IntroducciónEn esta práctica, aprenderemos a crear una máquina virtual en VirtualBox que permita ejecutar dos sistemas operativos en modo de arranque dual: Windows y Debian Bookworm. El arranque dual es una técnica que nos permite elegir entre dos sistemas operativos al iniciar la máquina, lo que resulta muy útil para tener un entorno flexible y adaptable a diferentes necesidades de trabajo o pruebas. Exploraremos los pasos necesarios para instalar y configurar ambos sistemas operativos en la misma máquina virtual, asegurándonos de que puedan coexistir de manera eficiente y sin problemas de compatibilidad. ¡Comencemos!Requisitos Mínimos y RecomendadosLos requisitos específicos pueden variar según la versión de Windows yDebian que elijas, pero aquí tienes algunos requisitos generales:Para Windows (por ejemplo, Windows 10):  Mínimos: Procesador de 1 GHz, 1 GB de RAM (32 bits) o 2 GB deRAM (64 bits), 16 GB de espacio en disco duro, tarjeta gráficacompatible con DirectX 9.  Recomendados: Procesador de 2 GHz o superior, 4 GB de RAM omás, 64 GB de espacio en disco duro o más, tarjeta gráficacompatible con DirectX 11.Para Debian Bookworm (versión actualizada):  Mínimos: Procesador de 1 GHz, 1 GB de RAM, 10 GB de espacio endisco duro.  Recomendados: Procesador de 2 GHz o superior, 2 GB de RAM omás, 20 GB de espacio en disco duro o más.Requisitos Previos  Tener instalado Oracle VirtualBox en el equipo anfitrión.  Descargar las imágenes ISO de Windows y Debian Bookworm.Instalación1. Creación de la Máquina Virtual:  Abre VirtualBox.  Haga clic en “Nueva” para crear una nueva máquina virtual.  Ingresa un nombre para la máquina virtual (ejemplo: “DualBoot”).  Introduce la ISO de Windows descargada anteriormente y selecciona la versión adecuada (por ejemplo, “Windows 10 Pro de 64 bits”).  Configure la cantidad de memoria RAM asignada según los requisitos del sistema operativo Windows (en mi caso le asignaré 4096MB) y la cantidad de CPUs (en mi caso le pondré 4).  Crea un disco duro virtual y asigna un tamaño suficiente para ambos sistemas operativos (por ejemplo, 50 GB).Una vez creada la máquina, nos dirigimos a “Configuración” y en la pestaña “Sistema” deseleccionamos el disquete y dejamos seleccionadas la unidad óptica y el disco duro.Después de esto ya podemos iniciar la máquina virtual y empezar elproceso de instalación de Windows 10.2. Instalación de Windows  Seguimos las instrucciones de instalación de Windows  En la pestaña en la que nos pregunta que tipo de instalaciónqueremos elegimos “Personalizada: instalar solo Windows(avanzado)”, esto lo haremos para indicar en que parte del discoinstalaremos el sistema operativo.  Configure las opciones de idioma, zona horaria y cuenta de usuario.Después de esto ya lo deberíamos tener instalado.3. Liberación de discoTendremos que particionar el disco desde Windows para darle espacio mástarde en la instalación de Debian. Para ello seguiremos los estos pasos:  Nos dirigimos al apartado “Desfragmentar y optimizar unidades”Ahí analizaremos y optimizaremos el disco (C:) para seguidamentepoder desfragmentar el disco. Esto nos servirá a la hora de reducir elvolumen del disco principal.  Luego nos iremos al apartado “Crear y formatear particiones deldisco duro”Aquí haremos botón derecho sobre el disco duro (C:) y le daremos a“reducir volumen”, en este caso le asignaremos 20GB a la segundapartición en la cual instalaremos Debian 12.Una vez liberado y particionado el disco para darle espacio a Debian,apagamos la máquina virtual.4. Instalación de Debian Bookworm  Nos dirigimos a “Configuración” y en la pestaña de“Almacenamiento” sustituimos la imagen ISO de Windows por la deDebian 12 ya descargada anteriormente.  Seguimos las instrucciones de instalación de Debian como ya hemosvisto anteriormente, en la que configuraremos el nombre del host,crearemos una cuenta de usuario, idioma, etc.  Una vez llegamos a la configuración del particionado de disco,seleccionamos el método “Manual”, y seleccionamos el espacio libreque hemos dejado anteriormente, aquí nos dejará elegir entre crearuna partición nueva manualmente o particionar el espacio libre demanera automática, esta segunda opción es la que nos interesa. Nosdebe de quedar algo como esto:  En el apartado de selección de entorno gráfico podremos instalar elentorno que deseemos, en mi caso no instalaré ninguno. De todasformas, luego en la línea de comandos puedo instalar cualquierentorno con el comando “tasksel”.5.Configuración del Gestor de Arranque GRUB  Durante la instalación de Debian, se instalará GRUB, el gestor dearranque.  Asegúrese de que GRUB detecte automáticamente ambos sistemasoperativos (Windows y Debian) durante la instalación. Nos deberíasaltar un mensaje como este:  Esto permitirá que al iniciar la máquina virtual, puedas elegir entrelos dos sistemas operativos desde el menú de GRUB.6. Finalización de la Instalación  Reinicia la máquina virtual.  Deberías ver el menú de GRUB que te permite seleccionar entreWindows y Debian al iniciar.Y con esto ya habríamos terminado la creación de máquina virtual enVirtualBox con arranque dual."
  },
  
  {
    "title": "Compartición de carpetas",
    "url": "/posts/comparticion-carpetas/",
    "categories": "Redes, Compartición de archivos",
    "tags": "Compartición de archivos",
    "date": "2024-09-01 15:30:00 +0200",
    





    
    "snippet": "1. IntroducciónEn esta práctica se abordará la configuración y gestión de la compartición de carpetas entre diferentes sistemas operativos en una red local. La compartición de archivos es una tarea...",
    "content": "1. IntroducciónEn esta práctica se abordará la configuración y gestión de la compartición de carpetas entre diferentes sistemas operativos en una red local. La compartición de archivos es una tarea esencial en redes empresariales y domésticas, ya que permite a los usuarios acceder y gestionar recursos compartidos de manera eficiente, independientemente del sistema operativo que utilicen.El objetivo de esta práctica es demostrar cómo configurar la compartición de carpetas en diversas combinaciones de sistemas: de Windows a Windows, de Windows a Debian, de Debian a Windows, etc. Se utilizarán herramientas nativas y protocolos como Samba para garantizar la interoperabilidad entre estos sistemas.Al finalizar, se habrá aprendido a configurar adecuadamente permisos de acceso, seguridad y las mejores prácticas para la compartición de recursos en un entorno de red mixto.2. Windows a WindowsPara compartir carpetas entre dos máquinas físicas con Windows10, podemos utilizar la funcionalidad de red compartida de Windows.A continuación, te proporciono los pasos generales para hacerlo:2.1. Conexión de redAsegúrate de que ambas máquinas estén conectadas a lamisma red, ya sea mediante Wi-Fi o Ethernet. Esto es esencialpara que las computadoras se vean entre sí. En mi caso,realizaré la compartición de carpetas entre dos máquinasfísicas conectadas a una misma red Wi-Fi. Para saber nuestraIP nos dirigimos al “Cmd” y utilizamos el comando “ipconfig”.Aquí veremos diferentes IPv4, pero a mi me interesa eladaptador de LAN inalámbrica Wi-Fi:2.2. Habilitar el descubrimiento de redEn ambas máquinas, debes asegurarte de que la función de“Descubrimiento de red” esté habilitada. Para hacerlo: Ve al “Panel de control” &gt; “Redes y recursos compartidos”.En la parte izquierda, haz clic en “Cambiar la configuración deuso compartido avanzado”.Asegúrate de que la opción “Activar el uso compartido dearchivos e impresoras” esté habilitada y que la opción “Activarel descubrimiento de red” también esté habilitada.2.3. Compartir carpetasEn la máquina desde la cual deseas compartir carpetas, sigueestos pasos:  Navega a la carpeta que deseas compartir  Haz clic derecho en la carpeta y selecciona “Propiedades”.  Ve a la pestaña “Uso compartido” y haz clic en “Compartir”.  Elige a quién deseas compartir la carpeta. Puedes seleccionar “Todos” para que sea accesible para todos en la red o agregar usuarios específicos.  Define los permisos de acceso (lectura, escritura, etc.) según tus necesidades.  Haz clic en “Compartir” y luego en “Listo”.2.4. Acceso a la carpeta compartidaEn la otra máquina, para acceder a la carpeta compartida:  Abre el Explorador de Windows.  En la barra de direcciones, escribe \\”IP” (reemplaza “IP” por la ruta de la máquina desde la cual estás compartiendo la carpeta).  Deberías ver la carpeta compartida. Haz doble clic en ella y podrás acceder a su contenido.Es importante que ambas máquinas tengan configurado un grupo detrabajo común. Puedes verificar esto y cambiarlo en la configuración de redde cada máquina si es necesario. Además, asegúrate de que las cuentas deusuario en ambas máquinas tengan permisos para acceder a las carpetascompartidas si estás utilizando autenticación basada en cuentas de usuario.Ten en cuenta que estos son pasos generales y pueden variar según laconfiguración específica de tu red y tu sistema. Además, para acceder a lascarpetas compartidas en una red local, ambas máquinas deben estarencendidas y conectadas a la red al mismo tiempo.3. Windows a DebianPara compartir carpetas entre una máquina física con Windows 10 y unamáquina virtual Debian 11 se pueden utilizar diferentes métodos, pero en mi caso utilizaré Samba, en los que seguiré estos pasos:3.1. Configuración de la Máquina Virtual Debian 11Asegúrese de que la máquina virtual Debian 11 esté funcionandocorrectamente y tenga acceso a la red. Para ello tendremos quecambiar el adaptador de red en la configuración de la máquinavirtual, en este caso un adaptador puente.Después de esto, tendremos que comprobar que nuestras máquinashacen ping entre sí:Ping de Windows a DebianPing de Debian a WindowsInstale el paquete de Samba en Debian 11 si aún no está instalado.Puedes hacerlo ejecutando el siguiente comando en la terminal:Creamos la carpeta donde vamos a compartir los archivos.mkdir /home/pavlo/compartidachmod 777 /home/pavlo/compartidaEditamos el archivo de configuración de samba:nano /etc/samba/smb.confAl final del archivo insertamos el siguiente texto correspondiente a laconfiguración de nuestra carpeta compartida:[compartida]path = /home/pavlo/compartidacomment = Compartidaguest ok = yespublic = yeswritable = yesGuardamos los cambios y después reiniciamos el servicio con elcomando:service smbd restartDespués de esto creamos un documento de prueba y ya tendremoscreada una carpeta lista para compartir:En nuestro equipo con Windows nos dirigimos al apartado de red yen el navegador de archivos escribimos la IP que tengamos asignadaen Debian:Si se le solicita un nombre de usuario y una contraseña, ingrese lascredenciales de inicio de sesión de su máquina virtual Debian 11.Con esto realizado, ya podremos empezar a compartir archivos entre losdos sistemas operativos.Mencionar, que en este ejemplo hemos utilizado unos permisos para lacarpeta muy permisivos en el que cualquiera puede leer y escribir en eldirectorio.4. Debian a WindowsPara compartir carpetas de Debian a Windows tenemos que seguirexactamente los mismos pasos ya explicados en el apartado anterior.5. Debian a DebianPara compartir carpetas entre Debian y Debian hay que seguirprácticamente los mismos pasos ya explicados anteriormente. En mi casolo haré con dos máquinas virtuales entre sí. Para ello tendremos que seguir una serie de pasos:      En primer lugar y muy importante, comprobar que haya conectividad(ping) entre nuestras máquinas, en donde tendremos que configurarlas IPs para que ambas tengan coherencia. Después de ellorealizaremos la prueba y comprobamos si funciona:        Seguidamente tendremos que instalar Samba en ambas máquinas ycreamos la carpeta donde vamos a compartir los archivos.  mkdir /home/pavlo/compartidadebianchmod 777 /home/pavlo/compartidadebian  Editamos el archivo de configuración de samba:    nano /etc/samba/smb.conf      Al final del archivo insertamos el siguiente texto correspondiente a laconfiguración de nuestra carpeta compartida:[compartidadebian]path = /home/pavlo/compartidadebiancomment = Comparticion entre Debian y Debianguest ok = yespublic = yeswritable = yesGuardamos los cambios y después reiniciamos el servicio con elcomando:service smbd restart      Después de esto creamos un documento de prueba y ya tendremoscreada una carpeta lista para compartir:        Una vez configurado todo se seguirán los mismos sencillos pasos queen Windows estando en la misma red y utilizando el comandosmb://111.111.1.11  Y con esto ya habríamos hecho la compartición de carpetas entre Debian y Debian a través de Samba.6. Windows a AndroidUtilizando una aplicación llamada “fx file explorer” nos resultará muysencillo compartir carpetas entre Windows y Android.Como en todos los apartados anteriores tendremos que estar conectados ala misma red para que ambos dispositivos puedan realizar conectividadentre sí. En mi caso estarán conectados tanto mi portátil como mi teléfono a la red Wi-Fi de mi casa.Una vez instalada la aplicación y comprobado que ambos dispositivos están en la misma red, creamos una carpeta compartida en Windows dando los permisos que queramos como ya he explicado anteriormente. Despuésaccedemos al apartado de “Network” y agregamos un nuevo dispositivo enel que tendremos que poner la IP de nuestro dispositivo Windows.Una vez realizado todo esto lo único que queda es abrir la carpetacompartida con permisos y crear un archivo desde Android comprobandoque todo vaya bien.7. Debian y AndroidQuizás la forma más fácil de compartir archivos entre Android y Linux de forma inalámbrica sea descargando una aplicación FTP en un dispositivo Android. Ya que nos permite alojar rápidamente un servidor FTP improvisado en nuestro dispositivo Android, que luego puede aceptarconexiones remotas de forma inalámbrica.Antes de que podamos hablar sobre la configuración del servidor, deberáinstalar la aplicación WiFi FTP Server en su dispositivo Android. Parahacer esto, abra la aplicación Google Play Store en Android, busque“Servidor FTP WiFi” e instálalo.Después de estado tendremos que instalar Filezilla en Debian con elsiguiente comando:apt install FilezillaDentro de la aplicación de Android crearemos un servidor con la ubicación de donde queremos crear los archivos.Una vez creamos el servidor dentro de Filezilla ponemos los datos que nos da la aplicación para crear una conexión directa entre ambos dispositivos.Seguidamente le damos a “Subir” en el archivo o carpeta que queramoscompartir y así respectivamente con cualquier cosa que queramoscompartir entre ambos dispositivos."
  }
  
]

